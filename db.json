{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/pupa/source/logo.png","path":"logo.png","modified":1,"renderable":1},{"_id":"themes/pupa/source/scss/main.scss","path":"scss/main.scss","modified":1,"renderable":1},{"_id":"themes/pupa/source/scss/pupa.scss","path":"scss/pupa.scss","modified":1,"renderable":1},{"_id":"themes/pupa/source/css/main.css","path":"css/main.css","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"6974ddb0953597b845d10c3aec9016f9ed161fbb","modified":1462154771000},{"_id":"themes/pupa/.eslintrc.js","hash":"c7998b8bd3f73bcd79b53e13aa4c3ee836c5b53a","modified":1465120791000},{"_id":"themes/pupa/.gitignore","hash":"4c03e0b0e8836a77655f4de30fdef0c45f6342b6","modified":1465120791000},{"_id":"themes/pupa/_config.yml","hash":"80908e41debff0276f6ee72238fd0e3b80cfedda","modified":1465120791000},{"_id":"themes/pupa/LICENSE","hash":"afb0508656c947949fe71fc14b943cdde8d0539c","modified":1465120791000},{"_id":"themes/pupa/gulpfile.js","hash":"dbe6530358b4d73871d478896e5bca51dd07a65a","modified":1465120791000},{"_id":"themes/pupa/README.md","hash":"1d11b1b3f0fb138edbc5cf83d74fbe8d454133bf","modified":1465120791000},{"_id":"themes/pupa/package.json","hash":"e1348e87ae6240a9c3222e8ed709078e58c716c7","modified":1465120791000},{"_id":"source/_posts/2016-05-24.md","hash":"62776e0de8a4d6652d42476da8e3c448ebb54621","modified":1465123091000},{"_id":"source/_posts/.DS_Store","hash":"2091cf2007be896a259b9714f826afd0b9b4431b","modified":1465746392000},{"_id":"source/_posts/2016-05-my-workflow-in-sublime.md","hash":"242c9f76ca7131da5bc10851c652cfa70ad7827b","modified":1465698391000},{"_id":"source/_posts/2016-06-gg.md","hash":"d82a2e4784e4ea7aaec3207ec81363534b7d7829","modified":1465608101000},{"_id":"source/_posts/2016-06-auto-update-with-travis-ci.md","hash":"9b0f2fdb5201f8b198c9f69cd27645d171688921","modified":1465121453000},{"_id":"source/_posts/2016-05-package-doc.md","hash":"e892ca012f75285a29d31cf103c7df9981af8e1c","modified":1465123183000},{"_id":"source/_posts/2016-06-electron-with-hmr.md","hash":"67cdc14932f9f4956e901c3594c5693da89d910b","modified":1465208568000},{"_id":"source/_posts/2016-06-iterminal.md","hash":"49184e6a605fa7949f01eabdbadcda01b3b32ba1","modified":1465746427000},{"_id":"source/_posts/2016-06-house.md","hash":"f0073a0b5c8c0d85ce9c7295b36728e377e0edb5","modified":1465030149000},{"_id":"themes/pupa/.git/FETCH_HEAD","hash":"a9740dffbb27bbb9ae011eff1d3d49f48673c73b","modified":1465216776000},{"_id":"themes/pupa/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1465120791000},{"_id":"themes/pupa/.git/config","hash":"715eea932d083be6a06cd5a3d9af043275da38b9","modified":1465120791000},{"_id":"themes/pupa/.git/index","hash":"dbdbbc4d8eaeb2da760b8ca35027765288f7f5be","modified":1465216784000},{"_id":"themes/pupa/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1465120779000},{"_id":"themes/pupa/.git/ORIG_HEAD","hash":"7f7bb55d1ab312b15a68666d5d412e2f2dec03a4","modified":1465216776000},{"_id":"themes/pupa/.git/packed-refs","hash":"6dd9dbe11cc916a4bab6e307d8e17471586a4188","modified":1465120791000},{"_id":"themes/pupa/layout/index.jade","hash":"34d8d2ba29edf29e9ca46e6ebe67a750f6be740b","modified":1465120791000},{"_id":"themes/pupa/layout/archive.jade","hash":"62797414355bf4474092bc3a32726c8340820ffb","modified":1465120791000},{"_id":"themes/pupa/layout/post.jade","hash":"245c26244c075c3632d1545c3b228ee9d112f15d","modified":1465120791000},{"_id":"themes/pupa/languages/zh-cn.yml","hash":"8fc2102bbc3399b74c3d0896be9283a894818c28","modified":1465120791000},{"_id":"themes/pupa/languages/en.yml","hash":"28f6e76b990790d1c393032bc811d5728370e8b0","modified":1465120791000},{"_id":"themes/pupa/source/logo.png","hash":"8c786d9a3368f23f53c1896efd1a307763bd351f","modified":1465216776000},{"_id":"themes/pupa/screen.png","hash":"fbb4e83d56b0ebbc1b59cccb34b42e065a067370","modified":1465120791000},{"_id":"source/_posts/2016-06-electron-with-hmr/erb.png","hash":"942af31000f087bec191f8effe772f6061fa7afe","modified":1465185495000},{"_id":"source/_posts/2016-06-electron-with-hmr/hmr-error.png","hash":"1a55ece7739c9a8c2548d3921eae5c0f889259f2","modified":1465201853000},{"_id":"source/_posts/2016-06-house/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1465029815000},{"_id":"themes/pupa/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1465120779000},{"_id":"themes/pupa/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1465120779000},{"_id":"themes/pupa/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1465120779000},{"_id":"themes/pupa/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1465120779000},{"_id":"themes/pupa/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1465120779000},{"_id":"themes/pupa/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1465120779000},{"_id":"themes/pupa/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1465120779000},{"_id":"themes/pupa/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1465120779000},{"_id":"themes/pupa/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1465120779000},{"_id":"themes/pupa/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1465120779000},{"_id":"themes/pupa/.git/logs/HEAD","hash":"fa2176a9363e89643d309cc9b186ccc98e13112e","modified":1465216776000},{"_id":"themes/pupa/layout/partial/comment.jade","hash":"ff0a2c269c2434da2ac5529872f1d6184a71f96d","modified":1465120791000},{"_id":"themes/pupa/layout/partial/head.jade","hash":"ef09246ab1bcef577317f4b2c8c942a0e687a103","modified":1465120791000},{"_id":"themes/pupa/layout/partial/layout.jade","hash":"a34903789f5c61cc052f3271a2a8728fc9f44120","modified":1465120791000},{"_id":"themes/pupa/layout/partial/copyright.jade","hash":"9eda0ffa9473ef2ee0823259b1d48abf96bdf391","modified":1465120791000},{"_id":"themes/pupa/layout/partial/nav.jade","hash":"def1233d1e7396b790d58398595d34e2be294b8d","modified":1465120791000},{"_id":"themes/pupa/layout/partial/scripts.jade","hash":"dfa930cf5e235f403204ab25753b815e0a242b67","modified":1465120791000},{"_id":"themes/pupa/layout/mixins/paginator.jade","hash":"a8283260bc732ea4f01119f8ba8420765a6e2845","modified":1465120791000},{"_id":"themes/pupa/layout/mixins/post.jade","hash":"d19bd4ffafe9a99b076ce780b36baeb339c77454","modified":1465216776000},{"_id":"themes/pupa/source/scss/main.scss","hash":"88368b32efce18dd8fb23649f05840ab57cd22a4","modified":1465120791000},{"_id":"themes/pupa/source/scss/pupa.scss","hash":"b688207e47985b85b4ccfb07c1dada6437e2e241","modified":1465120791000},{"_id":"source/_posts/2016-06-auto-update-with-travis-ci/travis.svg","hash":"8cc73fd07b8e68a2b77217049facd29cc398d1d0","modified":1465110791000},{"_id":"source/_posts/2016-06-auto-update-with-travis-ci/token.png","hash":"d05f2419024a7683daf914c212e67552e73d8111","modified":1465110492000},{"_id":"source/_posts/2016-06-house/10.jpg","hash":"b24b4a7083b546a28e250080104d257062839303","modified":1465029749000},{"_id":"source/_posts/2016-06-house/11.jpg","hash":"ca7cefd6a00ced7f95455adaf815ec2a327235b6","modified":1465029715000},{"_id":"source/_posts/2016-06-house/12.jpg","hash":"f565c7cd57eae69a81e1d8fb2f3012f6296c4724","modified":1465029732000},{"_id":"source/_posts/2016-06-house/5.jpg","hash":"269a82fad216172ae42583787ee22e8a64f19c50","modified":1465029732000},{"_id":"source/_posts/2016-06-house/7.jpg","hash":"d666381c783ff7fb3fdb1fb1f8b3d4fb1141b7bf","modified":1465029735000},{"_id":"themes/pupa/.git/objects/00/7326fa1b80f2e3d81cf04fea9070aac971d323","hash":"589eed3cdf990f2b5f8f37e50073fa13174e153d","modified":1465216776000},{"_id":"themes/pupa/.git/objects/b8/75b3426b869a485c4bc6ac34ae9be15bf0d7d8","hash":"353bb96b1010575278baeb49a7baf4daf0cb438e","modified":1465216776000},{"_id":"themes/pupa/.git/objects/1a/394bdac534b49a3751e5c4c69cb47980488295","hash":"ca89bf87fc56e26b126e6102f5ab7f35b3efff84","modified":1465216776000},{"_id":"themes/pupa/.git/objects/16/3cd9516080cb76e03546c770e34feca2e87477","hash":"c5330b0afca6134562c2ec093329679cf5c957d7","modified":1465216776000},{"_id":"themes/pupa/.git/objects/11/39ae6f9b42002d1f15598123406da7ebff91a5","hash":"5537dbca48113b65389041dd78c2a67e125443f2","modified":1465216775000},{"_id":"themes/pupa/.git/refs/heads/master","hash":"a743caa572c6c3985460d6437a7edeebeb539444","modified":1465216776000},{"_id":"themes/pupa/.git/objects/65/8d07d597c9f9690febde73bf3d611d72c0c102","hash":"07fa4bcb6152640f6f1a269ee7a614de65d00a38","modified":1465216776000},{"_id":"themes/pupa/.git/objects/42/1978f7aedb2d2526830cf4ef23ff3918cbcc78","hash":"32b81d54cda1dc94a5261e385da3ddb408d93554","modified":1465216776000},{"_id":"themes/pupa/.git/objects/pack/pack-55b3a32b2c66f249dd0a5eb2c86eecbb663df527.idx","hash":"bd02159f8789f4ed0ac3a03d5a0988f707dbef85","modified":1465120791000},{"_id":"themes/pupa/.git/objects/75/9df3bd35bfb39282bad832bc681e5204c51eda","hash":"3792071a7ba7a9851389c7aeb3416ae03a235dd5","modified":1465216776000},{"_id":"themes/pupa/.git/objects/f3/6a174da0f363f248afdeaf15cd925a4d6b9a56","hash":"622f8bf755f672afc316123577d35c0cdb101c34","modified":1465216775000},{"_id":"themes/pupa/source/scss/_partial/archive.scss","hash":"361149b9a92d54bf0c39b5e6145281a933939f57","modified":1465120791000},{"_id":"themes/pupa/source/scss/_partial/base.scss","hash":"81d4665c33c4b772c4ce47f938f8a2212e302b34","modified":1465120791000},{"_id":"themes/pupa/source/scss/_partial/footer.scss","hash":"63289974c8121def555438617f7bb5db18af2666","modified":1465120791000},{"_id":"themes/pupa/source/scss/_partial/format.scss","hash":"3f892e909aed2d08729c06511e8ba4a9f0ae2173","modified":1465120791000},{"_id":"themes/pupa/source/scss/_partial/header.scss","hash":"390a488b882a35fb1daf5c28f139e54e2fbdf0c8","modified":1465120791000},{"_id":"themes/pupa/source/scss/_partial/mq.scss","hash":"1fc4f51a83802615b8fff3521a77760232f8664c","modified":1465120791000},{"_id":"themes/pupa/source/scss/_partial/normalize.scss","hash":"e58275a588bb631a37a2988145eea231ed23176b","modified":1465120791000},{"_id":"themes/pupa/source/scss/_partial/paginator.scss","hash":"3f6053bb00989d56c5c53e7974d20541270ed824","modified":1465120791000},{"_id":"themes/pupa/source/scss/_partial/post.scss","hash":"7d1a125200d463bba9a57b11c0aca9cdfd6d9bed","modified":1465120791000},{"_id":"themes/pupa/source/scss/_partial/print.scss","hash":"19ce304eb8f8e55902aeae211ac7023e405ea5be","modified":1465120791000},{"_id":"themes/pupa/source/scss/_partial/posts.scss","hash":"ad5ab331d2d453b15a6d4420f419620632ebc1df","modified":1465120791000},{"_id":"source/_posts/2016-06-house/1.jpg","hash":"e5bbcf4b32afed8fd624259ede129732a41f6f41","modified":1465029693000},{"_id":"source/_posts/2016-06-house/2.jpg","hash":"b75e5b274c6293474163ee96592e243ceef20e25","modified":1465029728000},{"_id":"source/_posts/2016-06-house/6.jpg","hash":"78501f7e0020a324fa2532fee0834c150d742169","modified":1465029745000},{"_id":"themes/pupa/source/css/main.css","hash":"7d08b3e4fe735e645e30a6f5f8e6552d755dfcb5","modified":1465120791000},{"_id":"source/_posts/2016-06-house/4.jpg","hash":"a77d2769c48f871153193626c773b8c4029cf9b8","modified":1465029723000},{"_id":"source/_posts/2016-06-house/3.jpg","hash":"b17abd75a0dfaf9294c478ee0b6d623c5958ebc8","modified":1465029720000},{"_id":"themes/pupa/.git/logs/refs/heads/master","hash":"fa2176a9363e89643d309cc9b186ccc98e13112e","modified":1465216776000},{"_id":"themes/pupa/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1465120791000},{"_id":"themes/pupa/.git/refs/remotes/origin/master","hash":"a743caa572c6c3985460d6437a7edeebeb539444","modified":1465216776000},{"_id":"themes/pupa/source/scss/_partial/font.scss","hash":"db1e0658c008fde42914cad4104d46981380e3de","modified":1465120791000},{"_id":"source/_posts/2016-05-24/new_year.png","hash":"bd0a3c1d6af137c9442f012c60734c3bb334d759","modified":1464087713000},{"_id":"source/_posts/2016-06-house/8.jpg","hash":"f46b3b5eff2eaab7c6209f092fcfd96a7d8386d4","modified":1465029730000},{"_id":"source/_posts/2016-05-my-workflow-in-sublime/webstorm.png","hash":"2c7baa866f09f695f221eaacd84e449289eee216","modified":1464087713000},{"_id":"source/_posts/2016-05-my-workflow-in-sublime/sublime.png","hash":"1308e44abc998811ec3ff6a936a0024c8358a798","modified":1464087713000},{"_id":"themes/pupa/.git/logs/refs/remotes/origin/master","hash":"6257f265339e70944a7d6761f918903eb66b04de","modified":1465216776000},{"_id":"themes/pupa/.git/logs/refs/remotes/origin/HEAD","hash":"d8adedec27ac6e592797bdaf75ff9f3f19a93a93","modified":1465120791000},{"_id":"source/_posts/2016-06-house/9.jpg","hash":"35b7b367af6d9445092709097bba709ebc644dad","modified":1465029731000},{"_id":"source/_posts/2016-06-gg/cover.jpg","hash":"31737863dbd9b9d2c46adf8d4132b33d976852ee","modified":1465607522000},{"_id":"source/_posts/2016-06-iterminal/iterm.png","hash":"47b50680dd9b58d5b08f1a566e5c4bb6f0916ae1","modified":1465746380000},{"_id":"themes/pupa/.git/objects/pack/pack-55b3a32b2c66f249dd0a5eb2c86eecbb663df527.pack","hash":"4ab07866a750389779b6c0c449b7aff5715e0dd7","modified":1465120791000}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"24","date":"2016-05-08T16:05:02.000Z","_content":"\n{% asset_img new_year.png new year %}\n\n<!-- more -->\n\n24，我希望多点耐心\n24，我希望少点浮躁\n24，我希望保持前进\n24，我希望好运相伴\n24，我希望亲人健康\n24，我希望变得更好\n24，我希望如图一样绚烂\n","source":"_posts/2016-05-24.md","raw":"---\ntitle: 24\ndate: 2016-05-09 00:05:02\ntags: life\n---\n\n{% asset_img new_year.png new year %}\n\n<!-- more -->\n\n24，我希望多点耐心\n24，我希望少点浮躁\n24，我希望保持前进\n24，我希望好运相伴\n24，我希望亲人健康\n24，我希望变得更好\n24，我希望如图一样绚烂\n","slug":"24","published":1,"updated":"2016-06-05T10:38:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipcrlulg0000hry1vdtby0ql","content":"<img src=\"/pupa/2016/05/24/new_year.png\" alt=\"new year\" title=\"new year\">\n<a id=\"more\"></a>\n<p>24，我希望多点耐心<br>24，我希望少点浮躁<br>24，我希望保持前进<br>24，我希望好运相伴<br>24，我希望亲人健康<br>24，我希望变得更好<br>24，我希望如图一样绚烂</p>\n","excerpt":"<img src=\"/pupa/2016/05/24/new_year.png\" alt=\"new year\" title=\"new year\">","more":"<p>24，我希望多点耐心<br>24，我希望少点浮躁<br>24，我希望保持前进<br>24，我希望好运相伴<br>24，我希望亲人健康<br>24，我希望变得更好<br>24，我希望如图一样绚烂</p>"},{"title":"前端工程化之IDE搭建","date":"2016-05-01T10:06:39.000Z","_content":"\n\n起了这么个题，其实主要是记录下自己最近常用的一些插件、工具。\n\n最近在做代码重构，看到很多以前写的代码乱七八糟的，尤其是代码格式不统一规范，看起来特别累。\n\n在做重构的时候，难免要更改很大一块代码，可能涉及到很多逻辑修改，这个时候没有好的IDE来支持，很容易出错而不知。\n\n而且重构时，总想着把代码格式也统一一下，比较好看。所以决定好好搞搞开发环境，提高生产效率，减少低级错误。\n\n这篇文章主要记录下，自己的正在使用的开发环境搭建。\n\n<!--more-->\n\n## 关于前端工程\n\n关于软件工程的解释可以看维基百科的说明：[软件工程](https://zh.wikipedia.org/wiki/软件工程)。\n\n**软件工程包括两种构面：软件开发技术和软件项目管理：**\n\n> 软件开发技术：软件开发方法学、软件工具和软件工程环境\n> 软件项目管理：软件度量、项目估算、进度控制、人员组织、配置管理、项目项目等。\n\n上面是引用维基百科上的一段话，我主要讲下软件工具吧，工程环境应该算是项目的搭建了吧，比如：工程结构。\n\n那么前端工程呢，前端其实提起工程化，应该是最近几年才流行的，以前大多都是被当成切图的了，或者设计师兼职？ 前端最近几年的社区活跃，牛人们搞出了各种框架、工具，使得前端可以做更多复杂的事。\n\n由于我之前一直在开发单页面应用，其实早已感受到前端构建的复杂 web 应用，工程量不亚于一般的传统软件。因此，前端应该开始规范起来，思考怎么工程化。\n\n好了，不再扯这些了，待更牛逼的时候，再扯扯...\n\n\n## IDE搭建\n\n### 编辑器选择\n\n其实前端可用的编辑器还挺多的，我用过的就有这些，也算比较主流了，[Nodepad++](https://notepad-plus-plus.org/), [Atom](https://atom.io/), [VSCode](http://code.visualstudio.com/), [WebStorm](https://www.jetbrains.com/webstorm/), [Sublime](https://www.sublimetext.com/)。\n\n`Nodepad++` 其实我使用的不多，主要是以前编辑文本的时候用过，后来几年一直没有用过了，`Atom` 刚出来的时候就用上了，`VSCode` 也是刚出来就马上用了下，和 `atom` 一个毛病，就是用 `electron` 编写的，性能上不行，打开大文件的时候会卡一会，曾经经常挂掉，`WebStorm` 试用过一段时间，还是非常不错的，就是丑了些，还有费用需要年费... 所以到现在一直使用的就是 `Sublime` 了。\n\n![WebStorm Features](./webstorm.png)\n\n但是要说的上是IDE的话，感觉只有 [WebStorm](https://www.jetbrains.com/webstorm/) 算得上了，[VSCode](http://code.visualstudio.com/) 也还不错了，但是功能并没有那么强大。\n\n关于 `WebStorm` 更多信息可以看下官方的 [features](https://www.jetbrains.com/webstorm/features/) 页面。如果你刚好喜欢 `Webstore` 的话，那就选择它吧，也就不需要后面那么多的折腾了。\n\n\n### Sublime\n\n关于怎么装插件的就不说了，插件都可以到这个页面搜索 <https://packagecontrol.io/>。\n一些常用的插件，为了自己方便都在 [github](https://github.com/xwartz/Sublime-Backup) 上做了备份。\n\n常用的有这些：`Emmet`, `DocBlockr`, `Git`, `GitGutter`, `Bracket Highlighter`, `Tag`, `Autocomplete`, `Color Highlighter`, `Reactjs` ...\n\n### Editorconfig\n\n为了让代码风格在不同IDE下保持一致，应该在项目目录下配置 [.editorconfig](http://editorconfig.org/)\n\n这是我一般常用的配置\n\n```\n# editorconfig.org\n\nroot = true\n\n[*]\nindent_style = space\nindent_size = 2\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[*.md]\ntrim_trailing_whitespace = false\n\n```\n\n### Lint\n\n对于代码重构的话，肯定少不了 `lint`。目前比较流行的主要有 [JSLint](http://jshint.com/docs/) 和 [ESLint](http://eslint.org/)，我选择 `ESLint`，因为它更灵活，可配置性高，并且有社区活跃用户在维持。 \n\n使用 `ESLint` 需要安装 [Nodejs](http://nodejs.org/)，嗷，`Nodejs` 6.0 已经支持93%(记得是)的特性了，真棒！以后可以少用 `Babel` 了。 \n然后全局安装 `ESLint`, `npm i -g eslint`。那么已经可以在命令行里使用了。\n\n要在 `Sublime` 中配置的话，需要安装插件 [SublimeLinter](https://packagecontrol.io/packages/SublimeLinter) 和 [SublimeLinter-contrib-eslint](https://github.com/roadhump/SublimeLinter-eslint), \n然后在对应的项目下创建 `eslintrc` Configuring 文件，配置自己的 `rules`, 具体可以看官方文档[user-guide](http://eslint.org/docs/user-guide/configuring)，然后代码就会得到 `lint` 提示了。\n\n\n如果用的 `ES2015` 可以将 `syntax_map` 配置改为\n\n```json\n\"javascript (babel)\": \"javascript\",\n```\n\n总之还是应该多看官方文档，根据自己的项目情况去配置环境。\n\n### Code Style\n\n目前 `JavaScript` 的代码规范也有很多份，比较流行的有 [Google](https://google.github.io/styleguide/javascriptguide.xml), [AirBnb](https://github.com/airbnb/javascript), [Standard](https://github.com/feross/standard)。推荐选择 `Standard`，不喜欢写分号，以下是它的规则\n\n#### [Rules](https://github.com/feross/standard#rules):\n\n>- **2 spaces** – for indentation\n>- **Single quotes for strings** – except to avoid escaping\n>- **No unused variables** – this one catches *tons* of bugs!\n>- **No semicolons** – [It's][1] [fine.][2] [Really!][3]\n>- **Never start a line with `(` or `[`**\n>  - This is the **only** gotcha with omitting semicolons – *automatically checked for you!*\n>  - [More details][4]\n>- **Space after keywords** `if (condition) { ... }`\n>- **Space after function name** `function name (arg) { ... }`\n>- Always use `===` instead of `==` – but `obj == null` is allowed to check `null || undefined`.\n>- Always handle the node.js `err` function parameter\n>- Always prefix browser globals with `window` – except `document` and `navigator` are okay\n>  - Prevents accidental use of poorly-named browser globals like `open`, `length`,\n    `event`, and `name`.\n>- **And [more goodness][5]** – *give `standard` a try today!*\n\n\n[1]: http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding\n[2]: http://inimino.org/~inimino/blog/javascript_semicolons\n[3]: https://www.youtube.com/watch?v=gsfbh17Ax9I\n[4]: https://github.com/feross/standard/blob/master/RULES.md#semicolons\n[5]: https://github.com/feross/standard/blob/master/RULES.md#javascript-standard-style\n\n所以每次开始一个项目的时候，我总是 `eslint --init` 之后选择 `Standard`，然后加一些插件就 OK 了。\n\n![sublime lint](./sublime.png)\n\n还可以在 `github` 项目中很方便的加上它的 Logo \n\n![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg) \n\n\n### Over\n\n好了，基本上的配置也就这些了，虽然还不够强大，毕竟对于js这种弱类型的语言静态分析没那么容易，希望有更好的IDE出现，希望 `VSCode` 的性能问题能搞定。\n\n前端是个很杂的玩意，总是需要时间去积累，碰到了问题多看官方文档，多多使用谷歌，好在前端的社区足够活跃。\n\n","source":"_posts/2016-05-my-workflow-in-sublime.md","raw":"---\ntitle: 前端工程化之IDE搭建\ndate: 2016-05-01 18:06:39\ntags: 前端工程\n---\n\n\n起了这么个题，其实主要是记录下自己最近常用的一些插件、工具。\n\n最近在做代码重构，看到很多以前写的代码乱七八糟的，尤其是代码格式不统一规范，看起来特别累。\n\n在做重构的时候，难免要更改很大一块代码，可能涉及到很多逻辑修改，这个时候没有好的IDE来支持，很容易出错而不知。\n\n而且重构时，总想着把代码格式也统一一下，比较好看。所以决定好好搞搞开发环境，提高生产效率，减少低级错误。\n\n这篇文章主要记录下，自己的正在使用的开发环境搭建。\n\n<!--more-->\n\n## 关于前端工程\n\n关于软件工程的解释可以看维基百科的说明：[软件工程](https://zh.wikipedia.org/wiki/软件工程)。\n\n**软件工程包括两种构面：软件开发技术和软件项目管理：**\n\n> 软件开发技术：软件开发方法学、软件工具和软件工程环境\n> 软件项目管理：软件度量、项目估算、进度控制、人员组织、配置管理、项目项目等。\n\n上面是引用维基百科上的一段话，我主要讲下软件工具吧，工程环境应该算是项目的搭建了吧，比如：工程结构。\n\n那么前端工程呢，前端其实提起工程化，应该是最近几年才流行的，以前大多都是被当成切图的了，或者设计师兼职？ 前端最近几年的社区活跃，牛人们搞出了各种框架、工具，使得前端可以做更多复杂的事。\n\n由于我之前一直在开发单页面应用，其实早已感受到前端构建的复杂 web 应用，工程量不亚于一般的传统软件。因此，前端应该开始规范起来，思考怎么工程化。\n\n好了，不再扯这些了，待更牛逼的时候，再扯扯...\n\n\n## IDE搭建\n\n### 编辑器选择\n\n其实前端可用的编辑器还挺多的，我用过的就有这些，也算比较主流了，[Nodepad++](https://notepad-plus-plus.org/), [Atom](https://atom.io/), [VSCode](http://code.visualstudio.com/), [WebStorm](https://www.jetbrains.com/webstorm/), [Sublime](https://www.sublimetext.com/)。\n\n`Nodepad++` 其实我使用的不多，主要是以前编辑文本的时候用过，后来几年一直没有用过了，`Atom` 刚出来的时候就用上了，`VSCode` 也是刚出来就马上用了下，和 `atom` 一个毛病，就是用 `electron` 编写的，性能上不行，打开大文件的时候会卡一会，曾经经常挂掉，`WebStorm` 试用过一段时间，还是非常不错的，就是丑了些，还有费用需要年费... 所以到现在一直使用的就是 `Sublime` 了。\n\n![WebStorm Features](./webstorm.png)\n\n但是要说的上是IDE的话，感觉只有 [WebStorm](https://www.jetbrains.com/webstorm/) 算得上了，[VSCode](http://code.visualstudio.com/) 也还不错了，但是功能并没有那么强大。\n\n关于 `WebStorm` 更多信息可以看下官方的 [features](https://www.jetbrains.com/webstorm/features/) 页面。如果你刚好喜欢 `Webstore` 的话，那就选择它吧，也就不需要后面那么多的折腾了。\n\n\n### Sublime\n\n关于怎么装插件的就不说了，插件都可以到这个页面搜索 <https://packagecontrol.io/>。\n一些常用的插件，为了自己方便都在 [github](https://github.com/xwartz/Sublime-Backup) 上做了备份。\n\n常用的有这些：`Emmet`, `DocBlockr`, `Git`, `GitGutter`, `Bracket Highlighter`, `Tag`, `Autocomplete`, `Color Highlighter`, `Reactjs` ...\n\n### Editorconfig\n\n为了让代码风格在不同IDE下保持一致，应该在项目目录下配置 [.editorconfig](http://editorconfig.org/)\n\n这是我一般常用的配置\n\n```\n# editorconfig.org\n\nroot = true\n\n[*]\nindent_style = space\nindent_size = 2\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[*.md]\ntrim_trailing_whitespace = false\n\n```\n\n### Lint\n\n对于代码重构的话，肯定少不了 `lint`。目前比较流行的主要有 [JSLint](http://jshint.com/docs/) 和 [ESLint](http://eslint.org/)，我选择 `ESLint`，因为它更灵活，可配置性高，并且有社区活跃用户在维持。 \n\n使用 `ESLint` 需要安装 [Nodejs](http://nodejs.org/)，嗷，`Nodejs` 6.0 已经支持93%(记得是)的特性了，真棒！以后可以少用 `Babel` 了。 \n然后全局安装 `ESLint`, `npm i -g eslint`。那么已经可以在命令行里使用了。\n\n要在 `Sublime` 中配置的话，需要安装插件 [SublimeLinter](https://packagecontrol.io/packages/SublimeLinter) 和 [SublimeLinter-contrib-eslint](https://github.com/roadhump/SublimeLinter-eslint), \n然后在对应的项目下创建 `eslintrc` Configuring 文件，配置自己的 `rules`, 具体可以看官方文档[user-guide](http://eslint.org/docs/user-guide/configuring)，然后代码就会得到 `lint` 提示了。\n\n\n如果用的 `ES2015` 可以将 `syntax_map` 配置改为\n\n```json\n\"javascript (babel)\": \"javascript\",\n```\n\n总之还是应该多看官方文档，根据自己的项目情况去配置环境。\n\n### Code Style\n\n目前 `JavaScript` 的代码规范也有很多份，比较流行的有 [Google](https://google.github.io/styleguide/javascriptguide.xml), [AirBnb](https://github.com/airbnb/javascript), [Standard](https://github.com/feross/standard)。推荐选择 `Standard`，不喜欢写分号，以下是它的规则\n\n#### [Rules](https://github.com/feross/standard#rules):\n\n>- **2 spaces** – for indentation\n>- **Single quotes for strings** – except to avoid escaping\n>- **No unused variables** – this one catches *tons* of bugs!\n>- **No semicolons** – [It's][1] [fine.][2] [Really!][3]\n>- **Never start a line with `(` or `[`**\n>  - This is the **only** gotcha with omitting semicolons – *automatically checked for you!*\n>  - [More details][4]\n>- **Space after keywords** `if (condition) { ... }`\n>- **Space after function name** `function name (arg) { ... }`\n>- Always use `===` instead of `==` – but `obj == null` is allowed to check `null || undefined`.\n>- Always handle the node.js `err` function parameter\n>- Always prefix browser globals with `window` – except `document` and `navigator` are okay\n>  - Prevents accidental use of poorly-named browser globals like `open`, `length`,\n    `event`, and `name`.\n>- **And [more goodness][5]** – *give `standard` a try today!*\n\n\n[1]: http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding\n[2]: http://inimino.org/~inimino/blog/javascript_semicolons\n[3]: https://www.youtube.com/watch?v=gsfbh17Ax9I\n[4]: https://github.com/feross/standard/blob/master/RULES.md#semicolons\n[5]: https://github.com/feross/standard/blob/master/RULES.md#javascript-standard-style\n\n所以每次开始一个项目的时候，我总是 `eslint --init` 之后选择 `Standard`，然后加一些插件就 OK 了。\n\n![sublime lint](./sublime.png)\n\n还可以在 `github` 项目中很方便的加上它的 Logo \n\n![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg) \n\n\n### Over\n\n好了，基本上的配置也就这些了，虽然还不够强大，毕竟对于js这种弱类型的语言静态分析没那么容易，希望有更好的IDE出现，希望 `VSCode` 的性能问题能搞定。\n\n前端是个很杂的玩意，总是需要时间去积累，碰到了问题多看官方文档，多多使用谷歌，好在前端的社区足够活跃。\n\n","slug":"my-workflow-in-sublime","published":1,"updated":"2016-06-12T02:26:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipcrlull0001hry1pzjzpyr2","content":"<p>起了这么个题，其实主要是记录下自己最近常用的一些插件、工具。</p>\n<p>最近在做代码重构，看到很多以前写的代码乱七八糟的，尤其是代码格式不统一规范，看起来特别累。</p>\n<p>在做重构的时候，难免要更改很大一块代码，可能涉及到很多逻辑修改，这个时候没有好的IDE来支持，很容易出错而不知。</p>\n<p>而且重构时，总想着把代码格式也统一一下，比较好看。所以决定好好搞搞开发环境，提高生产效率，减少低级错误。</p>\n<p>这篇文章主要记录下，自己的正在使用的开发环境搭建。</p>\n<a id=\"more\"></a>\n<h2 id=\"关于前端工程\"><a href=\"#关于前端工程\" class=\"headerlink\" title=\"关于前端工程\"></a>关于前端工程</h2><p>关于软件工程的解释可以看维基百科的说明：<a href=\"https://zh.wikipedia.org/wiki/软件工程\" target=\"_blank\" rel=\"external\">软件工程</a>。</p>\n<p><strong>软件工程包括两种构面：软件开发技术和软件项目管理：</strong></p>\n<blockquote>\n<p>软件开发技术：软件开发方法学、软件工具和软件工程环境<br>软件项目管理：软件度量、项目估算、进度控制、人员组织、配置管理、项目项目等。</p>\n</blockquote>\n<p>上面是引用维基百科上的一段话，我主要讲下软件工具吧，工程环境应该算是项目的搭建了吧，比如：工程结构。</p>\n<p>那么前端工程呢，前端其实提起工程化，应该是最近几年才流行的，以前大多都是被当成切图的了，或者设计师兼职？ 前端最近几年的社区活跃，牛人们搞出了各种框架、工具，使得前端可以做更多复杂的事。</p>\n<p>由于我之前一直在开发单页面应用，其实早已感受到前端构建的复杂 web 应用，工程量不亚于一般的传统软件。因此，前端应该开始规范起来，思考怎么工程化。</p>\n<p>好了，不再扯这些了，待更牛逼的时候，再扯扯…</p>\n<h2 id=\"IDE搭建\"><a href=\"#IDE搭建\" class=\"headerlink\" title=\"IDE搭建\"></a>IDE搭建</h2><h3 id=\"编辑器选择\"><a href=\"#编辑器选择\" class=\"headerlink\" title=\"编辑器选择\"></a>编辑器选择</h3><p>其实前端可用的编辑器还挺多的，我用过的就有这些，也算比较主流了，<a href=\"https://notepad-plus-plus.org/\" target=\"_blank\" rel=\"external\">Nodepad++</a>, <a href=\"https://atom.io/\" target=\"_blank\" rel=\"external\">Atom</a>, <a href=\"http://code.visualstudio.com/\" target=\"_blank\" rel=\"external\">VSCode</a>, <a href=\"https://www.jetbrains.com/webstorm/\" target=\"_blank\" rel=\"external\">WebStorm</a>, <a href=\"https://www.sublimetext.com/\" target=\"_blank\" rel=\"external\">Sublime</a>。</p>\n<p><code>Nodepad++</code> 其实我使用的不多，主要是以前编辑文本的时候用过，后来几年一直没有用过了，<code>Atom</code> 刚出来的时候就用上了，<code>VSCode</code> 也是刚出来就马上用了下，和 <code>atom</code> 一个毛病，就是用 <code>electron</code> 编写的，性能上不行，打开大文件的时候会卡一会，曾经经常挂掉，<code>WebStorm</code> 试用过一段时间，还是非常不错的，就是丑了些，还有费用需要年费… 所以到现在一直使用的就是 <code>Sublime</code> 了。</p>\n<p><img src=\"./webstorm.png\" alt=\"WebStorm Features\"></p>\n<p>但是要说的上是IDE的话，感觉只有 <a href=\"https://www.jetbrains.com/webstorm/\" target=\"_blank\" rel=\"external\">WebStorm</a> 算得上了，<a href=\"http://code.visualstudio.com/\" target=\"_blank\" rel=\"external\">VSCode</a> 也还不错了，但是功能并没有那么强大。</p>\n<p>关于 <code>WebStorm</code> 更多信息可以看下官方的 <a href=\"https://www.jetbrains.com/webstorm/features/\" target=\"_blank\" rel=\"external\">features</a> 页面。如果你刚好喜欢 <code>Webstore</code> 的话，那就选择它吧，也就不需要后面那么多的折腾了。</p>\n<h3 id=\"Sublime\"><a href=\"#Sublime\" class=\"headerlink\" title=\"Sublime\"></a>Sublime</h3><p>关于怎么装插件的就不说了，插件都可以到这个页面搜索 <a href=\"https://packagecontrol.io/\" target=\"_blank\" rel=\"external\">https://packagecontrol.io/</a>。<br>一些常用的插件，为了自己方便都在 <a href=\"https://github.com/xwartz/Sublime-Backup\" target=\"_blank\" rel=\"external\">github</a> 上做了备份。</p>\n<p>常用的有这些：<code>Emmet</code>, <code>DocBlockr</code>, <code>Git</code>, <code>GitGutter</code>, <code>Bracket Highlighter</code>, <code>Tag</code>, <code>Autocomplete</code>, <code>Color Highlighter</code>, <code>Reactjs</code> …</p>\n<h3 id=\"Editorconfig\"><a href=\"#Editorconfig\" class=\"headerlink\" title=\"Editorconfig\"></a>Editorconfig</h3><p>为了让代码风格在不同IDE下保持一致，应该在项目目录下配置 <a href=\"http://editorconfig.org/\" target=\"_blank\" rel=\"external\">.editorconfig</a></p>\n<p>这是我一般常用的配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># editorconfig.org</span><br><span class=\"line\"></span><br><span class=\"line\">root = true</span><br><span class=\"line\"></span><br><span class=\"line\">[*]</span><br><span class=\"line\">indent_style = space</span><br><span class=\"line\">indent_size = 2</span><br><span class=\"line\">end_of_line = lf</span><br><span class=\"line\">charset = utf-8</span><br><span class=\"line\">trim_trailing_whitespace = true</span><br><span class=\"line\">insert_final_newline = true</span><br><span class=\"line\"></span><br><span class=\"line\">[*.md]</span><br><span class=\"line\">trim_trailing_whitespace = false</span><br></pre></td></tr></table></figure>\n<h3 id=\"Lint\"><a href=\"#Lint\" class=\"headerlink\" title=\"Lint\"></a>Lint</h3><p>对于代码重构的话，肯定少不了 <code>lint</code>。目前比较流行的主要有 <a href=\"http://jshint.com/docs/\" target=\"_blank\" rel=\"external\">JSLint</a> 和 <a href=\"http://eslint.org/\" target=\"_blank\" rel=\"external\">ESLint</a>，我选择 <code>ESLint</code>，因为它更灵活，可配置性高，并且有社区活跃用户在维持。 </p>\n<p>使用 <code>ESLint</code> 需要安装 <a href=\"http://nodejs.org/\" target=\"_blank\" rel=\"external\">Nodejs</a>，嗷，<code>Nodejs</code> 6.0 已经支持93%(记得是)的特性了，真棒！以后可以少用 <code>Babel</code> 了。<br>然后全局安装 <code>ESLint</code>, <code>npm i -g eslint</code>。那么已经可以在命令行里使用了。</p>\n<p>要在 <code>Sublime</code> 中配置的话，需要安装插件 <a href=\"https://packagecontrol.io/packages/SublimeLinter\" target=\"_blank\" rel=\"external\">SublimeLinter</a> 和 <a href=\"https://github.com/roadhump/SublimeLinter-eslint\" target=\"_blank\" rel=\"external\">SublimeLinter-contrib-eslint</a>,<br>然后在对应的项目下创建 <code>eslintrc</code> Configuring 文件，配置自己的 <code>rules</code>, 具体可以看官方文档<a href=\"http://eslint.org/docs/user-guide/configuring\" target=\"_blank\" rel=\"external\">user-guide</a>，然后代码就会得到 <code>lint</code> 提示了。</p>\n<p>如果用的 <code>ES2015</code> 可以将 <code>syntax_map</code> 配置改为</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"javascript (babel)\": \"javascript\",</span><br></pre></td></tr></table></figure>\n<p>总之还是应该多看官方文档，根据自己的项目情况去配置环境。</p>\n<h3 id=\"Code-Style\"><a href=\"#Code-Style\" class=\"headerlink\" title=\"Code Style\"></a>Code Style</h3><p>目前 <code>JavaScript</code> 的代码规范也有很多份，比较流行的有 <a href=\"https://google.github.io/styleguide/javascriptguide.xml\" target=\"_blank\" rel=\"external\">Google</a>, <a href=\"https://github.com/airbnb/javascript\" target=\"_blank\" rel=\"external\">AirBnb</a>, <a href=\"https://github.com/feross/standard\" target=\"_blank\" rel=\"external\">Standard</a>。推荐选择 <code>Standard</code>，不喜欢写分号，以下是它的规则</p>\n<h4 id=\"Rules\"><a href=\"#Rules\" class=\"headerlink\" title=\"Rules:\"></a><a href=\"https://github.com/feross/standard#rules\" target=\"_blank\" rel=\"external\">Rules</a>:</h4><blockquote>\n<ul>\n<li><strong>2 spaces</strong> – for indentation</li>\n<li><strong>Single quotes for strings</strong> – except to avoid escaping</li>\n<li><strong>No unused variables</strong> – this one catches <em>tons</em> of bugs!</li>\n<li><strong>No semicolons</strong> – <a href=\"http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding\" target=\"_blank\" rel=\"external\">It’s</a> <a href=\"http://inimino.org/~inimino/blog/javascript_semicolons\" target=\"_blank\" rel=\"external\">fine.</a> <a href=\"https://www.youtube.com/watch?v=gsfbh17Ax9I\" target=\"_blank\" rel=\"external\">Really!</a></li>\n<li><strong>Never start a line with <code>(</code> or <code>[</code></strong><ul>\n<li>This is the <strong>only</strong> gotcha with omitting semicolons – <em>automatically checked for you!</em></li>\n<li><a href=\"https://github.com/feross/standard/blob/master/RULES.md#semicolons\" target=\"_blank\" rel=\"external\">More details</a></li>\n</ul>\n</li>\n<li><strong>Space after keywords</strong> <code>if (condition) { ... }</code></li>\n<li><strong>Space after function name</strong> <code>function name (arg) { ... }</code></li>\n<li>Always use <code>===</code> instead of <code>==</code> – but <code>obj == null</code> is allowed to check <code>null || undefined</code>.</li>\n<li>Always handle the node.js <code>err</code> function parameter</li>\n<li>Always prefix browser globals with <code>window</code> – except <code>document</code> and <code>navigator</code> are okay<ul>\n<li>Prevents accidental use of poorly-named browser globals like <code>open</code>, <code>length</code>,<br><code>event</code>, and <code>name</code>.</li>\n</ul>\n</li>\n<li><strong>And <a href=\"https://github.com/feross/standard/blob/master/RULES.md#javascript-standard-style\" target=\"_blank\" rel=\"external\">more goodness</a></strong> – <em>give <code>standard</code> a try today!</em></li>\n</ul>\n</blockquote>\n<p>所以每次开始一个项目的时候，我总是 <code>eslint --init</code> 之后选择 <code>Standard</code>，然后加一些插件就 OK 了。</p>\n<p><img src=\"./sublime.png\" alt=\"sublime lint\"></p>\n<p>还可以在 <code>github</code> 项目中很方便的加上它的 Logo </p>\n<p><img src=\"https://img.shields.io/badge/code%20style-standard-brightgreen.svg\" alt=\"js-standard-style\"> </p>\n<h3 id=\"Over\"><a href=\"#Over\" class=\"headerlink\" title=\"Over\"></a>Over</h3><p>好了，基本上的配置也就这些了，虽然还不够强大，毕竟对于js这种弱类型的语言静态分析没那么容易，希望有更好的IDE出现，希望 <code>VSCode</code> 的性能问题能搞定。</p>\n<p>前端是个很杂的玩意，总是需要时间去积累，碰到了问题多看官方文档，多多使用谷歌，好在前端的社区足够活跃。</p>\n","excerpt":"<p>起了这么个题，其实主要是记录下自己最近常用的一些插件、工具。</p>\n<p>最近在做代码重构，看到很多以前写的代码乱七八糟的，尤其是代码格式不统一规范，看起来特别累。</p>\n<p>在做重构的时候，难免要更改很大一块代码，可能涉及到很多逻辑修改，这个时候没有好的IDE来支持，很容易出错而不知。</p>\n<p>而且重构时，总想着把代码格式也统一一下，比较好看。所以决定好好搞搞开发环境，提高生产效率，减少低级错误。</p>\n<p>这篇文章主要记录下，自己的正在使用的开发环境搭建。</p>","more":"<h2 id=\"关于前端工程\"><a href=\"#关于前端工程\" class=\"headerlink\" title=\"关于前端工程\"></a>关于前端工程</h2><p>关于软件工程的解释可以看维基百科的说明：<a href=\"https://zh.wikipedia.org/wiki/软件工程\">软件工程</a>。</p>\n<p><strong>软件工程包括两种构面：软件开发技术和软件项目管理：</strong></p>\n<blockquote>\n<p>软件开发技术：软件开发方法学、软件工具和软件工程环境<br>软件项目管理：软件度量、项目估算、进度控制、人员组织、配置管理、项目项目等。</p>\n</blockquote>\n<p>上面是引用维基百科上的一段话，我主要讲下软件工具吧，工程环境应该算是项目的搭建了吧，比如：工程结构。</p>\n<p>那么前端工程呢，前端其实提起工程化，应该是最近几年才流行的，以前大多都是被当成切图的了，或者设计师兼职？ 前端最近几年的社区活跃，牛人们搞出了各种框架、工具，使得前端可以做更多复杂的事。</p>\n<p>由于我之前一直在开发单页面应用，其实早已感受到前端构建的复杂 web 应用，工程量不亚于一般的传统软件。因此，前端应该开始规范起来，思考怎么工程化。</p>\n<p>好了，不再扯这些了，待更牛逼的时候，再扯扯…</p>\n<h2 id=\"IDE搭建\"><a href=\"#IDE搭建\" class=\"headerlink\" title=\"IDE搭建\"></a>IDE搭建</h2><h3 id=\"编辑器选择\"><a href=\"#编辑器选择\" class=\"headerlink\" title=\"编辑器选择\"></a>编辑器选择</h3><p>其实前端可用的编辑器还挺多的，我用过的就有这些，也算比较主流了，<a href=\"https://notepad-plus-plus.org/\">Nodepad++</a>, <a href=\"https://atom.io/\">Atom</a>, <a href=\"http://code.visualstudio.com/\">VSCode</a>, <a href=\"https://www.jetbrains.com/webstorm/\">WebStorm</a>, <a href=\"https://www.sublimetext.com/\">Sublime</a>。</p>\n<p><code>Nodepad++</code> 其实我使用的不多，主要是以前编辑文本的时候用过，后来几年一直没有用过了，<code>Atom</code> 刚出来的时候就用上了，<code>VSCode</code> 也是刚出来就马上用了下，和 <code>atom</code> 一个毛病，就是用 <code>electron</code> 编写的，性能上不行，打开大文件的时候会卡一会，曾经经常挂掉，<code>WebStorm</code> 试用过一段时间，还是非常不错的，就是丑了些，还有费用需要年费… 所以到现在一直使用的就是 <code>Sublime</code> 了。</p>\n<p><img src=\"./webstorm.png\" alt=\"WebStorm Features\"></p>\n<p>但是要说的上是IDE的话，感觉只有 <a href=\"https://www.jetbrains.com/webstorm/\">WebStorm</a> 算得上了，<a href=\"http://code.visualstudio.com/\">VSCode</a> 也还不错了，但是功能并没有那么强大。</p>\n<p>关于 <code>WebStorm</code> 更多信息可以看下官方的 <a href=\"https://www.jetbrains.com/webstorm/features/\">features</a> 页面。如果你刚好喜欢 <code>Webstore</code> 的话，那就选择它吧，也就不需要后面那么多的折腾了。</p>\n<h3 id=\"Sublime\"><a href=\"#Sublime\" class=\"headerlink\" title=\"Sublime\"></a>Sublime</h3><p>关于怎么装插件的就不说了，插件都可以到这个页面搜索 <a href=\"https://packagecontrol.io/\">https://packagecontrol.io/</a>。<br>一些常用的插件，为了自己方便都在 <a href=\"https://github.com/xwartz/Sublime-Backup\">github</a> 上做了备份。</p>\n<p>常用的有这些：<code>Emmet</code>, <code>DocBlockr</code>, <code>Git</code>, <code>GitGutter</code>, <code>Bracket Highlighter</code>, <code>Tag</code>, <code>Autocomplete</code>, <code>Color Highlighter</code>, <code>Reactjs</code> …</p>\n<h3 id=\"Editorconfig\"><a href=\"#Editorconfig\" class=\"headerlink\" title=\"Editorconfig\"></a>Editorconfig</h3><p>为了让代码风格在不同IDE下保持一致，应该在项目目录下配置 <a href=\"http://editorconfig.org/\">.editorconfig</a></p>\n<p>这是我一般常用的配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># editorconfig.org</span><br><span class=\"line\"></span><br><span class=\"line\">root = true</span><br><span class=\"line\"></span><br><span class=\"line\">[*]</span><br><span class=\"line\">indent_style = space</span><br><span class=\"line\">indent_size = 2</span><br><span class=\"line\">end_of_line = lf</span><br><span class=\"line\">charset = utf-8</span><br><span class=\"line\">trim_trailing_whitespace = true</span><br><span class=\"line\">insert_final_newline = true</span><br><span class=\"line\"></span><br><span class=\"line\">[*.md]</span><br><span class=\"line\">trim_trailing_whitespace = false</span><br></pre></td></tr></table></figure>\n<h3 id=\"Lint\"><a href=\"#Lint\" class=\"headerlink\" title=\"Lint\"></a>Lint</h3><p>对于代码重构的话，肯定少不了 <code>lint</code>。目前比较流行的主要有 <a href=\"http://jshint.com/docs/\">JSLint</a> 和 <a href=\"http://eslint.org/\">ESLint</a>，我选择 <code>ESLint</code>，因为它更灵活，可配置性高，并且有社区活跃用户在维持。 </p>\n<p>使用 <code>ESLint</code> 需要安装 <a href=\"http://nodejs.org/\">Nodejs</a>，嗷，<code>Nodejs</code> 6.0 已经支持93%(记得是)的特性了，真棒！以后可以少用 <code>Babel</code> 了。<br>然后全局安装 <code>ESLint</code>, <code>npm i -g eslint</code>。那么已经可以在命令行里使用了。</p>\n<p>要在 <code>Sublime</code> 中配置的话，需要安装插件 <a href=\"https://packagecontrol.io/packages/SublimeLinter\">SublimeLinter</a> 和 <a href=\"https://github.com/roadhump/SublimeLinter-eslint\">SublimeLinter-contrib-eslint</a>,<br>然后在对应的项目下创建 <code>eslintrc</code> Configuring 文件，配置自己的 <code>rules</code>, 具体可以看官方文档<a href=\"http://eslint.org/docs/user-guide/configuring\">user-guide</a>，然后代码就会得到 <code>lint</code> 提示了。</p>\n<p>如果用的 <code>ES2015</code> 可以将 <code>syntax_map</code> 配置改为</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"javascript (babel)\": \"javascript\",</span><br></pre></td></tr></table></figure>\n<p>总之还是应该多看官方文档，根据自己的项目情况去配置环境。</p>\n<h3 id=\"Code-Style\"><a href=\"#Code-Style\" class=\"headerlink\" title=\"Code Style\"></a>Code Style</h3><p>目前 <code>JavaScript</code> 的代码规范也有很多份，比较流行的有 <a href=\"https://google.github.io/styleguide/javascriptguide.xml\">Google</a>, <a href=\"https://github.com/airbnb/javascript\">AirBnb</a>, <a href=\"https://github.com/feross/standard\">Standard</a>。推荐选择 <code>Standard</code>，不喜欢写分号，以下是它的规则</p>\n<h4 id=\"Rules\"><a href=\"#Rules\" class=\"headerlink\" title=\"Rules:\"></a><a href=\"https://github.com/feross/standard#rules\">Rules</a>:</h4><blockquote>\n<ul>\n<li><strong>2 spaces</strong> – for indentation</li>\n<li><strong>Single quotes for strings</strong> – except to avoid escaping</li>\n<li><strong>No unused variables</strong> – this one catches <em>tons</em> of bugs!</li>\n<li><strong>No semicolons</strong> – <a href=\"http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding\">It’s</a> <a href=\"http://inimino.org/~inimino/blog/javascript_semicolons\">fine.</a> <a href=\"https://www.youtube.com/watch?v=gsfbh17Ax9I\">Really!</a></li>\n<li><strong>Never start a line with <code>(</code> or <code>[</code></strong><ul>\n<li>This is the <strong>only</strong> gotcha with omitting semicolons – <em>automatically checked for you!</em></li>\n<li><a href=\"https://github.com/feross/standard/blob/master/RULES.md#semicolons\">More details</a></li>\n</ul>\n</li>\n<li><strong>Space after keywords</strong> <code>if (condition) { ... }</code></li>\n<li><strong>Space after function name</strong> <code>function name (arg) { ... }</code></li>\n<li>Always use <code>===</code> instead of <code>==</code> – but <code>obj == null</code> is allowed to check <code>null || undefined</code>.</li>\n<li>Always handle the node.js <code>err</code> function parameter</li>\n<li>Always prefix browser globals with <code>window</code> – except <code>document</code> and <code>navigator</code> are okay<ul>\n<li>Prevents accidental use of poorly-named browser globals like <code>open</code>, <code>length</code>,<br><code>event</code>, and <code>name</code>.</li>\n</ul>\n</li>\n<li><strong>And <a href=\"https://github.com/feross/standard/blob/master/RULES.md#javascript-standard-style\">more goodness</a></strong> – <em>give <code>standard</code> a try today!</em></li>\n</ul>\n</blockquote>\n<p>所以每次开始一个项目的时候，我总是 <code>eslint --init</code> 之后选择 <code>Standard</code>，然后加一些插件就 OK 了。</p>\n<p><img src=\"./sublime.png\" alt=\"sublime lint\"></p>\n<p>还可以在 <code>github</code> 项目中很方便的加上它的 Logo </p>\n<p><img src=\"https://img.shields.io/badge/code%20style-standard-brightgreen.svg\" alt=\"js-standard-style\"> </p>\n<h3 id=\"Over\"><a href=\"#Over\" class=\"headerlink\" title=\"Over\"></a>Over</h3><p>好了，基本上的配置也就这些了，虽然还不够强大，毕竟对于js这种弱类型的语言静态分析没那么容易，希望有更好的IDE出现，希望 <code>VSCode</code> 的性能问题能搞定。</p>\n<p>前端是个很杂的玩意，总是需要时间去积累，碰到了问题多看官方文档，多多使用谷歌，好在前端的社区足够活跃。</p>"},{"title":"这就尴尬了","date":"2016-06-11T00:34:44.000Z","_content":"\n{% asset_img cover.jpg %}\n\n<!-- more -->\n\n端午节和妈妈在家里看猩球崛起\n\n“这个猩猩是怎么拍出来的？”\n\n“现在都是电脑合成的了，下次带你去电影院看，效果更好，就像在眼前一样。”\n\n“好啊！”\n\n此时，我脑子里想，糟糕！又说了个不靠谱的许诺。\n\n“那你说黄带(小电影)是不是也是电脑合成的啊？”\n\n","source":"_posts/2016-06-gg.md","raw":"---\ntitle: 这就尴尬了\ndate: 2016-06-11 08:34:44\ntags: life\n---\n\n{% asset_img cover.jpg %}\n\n<!-- more -->\n\n端午节和妈妈在家里看猩球崛起\n\n“这个猩猩是怎么拍出来的？”\n\n“现在都是电脑合成的了，下次带你去电影院看，效果更好，就像在眼前一样。”\n\n“好啊！”\n\n此时，我脑子里想，糟糕！又说了个不靠谱的许诺。\n\n“那你说黄带(小电影)是不是也是电脑合成的啊？”\n\n","slug":"gg","published":1,"updated":"2016-06-11T01:21:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipcrluls0003hry1eoleqr38","content":"<img src=\"/pupa/2016/06/gg/cover.jpg\" alt=\"cover.jpg\" title=\"\">\n<a id=\"more\"></a>\n<p>端午节和妈妈在家里看猩球崛起</p>\n<p>“这个猩猩是怎么拍出来的？”</p>\n<p>“现在都是电脑合成的了，下次带你去电影院看，效果更好，就像在眼前一样。”</p>\n<p>“好啊！”</p>\n<p>此时，我脑子里想，糟糕！又说了个不靠谱的许诺。</p>\n<p>“那你说黄带(小电影)是不是也是电脑合成的啊？”</p>\n","excerpt":"<img src=\"/pupa/2016/06/gg/cover.jpg\" alt=\"cover.jpg\" title=\"\">","more":"<p>端午节和妈妈在家里看猩球崛起</p>\n<p>“这个猩猩是怎么拍出来的？”</p>\n<p>“现在都是电脑合成的了，下次带你去电影院看，效果更好，就像在眼前一样。”</p>\n<p>“好啊！”</p>\n<p>此时，我脑子里想，糟糕！又说了个不靠谱的许诺。</p>\n<p>“那你说黄带(小电影)是不是也是电脑合成的啊？”</p>"},{"title":"使用 Travis CI 自动更新 Hexo Blog","date":"2016-06-05T06:18:04.000Z","_content":"\n{% asset_img travis.svg %}\n\n\n[travis-ci](https://travis-ci.org/) 是一个免费的持续集成服务，\n所以就想着法子来利用它省去一些体力活的工作。简单来说其实就是做一些脚本执行任务。\n\n我们一般使用 `travis-ci` 来自动执行测试任务，现在我想让它来自动更新我的博客文章。\n当我 `push` 了文章到 `github` 之后想让它自动更新到 `gh-pages`(其实不限于文章)。\n\n<!-- more -->\n\n使用 Hexo 写博客文章的时候，有几种方法都能比较方便的更新到 `github`。\n\n### 方法一：\n\n使用 `Hexo` 官方提供的方式，在 `_config.yml` 文件下添加配置\n\n```yml\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: github_repository_url\n  branch: gh-pages\n  message: post updated\n  name: name\n  email: name@email.com\n```\n\n然后在 `package.json` 添加如下脚本\n\n```json\n\"scripts\": {\n    \"deploy\": \"hexo generate --deploy\",\n    \"build\": \"hexo generate\",\n    \"server\": \"hexo server\"\n},\n```\n\n然后当你在 `master` 分支更新了博客之后，只需要执行命令 `npm run deploy` 来生成静态页面，\n并且 `deploy` 到 `github` 的 `gh-pages`。\n当然，你首先得已经安装好了模块依赖(`npm install`)。\n\n这其实还算比较方便的，如果你只是想写写博客文章，每次也就跑一个脚本就够了，并没什么问题。\n\n但是有时候，当你的博客需要别人的贡献时，比如可以让别人投稿，那就会需要 `merge pull request`。\n\n然而`merge`之后，你必须 `pull` 本地仓库为最新的，然后再执行 `npm run deploy` 才会更新到博客。这就会比较麻烦了。\n\n当然一般来说个人博客，遇到这种事还是比较少的，毕竟一般都是自己写文章。\n但是如果你要维护的是一个比较热门的开源库文档呢，那你就得重新考虑自动化的必要性了。\n\n### 方法二\n\n使用 `travis-ci` 提供的持续集成服务。\n\n这里我默认你已经会使用基本的 `travis-ci` 配置了，请自行看文档[docs](https://docs.travis-ci.com/)。\n\n#### 首先需要 `Github` 提供的 `Personal Access Token`\n\n请到个人设置里创建一个[Personal access tokens](https://github.com/settings/tokens)。\n\n#### 安装 `travis` 命令行\n\n`gem install travis`\n\n#### 生成加密的 `Personal Access Token`\n\n`travis encrypt -r owner/repo GH_Token=Your_Personal_Access_Token`\n\n`owner/repo`: 你的 `Github` 仓库名字(<用户名>/<仓库名>)，比如我的博客仓库 `xwartz/pupa`。\n\n`GH_Token`: 你上一步新建的 `Personal Access Token`。\n\n以上命令支持之后，将会创建一个加密后的 `token`，讲被写入 `.travis.yml`\n\n```\nsecure: \"xxxxx=\"\n```\n\n#### 更新 `.travis.yml`\n\n```yml\nenv:\n  global:\n    - GH_REF: github.com/xwartz/pupa.git\n    - secure: \"xxxxx=\"\n\n```\n\n`secure` 将被 `travis ci` 解密之后使用\n\n![token](./token.png)\n\n完整的 `.travis.yml` 配置如下：\n\n```yml\nsudo: false\nlanguage: node_js\nnode_js:\n  - \"node\"\n\ncache:\n  directories:\n    - node_modules\n\ninstall:\n  - npm install\n\nbefore_script:\n  - git config --global user.name \"xwartz\"\n  - git config --global user.email \"stddup@gmail.com\"\n  # 确保主题是最新的\n  - rm -rf themes/pupa\n  # clone 博客主题\n  - git clone https://${GH_Token}@${GH_THEME} themes/pupa\n\nscript:\n  # 生成静态文件\n  - npm run build\n\nafter_script:\n  # 将生成的静态文件，初始化为 git 仓库\n  - cd public\n  - git init\n  - git config user.name \"xwartz\"\n  - git config user.email \"stddup@gmail.com\"\n  - git add --all\n  - git commit -m \"pupa forward\"\n  # 推送到 gh-pages 分支\n  - git push --force --quiet \"https://${GH_Token}@${GH_REF}\" master:gh-pages\n\nos:\n  - osx\n\nenv:\n  global:\n    # 博客主题仓库\n    - GH_THEME: github.com/xwartz/hexo-pupa-theme.git\n    # 博客仓库\n    - GH_REF: github.com/xwartz/pupa.git\n    # 加密的 token\n    - secure: \"xxxxx=\"\n\n```\n\n详情可查看我的仓库 [pupa](https://github.com/xwartz/pupa.git)\n\n\n参考： \n[用 Travis CI 自動部署網站到 GitHub](https://zespia.tw/blog/2015/01/21/continuous-deployment-to-github-with-travis/)\n\n[使用 Travis CI 自动更新 GitHub Pages](http://notes.iissnan.com/2016/publishing-github-pages-with-travis-ci/)\n\n[travis-ci docs](https://docs.travis-ci.com/)\n","source":"_posts/2016-06-auto-update-with-travis-ci.md","raw":"---\ntitle: 使用 Travis CI 自动更新 Hexo Blog\ndate: 2016-06-05 14:18:04\ntags: \n - travis\n - git\n---\n\n{% asset_img travis.svg %}\n\n\n[travis-ci](https://travis-ci.org/) 是一个免费的持续集成服务，\n所以就想着法子来利用它省去一些体力活的工作。简单来说其实就是做一些脚本执行任务。\n\n我们一般使用 `travis-ci` 来自动执行测试任务，现在我想让它来自动更新我的博客文章。\n当我 `push` 了文章到 `github` 之后想让它自动更新到 `gh-pages`(其实不限于文章)。\n\n<!-- more -->\n\n使用 Hexo 写博客文章的时候，有几种方法都能比较方便的更新到 `github`。\n\n### 方法一：\n\n使用 `Hexo` 官方提供的方式，在 `_config.yml` 文件下添加配置\n\n```yml\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: github_repository_url\n  branch: gh-pages\n  message: post updated\n  name: name\n  email: name@email.com\n```\n\n然后在 `package.json` 添加如下脚本\n\n```json\n\"scripts\": {\n    \"deploy\": \"hexo generate --deploy\",\n    \"build\": \"hexo generate\",\n    \"server\": \"hexo server\"\n},\n```\n\n然后当你在 `master` 分支更新了博客之后，只需要执行命令 `npm run deploy` 来生成静态页面，\n并且 `deploy` 到 `github` 的 `gh-pages`。\n当然，你首先得已经安装好了模块依赖(`npm install`)。\n\n这其实还算比较方便的，如果你只是想写写博客文章，每次也就跑一个脚本就够了，并没什么问题。\n\n但是有时候，当你的博客需要别人的贡献时，比如可以让别人投稿，那就会需要 `merge pull request`。\n\n然而`merge`之后，你必须 `pull` 本地仓库为最新的，然后再执行 `npm run deploy` 才会更新到博客。这就会比较麻烦了。\n\n当然一般来说个人博客，遇到这种事还是比较少的，毕竟一般都是自己写文章。\n但是如果你要维护的是一个比较热门的开源库文档呢，那你就得重新考虑自动化的必要性了。\n\n### 方法二\n\n使用 `travis-ci` 提供的持续集成服务。\n\n这里我默认你已经会使用基本的 `travis-ci` 配置了，请自行看文档[docs](https://docs.travis-ci.com/)。\n\n#### 首先需要 `Github` 提供的 `Personal Access Token`\n\n请到个人设置里创建一个[Personal access tokens](https://github.com/settings/tokens)。\n\n#### 安装 `travis` 命令行\n\n`gem install travis`\n\n#### 生成加密的 `Personal Access Token`\n\n`travis encrypt -r owner/repo GH_Token=Your_Personal_Access_Token`\n\n`owner/repo`: 你的 `Github` 仓库名字(<用户名>/<仓库名>)，比如我的博客仓库 `xwartz/pupa`。\n\n`GH_Token`: 你上一步新建的 `Personal Access Token`。\n\n以上命令支持之后，将会创建一个加密后的 `token`，讲被写入 `.travis.yml`\n\n```\nsecure: \"xxxxx=\"\n```\n\n#### 更新 `.travis.yml`\n\n```yml\nenv:\n  global:\n    - GH_REF: github.com/xwartz/pupa.git\n    - secure: \"xxxxx=\"\n\n```\n\n`secure` 将被 `travis ci` 解密之后使用\n\n![token](./token.png)\n\n完整的 `.travis.yml` 配置如下：\n\n```yml\nsudo: false\nlanguage: node_js\nnode_js:\n  - \"node\"\n\ncache:\n  directories:\n    - node_modules\n\ninstall:\n  - npm install\n\nbefore_script:\n  - git config --global user.name \"xwartz\"\n  - git config --global user.email \"stddup@gmail.com\"\n  # 确保主题是最新的\n  - rm -rf themes/pupa\n  # clone 博客主题\n  - git clone https://${GH_Token}@${GH_THEME} themes/pupa\n\nscript:\n  # 生成静态文件\n  - npm run build\n\nafter_script:\n  # 将生成的静态文件，初始化为 git 仓库\n  - cd public\n  - git init\n  - git config user.name \"xwartz\"\n  - git config user.email \"stddup@gmail.com\"\n  - git add --all\n  - git commit -m \"pupa forward\"\n  # 推送到 gh-pages 分支\n  - git push --force --quiet \"https://${GH_Token}@${GH_REF}\" master:gh-pages\n\nos:\n  - osx\n\nenv:\n  global:\n    # 博客主题仓库\n    - GH_THEME: github.com/xwartz/hexo-pupa-theme.git\n    # 博客仓库\n    - GH_REF: github.com/xwartz/pupa.git\n    # 加密的 token\n    - secure: \"xxxxx=\"\n\n```\n\n详情可查看我的仓库 [pupa](https://github.com/xwartz/pupa.git)\n\n\n参考： \n[用 Travis CI 自動部署網站到 GitHub](https://zespia.tw/blog/2015/01/21/continuous-deployment-to-github-with-travis/)\n\n[使用 Travis CI 自动更新 GitHub Pages](http://notes.iissnan.com/2016/publishing-github-pages-with-travis-ci/)\n\n[travis-ci docs](https://docs.travis-ci.com/)\n","slug":"auto-update-with-travis-ci","published":1,"updated":"2016-06-05T10:10:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipcrlulz0004hry1j98ce7h4","content":"<img src=\"/pupa/2016/06/auto-update-with-travis-ci/travis.svg\" alt=\"travis.svg\" title=\"\">\n<p><a href=\"https://travis-ci.org/\" target=\"_blank\" rel=\"external\">travis-ci</a> 是一个免费的持续集成服务，<br>所以就想着法子来利用它省去一些体力活的工作。简单来说其实就是做一些脚本执行任务。</p>\n<p>我们一般使用 <code>travis-ci</code> 来自动执行测试任务，现在我想让它来自动更新我的博客文章。<br>当我 <code>push</code> 了文章到 <code>github</code> 之后想让它自动更新到 <code>gh-pages</code>(其实不限于文章)。</p>\n<a id=\"more\"></a>\n<p>使用 Hexo 写博客文章的时候，有几种方法都能比较方便的更新到 <code>github</code>。</p>\n<h3 id=\"方法一：\"><a href=\"#方法一：\" class=\"headerlink\" title=\"方法一：\"></a>方法一：</h3><p>使用 <code>Hexo</code> 官方提供的方式，在 <code>_config.yml</code> 文件下添加配置</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\"><span class=\"attr\">  type:</span> git</span><br><span class=\"line\"><span class=\"attr\">  repository:</span> github_repository_url</span><br><span class=\"line\"><span class=\"attr\">  branch:</span> gh-pages</span><br><span class=\"line\"><span class=\"attr\">  message:</span> post updated</span><br><span class=\"line\"><span class=\"attr\">  name:</span> name</span><br><span class=\"line\"><span class=\"attr\">  email:</span> name@email.com</span><br></pre></td></tr></table></figure>\n<p>然后在 <code>package.json</code> 添加如下脚本</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">    \"deploy\": \"hexo generate --deploy\",</span><br><span class=\"line\">    \"build\": \"hexo generate\",</span><br><span class=\"line\">    \"server\": \"hexo server\"</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>然后当你在 <code>master</code> 分支更新了博客之后，只需要执行命令 <code>npm run deploy</code> 来生成静态页面，<br>并且 <code>deploy</code> 到 <code>github</code> 的 <code>gh-pages</code>。<br>当然，你首先得已经安装好了模块依赖(<code>npm install</code>)。</p>\n<p>这其实还算比较方便的，如果你只是想写写博客文章，每次也就跑一个脚本就够了，并没什么问题。</p>\n<p>但是有时候，当你的博客需要别人的贡献时，比如可以让别人投稿，那就会需要 <code>merge pull request</code>。</p>\n<p>然而<code>merge</code>之后，你必须 <code>pull</code> 本地仓库为最新的，然后再执行 <code>npm run deploy</code> 才会更新到博客。这就会比较麻烦了。</p>\n<p>当然一般来说个人博客，遇到这种事还是比较少的，毕竟一般都是自己写文章。<br>但是如果你要维护的是一个比较热门的开源库文档呢，那你就得重新考虑自动化的必要性了。</p>\n<h3 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h3><p>使用 <code>travis-ci</code> 提供的持续集成服务。</p>\n<p>这里我默认你已经会使用基本的 <code>travis-ci</code> 配置了，请自行看文档<a href=\"https://docs.travis-ci.com/\" target=\"_blank\" rel=\"external\">docs</a>。</p>\n<h4 id=\"首先需要-Github-提供的-Personal-Access-Token\"><a href=\"#首先需要-Github-提供的-Personal-Access-Token\" class=\"headerlink\" title=\"首先需要 Github 提供的 Personal Access Token\"></a>首先需要 <code>Github</code> 提供的 <code>Personal Access Token</code></h4><p>请到个人设置里创建一个<a href=\"https://github.com/settings/tokens\" target=\"_blank\" rel=\"external\">Personal access tokens</a>。</p>\n<h4 id=\"安装-travis-命令行\"><a href=\"#安装-travis-命令行\" class=\"headerlink\" title=\"安装 travis 命令行\"></a>安装 <code>travis</code> 命令行</h4><p><code>gem install travis</code></p>\n<h4 id=\"生成加密的-Personal-Access-Token\"><a href=\"#生成加密的-Personal-Access-Token\" class=\"headerlink\" title=\"生成加密的 Personal Access Token\"></a>生成加密的 <code>Personal Access Token</code></h4><p><code>travis encrypt -r owner/repo GH_Token=Your_Personal_Access_Token</code></p>\n<p><code>owner/repo</code>: 你的 <code>Github</code> 仓库名字(&lt;用户名&gt;/&lt;仓库名&gt;)，比如我的博客仓库 <code>xwartz/pupa</code>。</p>\n<p><code>GH_Token</code>: 你上一步新建的 <code>Personal Access Token</code>。</p>\n<p>以上命令支持之后，将会创建一个加密后的 <code>token</code>，讲被写入 <code>.travis.yml</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">secure: &quot;xxxxx=&quot;</span><br></pre></td></tr></table></figure>\n<h4 id=\"更新-travis-yml\"><a href=\"#更新-travis-yml\" class=\"headerlink\" title=\"更新 .travis.yml\"></a>更新 <code>.travis.yml</code></h4><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">env:</span></span><br><span class=\"line\"><span class=\"attr\">  global:</span></span><br><span class=\"line\"><span class=\"attr\">    - GH_REF:</span> github.com/xwartz/pupa.git</span><br><span class=\"line\"><span class=\"attr\">    - secure:</span> <span class=\"string\">\"xxxxx=\"</span></span><br></pre></td></tr></table></figure>\n<p><code>secure</code> 将被 <code>travis ci</code> 解密之后使用</p>\n<p><img src=\"./token.png\" alt=\"token\"></p>\n<p>完整的 <code>.travis.yml</code> 配置如下：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sudo:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">language:</span> node_js</span><br><span class=\"line\"><span class=\"attr\">node_js:</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">\"node\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">cache:</span></span><br><span class=\"line\"><span class=\"attr\">  directories:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> node_modules</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">install:</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> npm install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">before_script:</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> git config --global user.name <span class=\"string\">\"xwartz\"</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> git config --global user.email <span class=\"string\">\"stddup@gmail.com\"</span></span><br><span class=\"line\">  <span class=\"comment\"># 确保主题是最新的</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> rm -rf themes/pupa</span><br><span class=\"line\">  <span class=\"comment\"># clone 博客主题</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> git clone https://$&#123;GH_Token&#125;@$&#123;GH_THEME&#125; themes/pupa</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">script:</span></span><br><span class=\"line\">  <span class=\"comment\"># 生成静态文件</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> npm run build</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">after_script:</span></span><br><span class=\"line\">  <span class=\"comment\"># 将生成的静态文件，初始化为 git 仓库</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> cd public</span><br><span class=\"line\"><span class=\"bullet\">  -</span> git init</span><br><span class=\"line\"><span class=\"bullet\">  -</span> git config user.name <span class=\"string\">\"xwartz\"</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> git config user.email <span class=\"string\">\"stddup@gmail.com\"</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> git add --all</span><br><span class=\"line\"><span class=\"bullet\">  -</span> git commit -m <span class=\"string\">\"pupa forward\"</span></span><br><span class=\"line\">  <span class=\"comment\"># 推送到 gh-pages 分支</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> git push --force --quiet <span class=\"string\">\"https://$&#123;GH_Token&#125;@$&#123;GH_REF&#125;\"</span> master:gh-pages</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">os:</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> osx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">env:</span></span><br><span class=\"line\"><span class=\"attr\">  global:</span></span><br><span class=\"line\">    <span class=\"comment\"># 博客主题仓库</span></span><br><span class=\"line\"><span class=\"attr\">    - GH_THEME:</span> github.com/xwartz/hexo-pupa-theme.git</span><br><span class=\"line\">    <span class=\"comment\"># 博客仓库</span></span><br><span class=\"line\"><span class=\"attr\">    - GH_REF:</span> github.com/xwartz/pupa.git</span><br><span class=\"line\">    <span class=\"comment\"># 加密的 token</span></span><br><span class=\"line\"><span class=\"attr\">    - secure:</span> <span class=\"string\">\"xxxxx=\"</span></span><br></pre></td></tr></table></figure>\n<p>详情可查看我的仓库 <a href=\"https://github.com/xwartz/pupa.git\" target=\"_blank\" rel=\"external\">pupa</a></p>\n<p>参考：<br><a href=\"https://zespia.tw/blog/2015/01/21/continuous-deployment-to-github-with-travis/\" target=\"_blank\" rel=\"external\">用 Travis CI 自動部署網站到 GitHub</a></p>\n<p><a href=\"http://notes.iissnan.com/2016/publishing-github-pages-with-travis-ci/\" target=\"_blank\" rel=\"external\">使用 Travis CI 自动更新 GitHub Pages</a></p>\n<p><a href=\"https://docs.travis-ci.com/\" target=\"_blank\" rel=\"external\">travis-ci docs</a></p>\n","excerpt":"<img src=\"/pupa/2016/06/auto-update-with-travis-ci/travis.svg\" alt=\"travis.svg\" title=\"\">\n<p><a href=\"https://travis-ci.org/\">travis-ci</a> 是一个免费的持续集成服务，<br>所以就想着法子来利用它省去一些体力活的工作。简单来说其实就是做一些脚本执行任务。</p>\n<p>我们一般使用 <code>travis-ci</code> 来自动执行测试任务，现在我想让它来自动更新我的博客文章。<br>当我 <code>push</code> 了文章到 <code>github</code> 之后想让它自动更新到 <code>gh-pages</code>(其实不限于文章)。</p>","more":"<p>使用 Hexo 写博客文章的时候，有几种方法都能比较方便的更新到 <code>github</code>。</p>\n<h3 id=\"方法一：\"><a href=\"#方法一：\" class=\"headerlink\" title=\"方法一：\"></a>方法一：</h3><p>使用 <code>Hexo</code> 官方提供的方式，在 <code>_config.yml</code> 文件下添加配置</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\"><span class=\"attr\">  type:</span> git</span><br><span class=\"line\"><span class=\"attr\">  repository:</span> github_repository_url</span><br><span class=\"line\"><span class=\"attr\">  branch:</span> gh-pages</span><br><span class=\"line\"><span class=\"attr\">  message:</span> post updated</span><br><span class=\"line\"><span class=\"attr\">  name:</span> name</span><br><span class=\"line\"><span class=\"attr\">  email:</span> name@email.com</span><br></pre></td></tr></table></figure>\n<p>然后在 <code>package.json</code> 添加如下脚本</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">    \"deploy\": \"hexo generate --deploy\",</span><br><span class=\"line\">    \"build\": \"hexo generate\",</span><br><span class=\"line\">    \"server\": \"hexo server\"</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>然后当你在 <code>master</code> 分支更新了博客之后，只需要执行命令 <code>npm run deploy</code> 来生成静态页面，<br>并且 <code>deploy</code> 到 <code>github</code> 的 <code>gh-pages</code>。<br>当然，你首先得已经安装好了模块依赖(<code>npm install</code>)。</p>\n<p>这其实还算比较方便的，如果你只是想写写博客文章，每次也就跑一个脚本就够了，并没什么问题。</p>\n<p>但是有时候，当你的博客需要别人的贡献时，比如可以让别人投稿，那就会需要 <code>merge pull request</code>。</p>\n<p>然而<code>merge</code>之后，你必须 <code>pull</code> 本地仓库为最新的，然后再执行 <code>npm run deploy</code> 才会更新到博客。这就会比较麻烦了。</p>\n<p>当然一般来说个人博客，遇到这种事还是比较少的，毕竟一般都是自己写文章。<br>但是如果你要维护的是一个比较热门的开源库文档呢，那你就得重新考虑自动化的必要性了。</p>\n<h3 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h3><p>使用 <code>travis-ci</code> 提供的持续集成服务。</p>\n<p>这里我默认你已经会使用基本的 <code>travis-ci</code> 配置了，请自行看文档<a href=\"https://docs.travis-ci.com/\">docs</a>。</p>\n<h4 id=\"首先需要-Github-提供的-Personal-Access-Token\"><a href=\"#首先需要-Github-提供的-Personal-Access-Token\" class=\"headerlink\" title=\"首先需要 Github 提供的 Personal Access Token\"></a>首先需要 <code>Github</code> 提供的 <code>Personal Access Token</code></h4><p>请到个人设置里创建一个<a href=\"https://github.com/settings/tokens\">Personal access tokens</a>。</p>\n<h4 id=\"安装-travis-命令行\"><a href=\"#安装-travis-命令行\" class=\"headerlink\" title=\"安装 travis 命令行\"></a>安装 <code>travis</code> 命令行</h4><p><code>gem install travis</code></p>\n<h4 id=\"生成加密的-Personal-Access-Token\"><a href=\"#生成加密的-Personal-Access-Token\" class=\"headerlink\" title=\"生成加密的 Personal Access Token\"></a>生成加密的 <code>Personal Access Token</code></h4><p><code>travis encrypt -r owner/repo GH_Token=Your_Personal_Access_Token</code></p>\n<p><code>owner/repo</code>: 你的 <code>Github</code> 仓库名字(&lt;用户名&gt;/&lt;仓库名&gt;)，比如我的博客仓库 <code>xwartz/pupa</code>。</p>\n<p><code>GH_Token</code>: 你上一步新建的 <code>Personal Access Token</code>。</p>\n<p>以上命令支持之后，将会创建一个加密后的 <code>token</code>，讲被写入 <code>.travis.yml</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">secure: &quot;xxxxx=&quot;</span><br></pre></td></tr></table></figure>\n<h4 id=\"更新-travis-yml\"><a href=\"#更新-travis-yml\" class=\"headerlink\" title=\"更新 .travis.yml\"></a>更新 <code>.travis.yml</code></h4><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">env:</span></span><br><span class=\"line\"><span class=\"attr\">  global:</span></span><br><span class=\"line\"><span class=\"attr\">    - GH_REF:</span> github.com/xwartz/pupa.git</span><br><span class=\"line\"><span class=\"attr\">    - secure:</span> <span class=\"string\">\"xxxxx=\"</span></span><br></pre></td></tr></table></figure>\n<p><code>secure</code> 将被 <code>travis ci</code> 解密之后使用</p>\n<p><img src=\"./token.png\" alt=\"token\"></p>\n<p>完整的 <code>.travis.yml</code> 配置如下：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sudo:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">language:</span> node_js</span><br><span class=\"line\"><span class=\"attr\">node_js:</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">\"node\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">cache:</span></span><br><span class=\"line\"><span class=\"attr\">  directories:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> node_modules</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">install:</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> npm install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">before_script:</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> git config --global user.name <span class=\"string\">\"xwartz\"</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> git config --global user.email <span class=\"string\">\"stddup@gmail.com\"</span></span><br><span class=\"line\">  <span class=\"comment\"># 确保主题是最新的</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> rm -rf themes/pupa</span><br><span class=\"line\">  <span class=\"comment\"># clone 博客主题</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> git clone https://$&#123;GH_Token&#125;@$&#123;GH_THEME&#125; themes/pupa</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">script:</span></span><br><span class=\"line\">  <span class=\"comment\"># 生成静态文件</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> npm run build</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">after_script:</span></span><br><span class=\"line\">  <span class=\"comment\"># 将生成的静态文件，初始化为 git 仓库</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> cd public</span><br><span class=\"line\"><span class=\"bullet\">  -</span> git init</span><br><span class=\"line\"><span class=\"bullet\">  -</span> git config user.name <span class=\"string\">\"xwartz\"</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> git config user.email <span class=\"string\">\"stddup@gmail.com\"</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> git add --all</span><br><span class=\"line\"><span class=\"bullet\">  -</span> git commit -m <span class=\"string\">\"pupa forward\"</span></span><br><span class=\"line\">  <span class=\"comment\"># 推送到 gh-pages 分支</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> git push --force --quiet <span class=\"string\">\"https://$&#123;GH_Token&#125;@$&#123;GH_REF&#125;\"</span> master:gh-pages</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">os:</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> osx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">env:</span></span><br><span class=\"line\"><span class=\"attr\">  global:</span></span><br><span class=\"line\">    <span class=\"comment\"># 博客主题仓库</span></span><br><span class=\"line\"><span class=\"attr\">    - GH_THEME:</span> github.com/xwartz/hexo-pupa-theme.git</span><br><span class=\"line\">    <span class=\"comment\"># 博客仓库</span></span><br><span class=\"line\"><span class=\"attr\">    - GH_REF:</span> github.com/xwartz/pupa.git</span><br><span class=\"line\">    <span class=\"comment\"># 加密的 token</span></span><br><span class=\"line\"><span class=\"attr\">    - secure:</span> <span class=\"string\">\"xxxxx=\"</span></span><br></pre></td></tr></table></figure>\n<p>详情可查看我的仓库 <a href=\"https://github.com/xwartz/pupa.git\">pupa</a></p>\n<p>参考：<br><a href=\"https://zespia.tw/blog/2015/01/21/continuous-deployment-to-github-with-travis/\">用 Travis CI 自動部署網站到 GitHub</a></p>\n<p><a href=\"http://notes.iissnan.com/2016/publishing-github-pages-with-travis-ci/\">使用 Travis CI 自动更新 GitHub Pages</a></p>\n<p><a href=\"https://docs.travis-ci.com/\">travis-ci docs</a></p>"},{"title":"package.json 文档翻译","date":"2016-05-13T05:32:58.000Z","_content":"\n`npm` 文档翻译之 `package.json`, 原文链接 <https://docs.npmjs.com/files/package.json>\n\npackage.json(5)\n===========================================================\n\n### 说明\n\n本文档包含所有的 `package.json` 文件配置说明。`package.json` 文件必须是真正的 `json` 对象，而不是 js 对象。\n\n本文档中描述的很多行为受到 `npm-config(7)` 配置文件的影响。\n\n<!-- more -->\n\n### name\n\n在 `package.json` 文件中最重要的配置就是 `name` 和 `version` 字段了。\n如果没有这两个字段，讲无法被安装。\n`name` 和 `version` 组成唯一的标识，所以每次更新都应更新 `version` 字段。\n\n`name` 就是你这个包(项目)的名字。\n\n遵循以下规则：\n\n* 名字长度必须小于等于214个字符，包括括号。\n* 名字不能以 `.` 和 `_` 开始。\n* 新的包名不应该含有大写字母。\n* 名字将会成为一段 `URL`， 命令行的参数 或者 一个文件名字，所以名字不应该包含任何 `non-URL-safe`的字符。\n\n一些注意点:\n\n* 不要使用 `Node` 的模块名\n* 不要在名字中使用 `js` 和 `node` 字段, 包含 `package.json` 文件的包，自动被认为是 `js` 文件。你可以在 `engines` 字段里，指定引擎(比如：`Node`), 参加下文说明。\n* 名字将会被用于 `require()` 参数, 因此名字应该短小易懂。\n* 在使用名字之前，应该先去 <https://www.npmjs.com/> 检查下是否已经被注册了\n\n可以在名字前加上 `scope` 前缀, 如：`@myorg/mypackage`. 具体查 `npm-scope(7)` 。\n\n### version\n\n版本号必须能被 [node-semver](https://github.com/isaacs/node-semver) 解析， 它是 `npm` 的一个依赖包。(`npm install semver` to use it yourself.)\n\n更多关于版本号的说明查看 semver(7).\n\n### description\n\n写一段关于这个包的描述，有助于帮助人们在搜索 `npm search` 结果中发现它。\n\n### keywords\n\n关键字是一组字符串数组，有助于帮助人们在搜索 `npm search` 结果中发现它。\n\n### homepage\n\n项目的首页地址\n\n### bugs\n\n项目 bug 的反馈地址，或者邮件地址。\n它应该是这个样子的：\n\n```\n{ \"url\" : \"https://github.com/owner/project/issues\"\n  , \"email\" : \"project@hostname.com\"\n}\n```\n\n可以提供地址或者邮件，或者只简单的提供字符串，而不需要如上的对象。\n\n如果提供了url，使用 `npm bugs` 命令可以打开。\n\n\n### license\n\n你应该为你的项目指定 `license`，这样子，别人就知道使用这个项目的权限了。\n\n如果使用的是一些通用的 `license` ，如：`BSD-2-Clause`,`MIT`。\n只需要如下添加：\n\n    `{ \"license\" : \"BSD-3-Clause\" }`\n\n查看所有的 `SPDX license` [the full list of SPDX license IDs](https://spdx.org/licenses/).\n\n推荐从这里获取一个(开源项目)\n[OSI](https://opensource.org/licenses/alphabetical).\n\n如果你的项目使用多种 `license` ，使用 [SPDX license\nexpression syntax version 2.0 string](https://npmjs.com/package/spdx), 如下方式：\n\n    `{ \"license\" : \"(ISC OR GPL-3.0)\" }`\n\n如果你使用的 `license` 并不在 `SPDX` 中，或者你自定义了，可以如下使用：\n\n    `{ \"license\" : \"SEE LICENSE IN <filename>\" }`\n\n`<filename>` 文件应在项目的根目录。\n\n\n一些老的项目，使用如下的格式：\n\n    // Not valid metadata\n    { \"license\" :\n      { \"type\" : \"ISC\"\n      , \"url\" : \"http://opensource.org/licenses/ISC\"\n      }\n    }\n\n    // Not valid metadata\n    { \"licenses\" :\n      [\n        { \"type\": \"MIT\"\n        , \"url\": \"http://www.opensource.org/licenses/mit-license.php\"\n        }\n      , { \"type\": \"Apache-2.0\"\n        , \"url\": \"http://opensource.org/licenses/apache2.0.php\"\n        }\n      ]\n    }\n\n以上这些格式是被弃用的，应该使用 `SPDX` 格式， 如下：\n\n    { \"license\": \"ISC\" }\n\n    { \"license\": \"(MIT OR Apache-2.0)\" }\n\n最终，如果你不希望授予别人使用的权力，使用如下：\n\n    { \"license\": \"UNLICENSED\"}\n\n应该考虑设置字段 `\"private\": true` 来阻止被意外 `publish`.\n\n### people fields: author, contributors\n\n\"author\" 是一个 `person` 对象，\n\"contributors\" 是一个 `person` 对象数组。\n\"person\" 是一个包含 \"name\", \"url\", \"email\" 的对象：\n\n    { \"name\" : \"Barney Rubble\"\n    , \"email\" : \"b@rubble.com\"\n    , \"url\" : \"http://barnyrubble.tumblr.com/\"\n    }\n\n或者你可以使用如下简单字符串：\n\n    \"Barney Rubble <b@rubble.com> (http://barnyrubble.tumblr.com/)\"\n\n\"email\" 和 \"url\" 是可选的。\n\n\n`npm` 同样有 \"maintainers\" 字段来设置你的用户信息。\n\n\n### files\n\n\"files\" 字段是一个包含你项目文件的数组。\n如果使用了文件夹，那么该文件夹下的文件将被包含(除非被其他规则忽略)。\n\n你也可以在根目录创建 `.npmignore` 文件，来忽略某些文件。就像 `.gitignore`.\n\n以下文件总是被包含在内：\n\n* `package.json`\n* `README`\n* `CHANGES` / `CHANGELOG` / `HISTORY`\n* `LICENSE` / `LICENCE`\n* \"main\" 字段指定的文件\n\n`README`, `CHANGES` & `LICENSE` 可以是任何文件.\n\n相反, 下文件应该被忽略:\n\n* `.git`\n* `CVS`\n* `.svn`\n* `.hg`\n* `.lock-wscript`\n* `.wafpickle-N`\n* `.*.swp`\n* `.DS_Store`\n* `._*`\n* `npm-debug.log`\n* `.npmrc`\n* `node_modules`\n\n### main\n\n`main` 字段指定你程序的入口模块。\n也就是说，如果你的包名是 `foo`, 一个用户安装了它, 并且\n`require(\"foo\")`, 然后你的 `main` 指定的文件，应该 `exports` 相应的模块。\n\n这应该是一个相对于项目根目录的文件地址。\n\n### bin\n\n很多包都有一个或多个可执行文件被安装到 `PATH`。`npm` 可以很容易的实现这点(实际上，npm 就是使用的这个功能)。\n\n使用该功能，需要在 `package.json` 中配置 `bin` 字段。安装时，`npm` 会自动建立起链接，全局安装被链接到 `prefix/bin` 目录, 局部安装的会被链接到 `./node_modules/.bin/` 目录。\n\n举个例子:\n\n    { \"bin\" : { \"myapp\" : \"./cli.js\" } }\n\n当你安装时，将会创建一个链接，将 `cli.js` 链接到 `/usr/local/bin/myapp`。\n\n如果你只有一个可执行命令，那么它的名字应该是包名，这样子你只需要使用字符串来调用。\n如：\n\n    { \"name\": \"my-program\"\n    , \"version\": \"1.2.5\"\n    , \"bin\": \"./path/to/program\" }\n\n等同于:\n\n    { \"name\": \"my-program\"\n    , \"version\": \"1.2.5\"\n    , \"bin\" : { \"my-program\" : \"./path/to/program\" } }\n\n### man\n\n指定一个文件或者文件数组供 `man` 程序使用。\n\n如果只提供了一个单一文件，那么安装之后，只需要 `man <pkgname>`.  \n\n例如:\n\n    { \"name\" : \"foo\"\n    , \"version\" : \"1.2.3\"\n    , \"description\" : \"A packaged foo fooer for fooing foos\"\n    , \"main\" : \"foo.js\"\n    , \"man\" : \"./man/doc.1\"\n    }\n\n以上 `man foo` 将会链接到 `./man/doc.1`。\n\n如果文件名不是以包名开头，将会被自动加上前缀。\n像这样:\n\n    { \"name\" : \"foo\"\n    , \"version\" : \"1.2.3\"\n    , \"description\" : \"A packaged foo fooer for fooing foos\"\n    , \"main\" : \"foo.js\"\n    , \"man\" : [ \"./man/foo.1\", \"./man/bar.1\" ]\n    }\n\n将会为 `man foo` 和 `man foo-bar` 创建文件。\n\n`Man` 文件必须以数字结束，如果是压缩文件可以是 `.gz` 为后缀。\n\n数字决定 `man` 哪个文件\n\n    { \"name\" : \"foo\"\n    , \"version\" : \"1.2.3\"\n    , \"description\" : \"A packaged foo fooer for fooing foos\"\n    , \"main\" : \"foo.js\"\n    , \"man\" : [ \"./man/foo.1\", \"./man/foo.2\" ]\n    }\n\n以上将会创建 `man foo` 和 `man 2 foo`\n\n### directories\n\nCommonJS [Packages](http://wiki.commonjs.org/wiki/Packages/1.0)\n说明了几种方式使用 `directories` 对象指明你的项目结构。\n\n你可以在 [npm's package.json](https://registry.npmjs.org/npm/latest),\n看到 `directories` 字段指定了 doc, lib, man.\n\n在未来，这些信息将会有其他创造性的方式。\n\n#### directories.lib\n\nTell people where the bulk of your library is.  Nothing special is done\nwith the lib folder in any way, but it's useful meta info.\n\n#### directories.bin\n\nIf you specify a `bin` directory in `directories.bin`, all the files in\nthat folder will be added.\n\nBecause of the way the `bin` directive works, specifying both a\n`bin` path and setting `directories.bin` is an error. If you want to\nspecify individual files, use `bin`, and for all the files in an\nexisting `bin` directory, use `directories.bin`.\n\n#### directories.man\n\nA folder that is full of man pages.  Sugar to generate a \"man\" array by\nwalking the folder.\n\n#### directories.doc\n\nPut markdown files in here.  Eventually, these will be displayed nicely,\nmaybe, someday.\n\n#### directories.example\n\nPut example scripts in here.  Someday, it might be exposed in some clever way.\n\n#### directories.test\n\nPut your tests in here. It is currently not exposed, but it might be in the\nfuture.\n\n## repository\n\n指定你源代码的地址，这有助于别人提供贡献。如果提供的仓库地址是在 `GitHub` 上，`npm docs` 命令将会打开你的项目地址。\n\n像这样:\n\n    \"repository\" :\n      { \"type\" : \"git\"\n      , \"url\" : \"https://github.com/npm/npm.git\"\n      }\n\n    \"repository\" :\n      { \"type\" : \"svn\"\n      , \"url\" : \"https://v8.googlecode.com/svn/trunk/\"\n      }\n\n地址应该是公开的，能直接被 `VCS program` 读取。\n\nFor GitHub, GitHub gist, Bitbucket, or GitLab repositories you can use the same\nshortcut syntax you use for `npm install`:\n\n    \"repository\": \"npm/npm\"\n\n    \"repository\": \"gist:11081aaa281\"\n\n    \"repository\": \"bitbucket:example/repo\"\n\n    \"repository\": \"gitlab:another/repo\"\n\n## scripts\n\n\"scripts\" 字段包含项目的生命周期命令，是个 hash 对象。\n`key` 是生命周期事件，`value` 是执行的命令。\n\n详情查看 `npm-scripts(7)`.\n\n## config\n\nA \"config\" object can be used to set configuration parameters used in package\nscripts that persist across upgrades.  For instance, if a package had the\nfollowing:\n\n    { \"name\" : \"foo\"\n    , \"config\" : { \"port\" : \"8080\" } }\n\nand then had a \"start\" command that then referenced the\n`npm_package_config_port` environment variable, then the user could\noverride that by doing `npm config set foo:port 8001`.\n\nSee `npm-config(7)` and `npm-scripts(7)` for more on package\nconfigs.\n\n## dependencies\n\n\"Dependencies\" 表示这个项目的依赖，包括依赖的项目的名称，版本号。\n\n**Please do not put test harnesses or transpilers in your\n`dependencies` object.**  See `devDependencies`, below.\n\nSee semver(7) for more details about specifying version ranges.\n\n* `version` Must match `version` exactly\n* `>version` Must be greater than `version`\n* `>=version` etc\n* `<version`\n* `<=version`\n* `~version` \"Approximately equivalent to version\"  See semver(7)\n* `^version` \"Compatible with version\"  See semver(7)\n* `1.2.x` 1.2.0, 1.2.1, etc., but not 1.3.0\n* `http://...` See 'URLs as Dependencies' below\n* `*` Matches any version\n* `\"\"` (just an empty string) Same as `*`\n* `version1 - version2` Same as `>=version1 <=version2`.\n* `range1 || range2` Passes if either range1 or range2 are satisfied.\n* `git...` See 'Git URLs as Dependencies' below\n* `user/repo` See 'GitHub URLs' below\n* `tag` A specific version tagged and published as `tag`  See `npm-tag(1)`\n* `path/path/path` See [Local Paths](#local-paths) below\n\nFor example, these are all valid:\n\n    { \"dependencies\" :\n      { \"foo\" : \"1.0.0 - 2.9999.9999\"\n      , \"bar\" : \">=1.0.2 <2.1.2\"\n      , \"baz\" : \">1.0.2 <=2.3.4\"\n      , \"boo\" : \"2.0.1\"\n      , \"qux\" : \"<1.0.0 || >=2.3.1 <2.4.5 || >=2.5.2 <3.0.0\"\n      , \"asd\" : \"http://asdf.com/asdf.tar.gz\"\n      , \"til\" : \"~1.2\"\n      , \"elf\" : \"~1.2.3\"\n      , \"two\" : \"2.x\"\n      , \"thr\" : \"3.3.x\"\n      , \"lat\" : \"latest\"\n      , \"dyl\" : \"file:../dyl\"\n      }\n    }\n\n#### URLs as Dependencies\n\nYou may specify a tarball URL in place of a version range.\n\nThis tarball will be downloaded and installed locally to your package at\ninstall time.\n\n#### Git URLs as Dependencies\n\nGit urls can be of the form:\n\n    git://github.com/user/project.git#commit-ish\n    git+ssh://user@hostname:project.git#commit-ish\n    git+ssh://user@hostname/project.git#commit-ish\n    git+http://user@hostname/project/blah.git#commit-ish\n    git+https://user@hostname/project/blah.git#commit-ish\n\nThe `commit-ish` can be any tag, sha, or branch which can be supplied as\nan argument to `git checkout`.  The default is `master`.\n\n## GitHub URLs\n\nAs of version 1.1.65, you can refer to GitHub urls as just \"foo\":\n\"user/foo-project\".  Just as with git URLs, a `commit-ish` suffix can be\nincluded.  For example:\n\n    {\n      \"name\": \"foo\",\n      \"version\": \"0.0.0\",\n      \"dependencies\": {\n        \"express\": \"visionmedia/express\",\n        \"mocha\": \"visionmedia/mocha#4727d357ea\"\n      }\n    }\n\n## Local Paths\n\nAs of version 2.0.0 you can provide a path to a local directory that contains a\npackage. Local paths can be saved using `npm install -S` or\n`npm install --save`, using any of these forms:\n\n    ../foo/bar\n    ~/foo/bar\n    ./foo/bar\n    /foo/bar\n\nin which case they will be normalized to a relative path and added to your\n`package.json`. For example:\n\n    {\n      \"name\": \"baz\",\n      \"dependencies\": {\n        \"bar\": \"file:../foo/bar\"\n      }\n    }\n\nThis feature is helpful for local offline development and creating\ntests that require npm installing where you don't want to hit an\nexternal server, but should not be used when publishing packages\nto the public registry.\n\n## devDependencies\n\n\"devDependencies\" 开发环境的依赖。\n别人使用你的模块，并不需要下载你的测试或者文档依赖。所以最好将你的开发依赖放在这个下面。\n\n这些依赖将会被安装，当执行 `npm link` 或者 `npm install`.\n详情看 `npm-config(7)` .\n\n对于非特定平台的构建，例如使用 coffeescript 或者其他需要编译到 js 的语言，使用\n `prepublish` 脚本去做，并把依赖的包配置到 \"devDependency\".\n\n例如:\n\n    { \"name\": \"ethopia-waza\",\n      \"description\": \"a delightfully fruity coffee varietal\",\n      \"version\": \"1.2.3\",\n      \"devDependencies\": {\n        \"coffee-script\": \"~1.6.3\"\n      },\n      \"scripts\": {\n        \"prepublish\": \"coffee -o lib/ -c src/waza.coffee\"\n      },\n      \"main\": \"lib/waza.js\"\n    }\n\n\n`prepublish` 脚本会在 `publishing` 之前执行。\n这样子用户就不需要去编译他们了。在本地你可以使用 `npm install` 安装这些依赖，可以轻松的得到测试。\n\n## peerDependencies\n\nIn some cases, you want to express the compatibility of your package with a\nhost tool or library, while not necessarily doing a `require` of this host.\nThis is usually referred to as a *plugin*. Notably, your module may be exposing\na specific interface, expected and specified by the host documentation.\n\nFor example:\n\n    {\n      \"name\": \"tea-latte\",\n      \"version\": \"1.3.5\",\n      \"peerDependencies\": {\n        \"tea\": \"2.x\"\n      }\n    }\n\nThis ensures your package `tea-latte` can be installed *along* with the second\nmajor version of the host package `tea` only. `npm install tea-latte` could\npossibly yield the following dependency graph:\n\n    ├── tea-latte@1.3.5\n    └── tea@2.2.0\n\n**NOTE: npm versions 1 and 2 will automatically install `peerDependencies` if\nthey are not explicitly depended upon higher in the dependency tree. In the\nnext major version of npm (npm@3), this will no longer be the case. You will\nreceive a warning that the peerDependency is not installed instead.** The\nbehavior in npms 1 & 2 was frequently confusing and could easily put you into\ndependency hell, a situation that npm is designed to avoid as much as possible.\n\nTrying to install another plugin with a conflicting requirement will cause an\nerror. For this reason, make sure your plugin requirement is as broad as\npossible, and not to lock it down to specific patch versions.\n\nAssuming the host complies with [semver](http://semver.org/), only changes in\nthe host package's major version will break your plugin. Thus, if you've worked\nwith every 1.x version of the host package, use `\"^1.0\"` or `\"1.x\"` to express\nthis. If you depend on features introduced in 1.5.2, use `\">= 1.5.2 < 2\"`.\n\n## bundledDependencies\n\nThis defines an array of package names that will be bundled when publishing\nthe package.\n\nIn cases where you need to preserve npm packages locally or have them\navailable through a single file download, you can bundle the packages in a\ntarball file by specifying the package names in the `bundledDependencies`\narray and executing `npm pack`.\n\nFor example:\n\nIf we define a package.json like this:\n\n```\n{\n  \"name\": \"awesome-web-framework\",\n  \"version\": \"1.0.0\",\n  \"bundledDependencies\": [\n    'renderized', 'super-streams'\n  ]\n}\n```\nwe can obtain `awesome-web-framework-1.0.0.tgz` file by running `npm pack`.\nThis file contains the dependencies `renderized` and `super-streams` which\ncan be installed in a new project by executing `npm install\nawesome-web-framework-1.0.0.tgz`.\n\nIf this is spelled `\"bundleDependencies\"`, then that is also honored.\n\n## optionalDependencies\n\nIf a dependency can be used, but you would like npm to proceed if it cannot be\nfound or fails to install, then you may put it in the `optionalDependencies`\nobject.  This is a map of package name to version or url, just like the\n`dependencies` object.  The difference is that build failures do not cause\ninstallation to fail.\n\nIt is still your program's responsibility to handle the lack of the\ndependency.  For example, something like this:\n\n    try {\n      var foo = require('foo')\n      var fooVersion = require('foo/package.json').version\n    } catch (er) {\n      foo = null\n    }\n    if ( notGoodFooVersion(fooVersion) ) {\n      foo = null\n    }\n\n    // .. then later in your program ..\n\n    if (foo) {\n      foo.doFooThings()\n    }\n\nEntries in `optionalDependencies` will override entries of the same name in\n`dependencies`, so it's usually best to only put in one place.\n\n## engines\n\n可以指定特殊的 `Node` 版本:\n\n    { \"engines\" : { \"node\" : \">=0.10.3 <0.12\" } }\n\nAnd, like with dependencies, if you don't specify the version (or if you\nspecify \"\\*\" as the version), then any version of node will do.\n\nIf you specify an \"engines\" field, then npm will require that \"node\" be\nsomewhere on that list. If \"engines\" is omitted, then npm will just assume\nthat it works on node.\n\nYou can also use the \"engines\" field to specify which versions of npm\nare capable of properly installing your program.  For example:\n\n    { \"engines\" : { \"npm\" : \"~1.0.20\" } }\n\nUnless the user has set the `engine-strict` config flag, this\nfield is advisory only will produce warnings when your package is installed as a dependency.\n\n## engineStrict\n\n**This feature was removed in npm 3.0.0**\n\nPrior to npm 3.0.0, this feature was used to treat this package as if the\nuser had set `engine-strict`. It is no longer used.\n\n## os\n\n你可以指定模块运行的系统:\n\n    \"os\" : [ \"darwin\", \"linux\" ]\n\n你也可以使用黑名单来替代，只需要加 '!' 来排除:\n\n    \"os\" : [ \"!win32\" ]\n\nThe host operating system is determined by `process.platform`\n\nIt is allowed to both blacklist, and whitelist, although there isn't any\ngood reason to do this.\n\n## cpu\n\nIf your code only runs on certain cpu architectures,\nyou can specify which ones.\n\n    \"cpu\" : [ \"x64\", \"ia32\" ]\n\nLike the `os` option, you can also blacklist architectures:\n\n    \"cpu\" : [ \"!arm\", \"!mips\" ]\n\nThe host architecture is determined by `process.arch`\n\n## preferGlobal\n\n如果你的包是主要是一个命令行应用，那应该被全局安装。你可以设置 `preferGlobal` 为 `true`, 来发出提醒，当被局部安装的时候。\n\n当然它不会强制组织用户局部安装，但是它可以帮助消除误会。\n\n## private\n\n如果你在 `package.json` 中设置 `\"private\": true`, `npm` 会阻止它被 `publish`.\n\n这是一个有效防止意外发布私有仓库的方式。\n\n如果你的包是要发布到指定的 `registry`(例如，公司内部搭建的 github), 你应该使用\n`publishConfig`。\n\n## publishConfig\n\nThis is a set of config values that will be used at publish-time. It's\nespecially handy if you want to set the tag, registry or access, so that\nyou can ensure that a given package is not tagged with \"latest\", published\nto the global public registry or that a scoped module is private by default.\n\nAny config values can be overridden, but of course only \"tag\", \"registry\" and\n\"access\" probably matter for the purposes of publishing.\n\nSee `npm-config(7)` to see the list of config options that can be\noverridden.\n\n## DEFAULT VALUES\n\n`npm` 默认的一些值.\n\n* `\"scripts\": {\"start\": \"node server.js\"}`\n\n  If there is a `server.js` file in the root of your package, then npm\n  will default the `start` command to `node server.js`.\n\n* `\"scripts\":{\"install\": \"node-gyp rebuild\"}`\n\n  If there is a `binding.gyp` file in the root of your package and you have not defined an `install` or `preinstall` script, npm will\n  default the `install` command to compile using node-gyp.\n\n* `\"contributors\": [...]`\n\n  If there is an `AUTHORS` file in the root of your package, npm will\n  treat each line as a `Name <email> (url)` format, where email and url\n  are optional.  Lines which start with a `#` or are blank, will be\n  ignored.\n\n## SEE ALSO\n\n* [semver(7)](https://docs.npmjs.com/misc/semver)\n* [npm-init(1)](https://docs.npmjs.com/cli/init)\n* [npm-version(1)](https://docs.npmjs.com/cli/version)\n* [npm-config(1)](https://docs.npmjs.com/cli/config)\n* [npm-config(7)](https://docs.npmjs.com/misc/config)\n* [npm-help(1)](https://docs.npmjs.com/cli/help)\n* [npm-install(1)](https://docs.npmjs.com/cli/install)\n* [npm-publish(1)](https://docs.npmjs.com/cli/publish)\n* [npm-uninstall(1)](https://docs.npmjs.com/cli/uninstall)\n","source":"_posts/2016-05-package-doc.md","raw":"---\ntitle: package.json 文档翻译\ndate: 2016-05-13 13:32:58\ntags: 翻译\n---\n\n`npm` 文档翻译之 `package.json`, 原文链接 <https://docs.npmjs.com/files/package.json>\n\npackage.json(5)\n===========================================================\n\n### 说明\n\n本文档包含所有的 `package.json` 文件配置说明。`package.json` 文件必须是真正的 `json` 对象，而不是 js 对象。\n\n本文档中描述的很多行为受到 `npm-config(7)` 配置文件的影响。\n\n<!-- more -->\n\n### name\n\n在 `package.json` 文件中最重要的配置就是 `name` 和 `version` 字段了。\n如果没有这两个字段，讲无法被安装。\n`name` 和 `version` 组成唯一的标识，所以每次更新都应更新 `version` 字段。\n\n`name` 就是你这个包(项目)的名字。\n\n遵循以下规则：\n\n* 名字长度必须小于等于214个字符，包括括号。\n* 名字不能以 `.` 和 `_` 开始。\n* 新的包名不应该含有大写字母。\n* 名字将会成为一段 `URL`， 命令行的参数 或者 一个文件名字，所以名字不应该包含任何 `non-URL-safe`的字符。\n\n一些注意点:\n\n* 不要使用 `Node` 的模块名\n* 不要在名字中使用 `js` 和 `node` 字段, 包含 `package.json` 文件的包，自动被认为是 `js` 文件。你可以在 `engines` 字段里，指定引擎(比如：`Node`), 参加下文说明。\n* 名字将会被用于 `require()` 参数, 因此名字应该短小易懂。\n* 在使用名字之前，应该先去 <https://www.npmjs.com/> 检查下是否已经被注册了\n\n可以在名字前加上 `scope` 前缀, 如：`@myorg/mypackage`. 具体查 `npm-scope(7)` 。\n\n### version\n\n版本号必须能被 [node-semver](https://github.com/isaacs/node-semver) 解析， 它是 `npm` 的一个依赖包。(`npm install semver` to use it yourself.)\n\n更多关于版本号的说明查看 semver(7).\n\n### description\n\n写一段关于这个包的描述，有助于帮助人们在搜索 `npm search` 结果中发现它。\n\n### keywords\n\n关键字是一组字符串数组，有助于帮助人们在搜索 `npm search` 结果中发现它。\n\n### homepage\n\n项目的首页地址\n\n### bugs\n\n项目 bug 的反馈地址，或者邮件地址。\n它应该是这个样子的：\n\n```\n{ \"url\" : \"https://github.com/owner/project/issues\"\n  , \"email\" : \"project@hostname.com\"\n}\n```\n\n可以提供地址或者邮件，或者只简单的提供字符串，而不需要如上的对象。\n\n如果提供了url，使用 `npm bugs` 命令可以打开。\n\n\n### license\n\n你应该为你的项目指定 `license`，这样子，别人就知道使用这个项目的权限了。\n\n如果使用的是一些通用的 `license` ，如：`BSD-2-Clause`,`MIT`。\n只需要如下添加：\n\n    `{ \"license\" : \"BSD-3-Clause\" }`\n\n查看所有的 `SPDX license` [the full list of SPDX license IDs](https://spdx.org/licenses/).\n\n推荐从这里获取一个(开源项目)\n[OSI](https://opensource.org/licenses/alphabetical).\n\n如果你的项目使用多种 `license` ，使用 [SPDX license\nexpression syntax version 2.0 string](https://npmjs.com/package/spdx), 如下方式：\n\n    `{ \"license\" : \"(ISC OR GPL-3.0)\" }`\n\n如果你使用的 `license` 并不在 `SPDX` 中，或者你自定义了，可以如下使用：\n\n    `{ \"license\" : \"SEE LICENSE IN <filename>\" }`\n\n`<filename>` 文件应在项目的根目录。\n\n\n一些老的项目，使用如下的格式：\n\n    // Not valid metadata\n    { \"license\" :\n      { \"type\" : \"ISC\"\n      , \"url\" : \"http://opensource.org/licenses/ISC\"\n      }\n    }\n\n    // Not valid metadata\n    { \"licenses\" :\n      [\n        { \"type\": \"MIT\"\n        , \"url\": \"http://www.opensource.org/licenses/mit-license.php\"\n        }\n      , { \"type\": \"Apache-2.0\"\n        , \"url\": \"http://opensource.org/licenses/apache2.0.php\"\n        }\n      ]\n    }\n\n以上这些格式是被弃用的，应该使用 `SPDX` 格式， 如下：\n\n    { \"license\": \"ISC\" }\n\n    { \"license\": \"(MIT OR Apache-2.0)\" }\n\n最终，如果你不希望授予别人使用的权力，使用如下：\n\n    { \"license\": \"UNLICENSED\"}\n\n应该考虑设置字段 `\"private\": true` 来阻止被意外 `publish`.\n\n### people fields: author, contributors\n\n\"author\" 是一个 `person` 对象，\n\"contributors\" 是一个 `person` 对象数组。\n\"person\" 是一个包含 \"name\", \"url\", \"email\" 的对象：\n\n    { \"name\" : \"Barney Rubble\"\n    , \"email\" : \"b@rubble.com\"\n    , \"url\" : \"http://barnyrubble.tumblr.com/\"\n    }\n\n或者你可以使用如下简单字符串：\n\n    \"Barney Rubble <b@rubble.com> (http://barnyrubble.tumblr.com/)\"\n\n\"email\" 和 \"url\" 是可选的。\n\n\n`npm` 同样有 \"maintainers\" 字段来设置你的用户信息。\n\n\n### files\n\n\"files\" 字段是一个包含你项目文件的数组。\n如果使用了文件夹，那么该文件夹下的文件将被包含(除非被其他规则忽略)。\n\n你也可以在根目录创建 `.npmignore` 文件，来忽略某些文件。就像 `.gitignore`.\n\n以下文件总是被包含在内：\n\n* `package.json`\n* `README`\n* `CHANGES` / `CHANGELOG` / `HISTORY`\n* `LICENSE` / `LICENCE`\n* \"main\" 字段指定的文件\n\n`README`, `CHANGES` & `LICENSE` 可以是任何文件.\n\n相反, 下文件应该被忽略:\n\n* `.git`\n* `CVS`\n* `.svn`\n* `.hg`\n* `.lock-wscript`\n* `.wafpickle-N`\n* `.*.swp`\n* `.DS_Store`\n* `._*`\n* `npm-debug.log`\n* `.npmrc`\n* `node_modules`\n\n### main\n\n`main` 字段指定你程序的入口模块。\n也就是说，如果你的包名是 `foo`, 一个用户安装了它, 并且\n`require(\"foo\")`, 然后你的 `main` 指定的文件，应该 `exports` 相应的模块。\n\n这应该是一个相对于项目根目录的文件地址。\n\n### bin\n\n很多包都有一个或多个可执行文件被安装到 `PATH`。`npm` 可以很容易的实现这点(实际上，npm 就是使用的这个功能)。\n\n使用该功能，需要在 `package.json` 中配置 `bin` 字段。安装时，`npm` 会自动建立起链接，全局安装被链接到 `prefix/bin` 目录, 局部安装的会被链接到 `./node_modules/.bin/` 目录。\n\n举个例子:\n\n    { \"bin\" : { \"myapp\" : \"./cli.js\" } }\n\n当你安装时，将会创建一个链接，将 `cli.js` 链接到 `/usr/local/bin/myapp`。\n\n如果你只有一个可执行命令，那么它的名字应该是包名，这样子你只需要使用字符串来调用。\n如：\n\n    { \"name\": \"my-program\"\n    , \"version\": \"1.2.5\"\n    , \"bin\": \"./path/to/program\" }\n\n等同于:\n\n    { \"name\": \"my-program\"\n    , \"version\": \"1.2.5\"\n    , \"bin\" : { \"my-program\" : \"./path/to/program\" } }\n\n### man\n\n指定一个文件或者文件数组供 `man` 程序使用。\n\n如果只提供了一个单一文件，那么安装之后，只需要 `man <pkgname>`.  \n\n例如:\n\n    { \"name\" : \"foo\"\n    , \"version\" : \"1.2.3\"\n    , \"description\" : \"A packaged foo fooer for fooing foos\"\n    , \"main\" : \"foo.js\"\n    , \"man\" : \"./man/doc.1\"\n    }\n\n以上 `man foo` 将会链接到 `./man/doc.1`。\n\n如果文件名不是以包名开头，将会被自动加上前缀。\n像这样:\n\n    { \"name\" : \"foo\"\n    , \"version\" : \"1.2.3\"\n    , \"description\" : \"A packaged foo fooer for fooing foos\"\n    , \"main\" : \"foo.js\"\n    , \"man\" : [ \"./man/foo.1\", \"./man/bar.1\" ]\n    }\n\n将会为 `man foo` 和 `man foo-bar` 创建文件。\n\n`Man` 文件必须以数字结束，如果是压缩文件可以是 `.gz` 为后缀。\n\n数字决定 `man` 哪个文件\n\n    { \"name\" : \"foo\"\n    , \"version\" : \"1.2.3\"\n    , \"description\" : \"A packaged foo fooer for fooing foos\"\n    , \"main\" : \"foo.js\"\n    , \"man\" : [ \"./man/foo.1\", \"./man/foo.2\" ]\n    }\n\n以上将会创建 `man foo` 和 `man 2 foo`\n\n### directories\n\nCommonJS [Packages](http://wiki.commonjs.org/wiki/Packages/1.0)\n说明了几种方式使用 `directories` 对象指明你的项目结构。\n\n你可以在 [npm's package.json](https://registry.npmjs.org/npm/latest),\n看到 `directories` 字段指定了 doc, lib, man.\n\n在未来，这些信息将会有其他创造性的方式。\n\n#### directories.lib\n\nTell people where the bulk of your library is.  Nothing special is done\nwith the lib folder in any way, but it's useful meta info.\n\n#### directories.bin\n\nIf you specify a `bin` directory in `directories.bin`, all the files in\nthat folder will be added.\n\nBecause of the way the `bin` directive works, specifying both a\n`bin` path and setting `directories.bin` is an error. If you want to\nspecify individual files, use `bin`, and for all the files in an\nexisting `bin` directory, use `directories.bin`.\n\n#### directories.man\n\nA folder that is full of man pages.  Sugar to generate a \"man\" array by\nwalking the folder.\n\n#### directories.doc\n\nPut markdown files in here.  Eventually, these will be displayed nicely,\nmaybe, someday.\n\n#### directories.example\n\nPut example scripts in here.  Someday, it might be exposed in some clever way.\n\n#### directories.test\n\nPut your tests in here. It is currently not exposed, but it might be in the\nfuture.\n\n## repository\n\n指定你源代码的地址，这有助于别人提供贡献。如果提供的仓库地址是在 `GitHub` 上，`npm docs` 命令将会打开你的项目地址。\n\n像这样:\n\n    \"repository\" :\n      { \"type\" : \"git\"\n      , \"url\" : \"https://github.com/npm/npm.git\"\n      }\n\n    \"repository\" :\n      { \"type\" : \"svn\"\n      , \"url\" : \"https://v8.googlecode.com/svn/trunk/\"\n      }\n\n地址应该是公开的，能直接被 `VCS program` 读取。\n\nFor GitHub, GitHub gist, Bitbucket, or GitLab repositories you can use the same\nshortcut syntax you use for `npm install`:\n\n    \"repository\": \"npm/npm\"\n\n    \"repository\": \"gist:11081aaa281\"\n\n    \"repository\": \"bitbucket:example/repo\"\n\n    \"repository\": \"gitlab:another/repo\"\n\n## scripts\n\n\"scripts\" 字段包含项目的生命周期命令，是个 hash 对象。\n`key` 是生命周期事件，`value` 是执行的命令。\n\n详情查看 `npm-scripts(7)`.\n\n## config\n\nA \"config\" object can be used to set configuration parameters used in package\nscripts that persist across upgrades.  For instance, if a package had the\nfollowing:\n\n    { \"name\" : \"foo\"\n    , \"config\" : { \"port\" : \"8080\" } }\n\nand then had a \"start\" command that then referenced the\n`npm_package_config_port` environment variable, then the user could\noverride that by doing `npm config set foo:port 8001`.\n\nSee `npm-config(7)` and `npm-scripts(7)` for more on package\nconfigs.\n\n## dependencies\n\n\"Dependencies\" 表示这个项目的依赖，包括依赖的项目的名称，版本号。\n\n**Please do not put test harnesses or transpilers in your\n`dependencies` object.**  See `devDependencies`, below.\n\nSee semver(7) for more details about specifying version ranges.\n\n* `version` Must match `version` exactly\n* `>version` Must be greater than `version`\n* `>=version` etc\n* `<version`\n* `<=version`\n* `~version` \"Approximately equivalent to version\"  See semver(7)\n* `^version` \"Compatible with version\"  See semver(7)\n* `1.2.x` 1.2.0, 1.2.1, etc., but not 1.3.0\n* `http://...` See 'URLs as Dependencies' below\n* `*` Matches any version\n* `\"\"` (just an empty string) Same as `*`\n* `version1 - version2` Same as `>=version1 <=version2`.\n* `range1 || range2` Passes if either range1 or range2 are satisfied.\n* `git...` See 'Git URLs as Dependencies' below\n* `user/repo` See 'GitHub URLs' below\n* `tag` A specific version tagged and published as `tag`  See `npm-tag(1)`\n* `path/path/path` See [Local Paths](#local-paths) below\n\nFor example, these are all valid:\n\n    { \"dependencies\" :\n      { \"foo\" : \"1.0.0 - 2.9999.9999\"\n      , \"bar\" : \">=1.0.2 <2.1.2\"\n      , \"baz\" : \">1.0.2 <=2.3.4\"\n      , \"boo\" : \"2.0.1\"\n      , \"qux\" : \"<1.0.0 || >=2.3.1 <2.4.5 || >=2.5.2 <3.0.0\"\n      , \"asd\" : \"http://asdf.com/asdf.tar.gz\"\n      , \"til\" : \"~1.2\"\n      , \"elf\" : \"~1.2.3\"\n      , \"two\" : \"2.x\"\n      , \"thr\" : \"3.3.x\"\n      , \"lat\" : \"latest\"\n      , \"dyl\" : \"file:../dyl\"\n      }\n    }\n\n#### URLs as Dependencies\n\nYou may specify a tarball URL in place of a version range.\n\nThis tarball will be downloaded and installed locally to your package at\ninstall time.\n\n#### Git URLs as Dependencies\n\nGit urls can be of the form:\n\n    git://github.com/user/project.git#commit-ish\n    git+ssh://user@hostname:project.git#commit-ish\n    git+ssh://user@hostname/project.git#commit-ish\n    git+http://user@hostname/project/blah.git#commit-ish\n    git+https://user@hostname/project/blah.git#commit-ish\n\nThe `commit-ish` can be any tag, sha, or branch which can be supplied as\nan argument to `git checkout`.  The default is `master`.\n\n## GitHub URLs\n\nAs of version 1.1.65, you can refer to GitHub urls as just \"foo\":\n\"user/foo-project\".  Just as with git URLs, a `commit-ish` suffix can be\nincluded.  For example:\n\n    {\n      \"name\": \"foo\",\n      \"version\": \"0.0.0\",\n      \"dependencies\": {\n        \"express\": \"visionmedia/express\",\n        \"mocha\": \"visionmedia/mocha#4727d357ea\"\n      }\n    }\n\n## Local Paths\n\nAs of version 2.0.0 you can provide a path to a local directory that contains a\npackage. Local paths can be saved using `npm install -S` or\n`npm install --save`, using any of these forms:\n\n    ../foo/bar\n    ~/foo/bar\n    ./foo/bar\n    /foo/bar\n\nin which case they will be normalized to a relative path and added to your\n`package.json`. For example:\n\n    {\n      \"name\": \"baz\",\n      \"dependencies\": {\n        \"bar\": \"file:../foo/bar\"\n      }\n    }\n\nThis feature is helpful for local offline development and creating\ntests that require npm installing where you don't want to hit an\nexternal server, but should not be used when publishing packages\nto the public registry.\n\n## devDependencies\n\n\"devDependencies\" 开发环境的依赖。\n别人使用你的模块，并不需要下载你的测试或者文档依赖。所以最好将你的开发依赖放在这个下面。\n\n这些依赖将会被安装，当执行 `npm link` 或者 `npm install`.\n详情看 `npm-config(7)` .\n\n对于非特定平台的构建，例如使用 coffeescript 或者其他需要编译到 js 的语言，使用\n `prepublish` 脚本去做，并把依赖的包配置到 \"devDependency\".\n\n例如:\n\n    { \"name\": \"ethopia-waza\",\n      \"description\": \"a delightfully fruity coffee varietal\",\n      \"version\": \"1.2.3\",\n      \"devDependencies\": {\n        \"coffee-script\": \"~1.6.3\"\n      },\n      \"scripts\": {\n        \"prepublish\": \"coffee -o lib/ -c src/waza.coffee\"\n      },\n      \"main\": \"lib/waza.js\"\n    }\n\n\n`prepublish` 脚本会在 `publishing` 之前执行。\n这样子用户就不需要去编译他们了。在本地你可以使用 `npm install` 安装这些依赖，可以轻松的得到测试。\n\n## peerDependencies\n\nIn some cases, you want to express the compatibility of your package with a\nhost tool or library, while not necessarily doing a `require` of this host.\nThis is usually referred to as a *plugin*. Notably, your module may be exposing\na specific interface, expected and specified by the host documentation.\n\nFor example:\n\n    {\n      \"name\": \"tea-latte\",\n      \"version\": \"1.3.5\",\n      \"peerDependencies\": {\n        \"tea\": \"2.x\"\n      }\n    }\n\nThis ensures your package `tea-latte` can be installed *along* with the second\nmajor version of the host package `tea` only. `npm install tea-latte` could\npossibly yield the following dependency graph:\n\n    ├── tea-latte@1.3.5\n    └── tea@2.2.0\n\n**NOTE: npm versions 1 and 2 will automatically install `peerDependencies` if\nthey are not explicitly depended upon higher in the dependency tree. In the\nnext major version of npm (npm@3), this will no longer be the case. You will\nreceive a warning that the peerDependency is not installed instead.** The\nbehavior in npms 1 & 2 was frequently confusing and could easily put you into\ndependency hell, a situation that npm is designed to avoid as much as possible.\n\nTrying to install another plugin with a conflicting requirement will cause an\nerror. For this reason, make sure your plugin requirement is as broad as\npossible, and not to lock it down to specific patch versions.\n\nAssuming the host complies with [semver](http://semver.org/), only changes in\nthe host package's major version will break your plugin. Thus, if you've worked\nwith every 1.x version of the host package, use `\"^1.0\"` or `\"1.x\"` to express\nthis. If you depend on features introduced in 1.5.2, use `\">= 1.5.2 < 2\"`.\n\n## bundledDependencies\n\nThis defines an array of package names that will be bundled when publishing\nthe package.\n\nIn cases where you need to preserve npm packages locally or have them\navailable through a single file download, you can bundle the packages in a\ntarball file by specifying the package names in the `bundledDependencies`\narray and executing `npm pack`.\n\nFor example:\n\nIf we define a package.json like this:\n\n```\n{\n  \"name\": \"awesome-web-framework\",\n  \"version\": \"1.0.0\",\n  \"bundledDependencies\": [\n    'renderized', 'super-streams'\n  ]\n}\n```\nwe can obtain `awesome-web-framework-1.0.0.tgz` file by running `npm pack`.\nThis file contains the dependencies `renderized` and `super-streams` which\ncan be installed in a new project by executing `npm install\nawesome-web-framework-1.0.0.tgz`.\n\nIf this is spelled `\"bundleDependencies\"`, then that is also honored.\n\n## optionalDependencies\n\nIf a dependency can be used, but you would like npm to proceed if it cannot be\nfound or fails to install, then you may put it in the `optionalDependencies`\nobject.  This is a map of package name to version or url, just like the\n`dependencies` object.  The difference is that build failures do not cause\ninstallation to fail.\n\nIt is still your program's responsibility to handle the lack of the\ndependency.  For example, something like this:\n\n    try {\n      var foo = require('foo')\n      var fooVersion = require('foo/package.json').version\n    } catch (er) {\n      foo = null\n    }\n    if ( notGoodFooVersion(fooVersion) ) {\n      foo = null\n    }\n\n    // .. then later in your program ..\n\n    if (foo) {\n      foo.doFooThings()\n    }\n\nEntries in `optionalDependencies` will override entries of the same name in\n`dependencies`, so it's usually best to only put in one place.\n\n## engines\n\n可以指定特殊的 `Node` 版本:\n\n    { \"engines\" : { \"node\" : \">=0.10.3 <0.12\" } }\n\nAnd, like with dependencies, if you don't specify the version (or if you\nspecify \"\\*\" as the version), then any version of node will do.\n\nIf you specify an \"engines\" field, then npm will require that \"node\" be\nsomewhere on that list. If \"engines\" is omitted, then npm will just assume\nthat it works on node.\n\nYou can also use the \"engines\" field to specify which versions of npm\nare capable of properly installing your program.  For example:\n\n    { \"engines\" : { \"npm\" : \"~1.0.20\" } }\n\nUnless the user has set the `engine-strict` config flag, this\nfield is advisory only will produce warnings when your package is installed as a dependency.\n\n## engineStrict\n\n**This feature was removed in npm 3.0.0**\n\nPrior to npm 3.0.0, this feature was used to treat this package as if the\nuser had set `engine-strict`. It is no longer used.\n\n## os\n\n你可以指定模块运行的系统:\n\n    \"os\" : [ \"darwin\", \"linux\" ]\n\n你也可以使用黑名单来替代，只需要加 '!' 来排除:\n\n    \"os\" : [ \"!win32\" ]\n\nThe host operating system is determined by `process.platform`\n\nIt is allowed to both blacklist, and whitelist, although there isn't any\ngood reason to do this.\n\n## cpu\n\nIf your code only runs on certain cpu architectures,\nyou can specify which ones.\n\n    \"cpu\" : [ \"x64\", \"ia32\" ]\n\nLike the `os` option, you can also blacklist architectures:\n\n    \"cpu\" : [ \"!arm\", \"!mips\" ]\n\nThe host architecture is determined by `process.arch`\n\n## preferGlobal\n\n如果你的包是主要是一个命令行应用，那应该被全局安装。你可以设置 `preferGlobal` 为 `true`, 来发出提醒，当被局部安装的时候。\n\n当然它不会强制组织用户局部安装，但是它可以帮助消除误会。\n\n## private\n\n如果你在 `package.json` 中设置 `\"private\": true`, `npm` 会阻止它被 `publish`.\n\n这是一个有效防止意外发布私有仓库的方式。\n\n如果你的包是要发布到指定的 `registry`(例如，公司内部搭建的 github), 你应该使用\n`publishConfig`。\n\n## publishConfig\n\nThis is a set of config values that will be used at publish-time. It's\nespecially handy if you want to set the tag, registry or access, so that\nyou can ensure that a given package is not tagged with \"latest\", published\nto the global public registry or that a scoped module is private by default.\n\nAny config values can be overridden, but of course only \"tag\", \"registry\" and\n\"access\" probably matter for the purposes of publishing.\n\nSee `npm-config(7)` to see the list of config options that can be\noverridden.\n\n## DEFAULT VALUES\n\n`npm` 默认的一些值.\n\n* `\"scripts\": {\"start\": \"node server.js\"}`\n\n  If there is a `server.js` file in the root of your package, then npm\n  will default the `start` command to `node server.js`.\n\n* `\"scripts\":{\"install\": \"node-gyp rebuild\"}`\n\n  If there is a `binding.gyp` file in the root of your package and you have not defined an `install` or `preinstall` script, npm will\n  default the `install` command to compile using node-gyp.\n\n* `\"contributors\": [...]`\n\n  If there is an `AUTHORS` file in the root of your package, npm will\n  treat each line as a `Name <email> (url)` format, where email and url\n  are optional.  Lines which start with a `#` or are blank, will be\n  ignored.\n\n## SEE ALSO\n\n* [semver(7)](https://docs.npmjs.com/misc/semver)\n* [npm-init(1)](https://docs.npmjs.com/cli/init)\n* [npm-version(1)](https://docs.npmjs.com/cli/version)\n* [npm-config(1)](https://docs.npmjs.com/cli/config)\n* [npm-config(7)](https://docs.npmjs.com/misc/config)\n* [npm-help(1)](https://docs.npmjs.com/cli/help)\n* [npm-install(1)](https://docs.npmjs.com/cli/install)\n* [npm-publish(1)](https://docs.npmjs.com/cli/publish)\n* [npm-uninstall(1)](https://docs.npmjs.com/cli/uninstall)\n","slug":"package-doc","published":1,"updated":"2016-06-05T10:39:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipcrlum80006hry1xn5tpx7k","content":"<p><code>npm</code> 文档翻译之 <code>package.json</code>, 原文链接 <a href=\"https://docs.npmjs.com/files/package.json\" target=\"_blank\" rel=\"external\">https://docs.npmjs.com/files/package.json</a></p>\n<h1 id=\"package-json-5\"><a href=\"#package-json-5\" class=\"headerlink\" title=\"package.json(5)\"></a>package.json(5)</h1><h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><p>本文档包含所有的 <code>package.json</code> 文件配置说明。<code>package.json</code> 文件必须是真正的 <code>json</code> 对象，而不是 js 对象。</p>\n<p>本文档中描述的很多行为受到 <code>npm-config(7)</code> 配置文件的影响。</p>\n<a id=\"more\"></a>\n<h3 id=\"name\"><a href=\"#name\" class=\"headerlink\" title=\"name\"></a>name</h3><p>在 <code>package.json</code> 文件中最重要的配置就是 <code>name</code> 和 <code>version</code> 字段了。<br>如果没有这两个字段，讲无法被安装。<br><code>name</code> 和 <code>version</code> 组成唯一的标识，所以每次更新都应更新 <code>version</code> 字段。</p>\n<p><code>name</code> 就是你这个包(项目)的名字。</p>\n<p>遵循以下规则：</p>\n<ul>\n<li>名字长度必须小于等于214个字符，包括括号。</li>\n<li>名字不能以 <code>.</code> 和 <code>_</code> 开始。</li>\n<li>新的包名不应该含有大写字母。</li>\n<li>名字将会成为一段 <code>URL</code>， 命令行的参数 或者 一个文件名字，所以名字不应该包含任何 <code>non-URL-safe</code>的字符。</li>\n</ul>\n<p>一些注意点:</p>\n<ul>\n<li>不要使用 <code>Node</code> 的模块名</li>\n<li>不要在名字中使用 <code>js</code> 和 <code>node</code> 字段, 包含 <code>package.json</code> 文件的包，自动被认为是 <code>js</code> 文件。你可以在 <code>engines</code> 字段里，指定引擎(比如：<code>Node</code>), 参加下文说明。</li>\n<li>名字将会被用于 <code>require()</code> 参数, 因此名字应该短小易懂。</li>\n<li>在使用名字之前，应该先去 <a href=\"https://www.npmjs.com/\" target=\"_blank\" rel=\"external\">https://www.npmjs.com/</a> 检查下是否已经被注册了</li>\n</ul>\n<p>可以在名字前加上 <code>scope</code> 前缀, 如：<code>@myorg/mypackage</code>. 具体查 <code>npm-scope(7)</code> 。</p>\n<h3 id=\"version\"><a href=\"#version\" class=\"headerlink\" title=\"version\"></a>version</h3><p>版本号必须能被 <a href=\"https://github.com/isaacs/node-semver\" target=\"_blank\" rel=\"external\">node-semver</a> 解析， 它是 <code>npm</code> 的一个依赖包。(<code>npm install semver</code> to use it yourself.)</p>\n<p>更多关于版本号的说明查看 semver(7).</p>\n<h3 id=\"description\"><a href=\"#description\" class=\"headerlink\" title=\"description\"></a>description</h3><p>写一段关于这个包的描述，有助于帮助人们在搜索 <code>npm search</code> 结果中发现它。</p>\n<h3 id=\"keywords\"><a href=\"#keywords\" class=\"headerlink\" title=\"keywords\"></a>keywords</h3><p>关键字是一组字符串数组，有助于帮助人们在搜索 <code>npm search</code> 结果中发现它。</p>\n<h3 id=\"homepage\"><a href=\"#homepage\" class=\"headerlink\" title=\"homepage\"></a>homepage</h3><p>项目的首页地址</p>\n<h3 id=\"bugs\"><a href=\"#bugs\" class=\"headerlink\" title=\"bugs\"></a>bugs</h3><p>项目 bug 的反馈地址，或者邮件地址。<br>它应该是这个样子的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; &quot;url&quot; : &quot;https://github.com/owner/project/issues&quot;</span><br><span class=\"line\">  , &quot;email&quot; : &quot;project@hostname.com&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以提供地址或者邮件，或者只简单的提供字符串，而不需要如上的对象。</p>\n<p>如果提供了url，使用 <code>npm bugs</code> 命令可以打开。</p>\n<h3 id=\"license\"><a href=\"#license\" class=\"headerlink\" title=\"license\"></a>license</h3><p>你应该为你的项目指定 <code>license</code>，这样子，别人就知道使用这个项目的权限了。</p>\n<p>如果使用的是一些通用的 <code>license</code> ，如：<code>BSD-2-Clause</code>,<code>MIT</code>。<br>只需要如下添加：</p>\n<pre><code>`{ &quot;license&quot; : &quot;BSD-3-Clause&quot; }`\n</code></pre><p>查看所有的 <code>SPDX license</code> <a href=\"https://spdx.org/licenses/\" target=\"_blank\" rel=\"external\">the full list of SPDX license IDs</a>.</p>\n<p>推荐从这里获取一个(开源项目)<br><a href=\"https://opensource.org/licenses/alphabetical\" target=\"_blank\" rel=\"external\">OSI</a>.</p>\n<p>如果你的项目使用多种 <code>license</code> ，使用 <a href=\"https://npmjs.com/package/spdx\" target=\"_blank\" rel=\"external\">SPDX license<br>expression syntax version 2.0 string</a>, 如下方式：</p>\n<pre><code>`{ &quot;license&quot; : &quot;(ISC OR GPL-3.0)&quot; }`\n</code></pre><p>如果你使用的 <code>license</code> 并不在 <code>SPDX</code> 中，或者你自定义了，可以如下使用：</p>\n<pre><code>`{ &quot;license&quot; : &quot;SEE LICENSE IN &lt;filename&gt;&quot; }`\n</code></pre><p><code>&lt;filename&gt;</code> 文件应在项目的根目录。</p>\n<p>一些老的项目，使用如下的格式：</p>\n<pre><code>// Not valid metadata\n{ &quot;license&quot; :\n  { &quot;type&quot; : &quot;ISC&quot;\n  , &quot;url&quot; : &quot;http://opensource.org/licenses/ISC&quot;\n  }\n}\n\n// Not valid metadata\n{ &quot;licenses&quot; :\n  [\n    { &quot;type&quot;: &quot;MIT&quot;\n    , &quot;url&quot;: &quot;http://www.opensource.org/licenses/mit-license.php&quot;\n    }\n  , { &quot;type&quot;: &quot;Apache-2.0&quot;\n    , &quot;url&quot;: &quot;http://opensource.org/licenses/apache2.0.php&quot;\n    }\n  ]\n}\n</code></pre><p>以上这些格式是被弃用的，应该使用 <code>SPDX</code> 格式， 如下：</p>\n<pre><code>{ &quot;license&quot;: &quot;ISC&quot; }\n\n{ &quot;license&quot;: &quot;(MIT OR Apache-2.0)&quot; }\n</code></pre><p>最终，如果你不希望授予别人使用的权力，使用如下：</p>\n<pre><code>{ &quot;license&quot;: &quot;UNLICENSED&quot;}\n</code></pre><p>应该考虑设置字段 <code>&quot;private&quot;: true</code> 来阻止被意外 <code>publish</code>.</p>\n<h3 id=\"people-fields-author-contributors\"><a href=\"#people-fields-author-contributors\" class=\"headerlink\" title=\"people fields: author, contributors\"></a>people fields: author, contributors</h3><p>“author” 是一个 <code>person</code> 对象，<br>“contributors” 是一个 <code>person</code> 对象数组。<br>“person” 是一个包含 “name”, “url”, “email” 的对象：</p>\n<pre><code>{ &quot;name&quot; : &quot;Barney Rubble&quot;\n, &quot;email&quot; : &quot;b@rubble.com&quot;\n, &quot;url&quot; : &quot;http://barnyrubble.tumblr.com/&quot;\n}\n</code></pre><p>或者你可以使用如下简单字符串：</p>\n<pre><code>&quot;Barney Rubble &lt;b@rubble.com&gt; (http://barnyrubble.tumblr.com/)&quot;\n</code></pre><p>“email” 和 “url” 是可选的。</p>\n<p><code>npm</code> 同样有 “maintainers” 字段来设置你的用户信息。</p>\n<h3 id=\"files\"><a href=\"#files\" class=\"headerlink\" title=\"files\"></a>files</h3><p>“files” 字段是一个包含你项目文件的数组。<br>如果使用了文件夹，那么该文件夹下的文件将被包含(除非被其他规则忽略)。</p>\n<p>你也可以在根目录创建 <code>.npmignore</code> 文件，来忽略某些文件。就像 <code>.gitignore</code>.</p>\n<p>以下文件总是被包含在内：</p>\n<ul>\n<li><code>package.json</code></li>\n<li><code>README</code></li>\n<li><code>CHANGES</code> / <code>CHANGELOG</code> / <code>HISTORY</code></li>\n<li><code>LICENSE</code> / <code>LICENCE</code></li>\n<li>“main” 字段指定的文件</li>\n</ul>\n<p><code>README</code>, <code>CHANGES</code> &amp; <code>LICENSE</code> 可以是任何文件.</p>\n<p>相反, 下文件应该被忽略:</p>\n<ul>\n<li><code>.git</code></li>\n<li><code>CVS</code></li>\n<li><code>.svn</code></li>\n<li><code>.hg</code></li>\n<li><code>.lock-wscript</code></li>\n<li><code>.wafpickle-N</code></li>\n<li><code>.*.swp</code></li>\n<li><code>.DS_Store</code></li>\n<li><code>._*</code></li>\n<li><code>npm-debug.log</code></li>\n<li><code>.npmrc</code></li>\n<li><code>node_modules</code></li>\n</ul>\n<h3 id=\"main\"><a href=\"#main\" class=\"headerlink\" title=\"main\"></a>main</h3><p><code>main</code> 字段指定你程序的入口模块。<br>也就是说，如果你的包名是 <code>foo</code>, 一个用户安装了它, 并且<br><code>require(&quot;foo&quot;)</code>, 然后你的 <code>main</code> 指定的文件，应该 <code>exports</code> 相应的模块。</p>\n<p>这应该是一个相对于项目根目录的文件地址。</p>\n<h3 id=\"bin\"><a href=\"#bin\" class=\"headerlink\" title=\"bin\"></a>bin</h3><p>很多包都有一个或多个可执行文件被安装到 <code>PATH</code>。<code>npm</code> 可以很容易的实现这点(实际上，npm 就是使用的这个功能)。</p>\n<p>使用该功能，需要在 <code>package.json</code> 中配置 <code>bin</code> 字段。安装时，<code>npm</code> 会自动建立起链接，全局安装被链接到 <code>prefix/bin</code> 目录, 局部安装的会被链接到 <code>./node_modules/.bin/</code> 目录。</p>\n<p>举个例子:</p>\n<pre><code>{ &quot;bin&quot; : { &quot;myapp&quot; : &quot;./cli.js&quot; } }\n</code></pre><p>当你安装时，将会创建一个链接，将 <code>cli.js</code> 链接到 <code>/usr/local/bin/myapp</code>。</p>\n<p>如果你只有一个可执行命令，那么它的名字应该是包名，这样子你只需要使用字符串来调用。<br>如：</p>\n<pre><code>{ &quot;name&quot;: &quot;my-program&quot;\n, &quot;version&quot;: &quot;1.2.5&quot;\n, &quot;bin&quot;: &quot;./path/to/program&quot; }\n</code></pre><p>等同于:</p>\n<pre><code>{ &quot;name&quot;: &quot;my-program&quot;\n, &quot;version&quot;: &quot;1.2.5&quot;\n, &quot;bin&quot; : { &quot;my-program&quot; : &quot;./path/to/program&quot; } }\n</code></pre><h3 id=\"man\"><a href=\"#man\" class=\"headerlink\" title=\"man\"></a>man</h3><p>指定一个文件或者文件数组供 <code>man</code> 程序使用。</p>\n<p>如果只提供了一个单一文件，那么安装之后，只需要 <code>man &lt;pkgname&gt;</code>.  </p>\n<p>例如:</p>\n<pre><code>{ &quot;name&quot; : &quot;foo&quot;\n, &quot;version&quot; : &quot;1.2.3&quot;\n, &quot;description&quot; : &quot;A packaged foo fooer for fooing foos&quot;\n, &quot;main&quot; : &quot;foo.js&quot;\n, &quot;man&quot; : &quot;./man/doc.1&quot;\n}\n</code></pre><p>以上 <code>man foo</code> 将会链接到 <code>./man/doc.1</code>。</p>\n<p>如果文件名不是以包名开头，将会被自动加上前缀。<br>像这样:</p>\n<pre><code>{ &quot;name&quot; : &quot;foo&quot;\n, &quot;version&quot; : &quot;1.2.3&quot;\n, &quot;description&quot; : &quot;A packaged foo fooer for fooing foos&quot;\n, &quot;main&quot; : &quot;foo.js&quot;\n, &quot;man&quot; : [ &quot;./man/foo.1&quot;, &quot;./man/bar.1&quot; ]\n}\n</code></pre><p>将会为 <code>man foo</code> 和 <code>man foo-bar</code> 创建文件。</p>\n<p><code>Man</code> 文件必须以数字结束，如果是压缩文件可以是 <code>.gz</code> 为后缀。</p>\n<p>数字决定 <code>man</code> 哪个文件</p>\n<pre><code>{ &quot;name&quot; : &quot;foo&quot;\n, &quot;version&quot; : &quot;1.2.3&quot;\n, &quot;description&quot; : &quot;A packaged foo fooer for fooing foos&quot;\n, &quot;main&quot; : &quot;foo.js&quot;\n, &quot;man&quot; : [ &quot;./man/foo.1&quot;, &quot;./man/foo.2&quot; ]\n}\n</code></pre><p>以上将会创建 <code>man foo</code> 和 <code>man 2 foo</code></p>\n<h3 id=\"directories\"><a href=\"#directories\" class=\"headerlink\" title=\"directories\"></a>directories</h3><p>CommonJS <a href=\"http://wiki.commonjs.org/wiki/Packages/1.0\" target=\"_blank\" rel=\"external\">Packages</a><br>说明了几种方式使用 <code>directories</code> 对象指明你的项目结构。</p>\n<p>你可以在 <a href=\"https://registry.npmjs.org/npm/latest\" target=\"_blank\" rel=\"external\">npm’s package.json</a>,<br>看到 <code>directories</code> 字段指定了 doc, lib, man.</p>\n<p>在未来，这些信息将会有其他创造性的方式。</p>\n<h4 id=\"directories-lib\"><a href=\"#directories-lib\" class=\"headerlink\" title=\"directories.lib\"></a>directories.lib</h4><p>Tell people where the bulk of your library is.  Nothing special is done<br>with the lib folder in any way, but it’s useful meta info.</p>\n<h4 id=\"directories-bin\"><a href=\"#directories-bin\" class=\"headerlink\" title=\"directories.bin\"></a>directories.bin</h4><p>If you specify a <code>bin</code> directory in <code>directories.bin</code>, all the files in<br>that folder will be added.</p>\n<p>Because of the way the <code>bin</code> directive works, specifying both a<br><code>bin</code> path and setting <code>directories.bin</code> is an error. If you want to<br>specify individual files, use <code>bin</code>, and for all the files in an<br>existing <code>bin</code> directory, use <code>directories.bin</code>.</p>\n<h4 id=\"directories-man\"><a href=\"#directories-man\" class=\"headerlink\" title=\"directories.man\"></a>directories.man</h4><p>A folder that is full of man pages.  Sugar to generate a “man” array by<br>walking the folder.</p>\n<h4 id=\"directories-doc\"><a href=\"#directories-doc\" class=\"headerlink\" title=\"directories.doc\"></a>directories.doc</h4><p>Put markdown files in here.  Eventually, these will be displayed nicely,<br>maybe, someday.</p>\n<h4 id=\"directories-example\"><a href=\"#directories-example\" class=\"headerlink\" title=\"directories.example\"></a>directories.example</h4><p>Put example scripts in here.  Someday, it might be exposed in some clever way.</p>\n<h4 id=\"directories-test\"><a href=\"#directories-test\" class=\"headerlink\" title=\"directories.test\"></a>directories.test</h4><p>Put your tests in here. It is currently not exposed, but it might be in the<br>future.</p>\n<h2 id=\"repository\"><a href=\"#repository\" class=\"headerlink\" title=\"repository\"></a>repository</h2><p>指定你源代码的地址，这有助于别人提供贡献。如果提供的仓库地址是在 <code>GitHub</code> 上，<code>npm docs</code> 命令将会打开你的项目地址。</p>\n<p>像这样:</p>\n<pre><code>&quot;repository&quot; :\n  { &quot;type&quot; : &quot;git&quot;\n  , &quot;url&quot; : &quot;https://github.com/npm/npm.git&quot;\n  }\n\n&quot;repository&quot; :\n  { &quot;type&quot; : &quot;svn&quot;\n  , &quot;url&quot; : &quot;https://v8.googlecode.com/svn/trunk/&quot;\n  }\n</code></pre><p>地址应该是公开的，能直接被 <code>VCS program</code> 读取。</p>\n<p>For GitHub, GitHub gist, Bitbucket, or GitLab repositories you can use the same<br>shortcut syntax you use for <code>npm install</code>:</p>\n<pre><code>&quot;repository&quot;: &quot;npm/npm&quot;\n\n&quot;repository&quot;: &quot;gist:11081aaa281&quot;\n\n&quot;repository&quot;: &quot;bitbucket:example/repo&quot;\n\n&quot;repository&quot;: &quot;gitlab:another/repo&quot;\n</code></pre><h2 id=\"scripts\"><a href=\"#scripts\" class=\"headerlink\" title=\"scripts\"></a>scripts</h2><p>“scripts” 字段包含项目的生命周期命令，是个 hash 对象。<br><code>key</code> 是生命周期事件，<code>value</code> 是执行的命令。</p>\n<p>详情查看 <code>npm-scripts(7)</code>.</p>\n<h2 id=\"config\"><a href=\"#config\" class=\"headerlink\" title=\"config\"></a>config</h2><p>A “config” object can be used to set configuration parameters used in package<br>scripts that persist across upgrades.  For instance, if a package had the<br>following:</p>\n<pre><code>{ &quot;name&quot; : &quot;foo&quot;\n, &quot;config&quot; : { &quot;port&quot; : &quot;8080&quot; } }\n</code></pre><p>and then had a “start” command that then referenced the<br><code>npm_package_config_port</code> environment variable, then the user could<br>override that by doing <code>npm config set foo:port 8001</code>.</p>\n<p>See <code>npm-config(7)</code> and <code>npm-scripts(7)</code> for more on package<br>configs.</p>\n<h2 id=\"dependencies\"><a href=\"#dependencies\" class=\"headerlink\" title=\"dependencies\"></a>dependencies</h2><p>“Dependencies” 表示这个项目的依赖，包括依赖的项目的名称，版本号。</p>\n<p><strong>Please do not put test harnesses or transpilers in your<br><code>dependencies</code> object.</strong>  See <code>devDependencies</code>, below.</p>\n<p>See semver(7) for more details about specifying version ranges.</p>\n<ul>\n<li><code>version</code> Must match <code>version</code> exactly</li>\n<li><code>&gt;version</code> Must be greater than <code>version</code></li>\n<li><code>&gt;=version</code> etc</li>\n<li><code>&lt;version</code></li>\n<li><code>&lt;=version</code></li>\n<li><code>~version</code> “Approximately equivalent to version”  See semver(7)</li>\n<li><code>^version</code> “Compatible with version”  See semver(7)</li>\n<li><code>1.2.x</code> 1.2.0, 1.2.1, etc., but not 1.3.0</li>\n<li><code>http://...</code> See ‘URLs as Dependencies’ below</li>\n<li><code>*</code> Matches any version</li>\n<li><code>&quot;&quot;</code> (just an empty string) Same as <code>*</code></li>\n<li><code>version1 - version2</code> Same as <code>&gt;=version1 &lt;=version2</code>.</li>\n<li><code>range1 || range2</code> Passes if either range1 or range2 are satisfied.</li>\n<li><code>git...</code> See ‘Git URLs as Dependencies’ below</li>\n<li><code>user/repo</code> See ‘GitHub URLs’ below</li>\n<li><code>tag</code> A specific version tagged and published as <code>tag</code>  See <code>npm-tag(1)</code></li>\n<li><code>path/path/path</code> See <a href=\"#local-paths\">Local Paths</a> below</li>\n</ul>\n<p>For example, these are all valid:</p>\n<pre><code>{ &quot;dependencies&quot; :\n  { &quot;foo&quot; : &quot;1.0.0 - 2.9999.9999&quot;\n  , &quot;bar&quot; : &quot;&gt;=1.0.2 &lt;2.1.2&quot;\n  , &quot;baz&quot; : &quot;&gt;1.0.2 &lt;=2.3.4&quot;\n  , &quot;boo&quot; : &quot;2.0.1&quot;\n  , &quot;qux&quot; : &quot;&lt;1.0.0 || &gt;=2.3.1 &lt;2.4.5 || &gt;=2.5.2 &lt;3.0.0&quot;\n  , &quot;asd&quot; : &quot;http://asdf.com/asdf.tar.gz&quot;\n  , &quot;til&quot; : &quot;~1.2&quot;\n  , &quot;elf&quot; : &quot;~1.2.3&quot;\n  , &quot;two&quot; : &quot;2.x&quot;\n  , &quot;thr&quot; : &quot;3.3.x&quot;\n  , &quot;lat&quot; : &quot;latest&quot;\n  , &quot;dyl&quot; : &quot;file:../dyl&quot;\n  }\n}\n</code></pre><h4 id=\"URLs-as-Dependencies\"><a href=\"#URLs-as-Dependencies\" class=\"headerlink\" title=\"URLs as Dependencies\"></a>URLs as Dependencies</h4><p>You may specify a tarball URL in place of a version range.</p>\n<p>This tarball will be downloaded and installed locally to your package at<br>install time.</p>\n<h4 id=\"Git-URLs-as-Dependencies\"><a href=\"#Git-URLs-as-Dependencies\" class=\"headerlink\" title=\"Git URLs as Dependencies\"></a>Git URLs as Dependencies</h4><p>Git urls can be of the form:</p>\n<pre><code>git://github.com/user/project.git#commit-ish\ngit+ssh://user@hostname:project.git#commit-ish\ngit+ssh://user@hostname/project.git#commit-ish\ngit+http://user@hostname/project/blah.git#commit-ish\ngit+https://user@hostname/project/blah.git#commit-ish\n</code></pre><p>The <code>commit-ish</code> can be any tag, sha, or branch which can be supplied as<br>an argument to <code>git checkout</code>.  The default is <code>master</code>.</p>\n<h2 id=\"GitHub-URLs\"><a href=\"#GitHub-URLs\" class=\"headerlink\" title=\"GitHub URLs\"></a>GitHub URLs</h2><p>As of version 1.1.65, you can refer to GitHub urls as just “foo”:<br>“user/foo-project”.  Just as with git URLs, a <code>commit-ish</code> suffix can be<br>included.  For example:</p>\n<pre><code>{\n  &quot;name&quot;: &quot;foo&quot;,\n  &quot;version&quot;: &quot;0.0.0&quot;,\n  &quot;dependencies&quot;: {\n    &quot;express&quot;: &quot;visionmedia/express&quot;,\n    &quot;mocha&quot;: &quot;visionmedia/mocha#4727d357ea&quot;\n  }\n}\n</code></pre><h2 id=\"Local-Paths\"><a href=\"#Local-Paths\" class=\"headerlink\" title=\"Local Paths\"></a>Local Paths</h2><p>As of version 2.0.0 you can provide a path to a local directory that contains a<br>package. Local paths can be saved using <code>npm install -S</code> or<br><code>npm install --save</code>, using any of these forms:</p>\n<pre><code>../foo/bar\n~/foo/bar\n./foo/bar\n/foo/bar\n</code></pre><p>in which case they will be normalized to a relative path and added to your<br><code>package.json</code>. For example:</p>\n<pre><code>{\n  &quot;name&quot;: &quot;baz&quot;,\n  &quot;dependencies&quot;: {\n    &quot;bar&quot;: &quot;file:../foo/bar&quot;\n  }\n}\n</code></pre><p>This feature is helpful for local offline development and creating<br>tests that require npm installing where you don’t want to hit an<br>external server, but should not be used when publishing packages<br>to the public registry.</p>\n<h2 id=\"devDependencies\"><a href=\"#devDependencies\" class=\"headerlink\" title=\"devDependencies\"></a>devDependencies</h2><p>“devDependencies” 开发环境的依赖。<br>别人使用你的模块，并不需要下载你的测试或者文档依赖。所以最好将你的开发依赖放在这个下面。</p>\n<p>这些依赖将会被安装，当执行 <code>npm link</code> 或者 <code>npm install</code>.<br>详情看 <code>npm-config(7)</code> .</p>\n<p>对于非特定平台的构建，例如使用 coffeescript 或者其他需要编译到 js 的语言，使用<br> <code>prepublish</code> 脚本去做，并把依赖的包配置到 “devDependency”.</p>\n<p>例如:</p>\n<pre><code>{ &quot;name&quot;: &quot;ethopia-waza&quot;,\n  &quot;description&quot;: &quot;a delightfully fruity coffee varietal&quot;,\n  &quot;version&quot;: &quot;1.2.3&quot;,\n  &quot;devDependencies&quot;: {\n    &quot;coffee-script&quot;: &quot;~1.6.3&quot;\n  },\n  &quot;scripts&quot;: {\n    &quot;prepublish&quot;: &quot;coffee -o lib/ -c src/waza.coffee&quot;\n  },\n  &quot;main&quot;: &quot;lib/waza.js&quot;\n}\n</code></pre><p><code>prepublish</code> 脚本会在 <code>publishing</code> 之前执行。<br>这样子用户就不需要去编译他们了。在本地你可以使用 <code>npm install</code> 安装这些依赖，可以轻松的得到测试。</p>\n<h2 id=\"peerDependencies\"><a href=\"#peerDependencies\" class=\"headerlink\" title=\"peerDependencies\"></a>peerDependencies</h2><p>In some cases, you want to express the compatibility of your package with a<br>host tool or library, while not necessarily doing a <code>require</code> of this host.<br>This is usually referred to as a <em>plugin</em>. Notably, your module may be exposing<br>a specific interface, expected and specified by the host documentation.</p>\n<p>For example:</p>\n<pre><code>{\n  &quot;name&quot;: &quot;tea-latte&quot;,\n  &quot;version&quot;: &quot;1.3.5&quot;,\n  &quot;peerDependencies&quot;: {\n    &quot;tea&quot;: &quot;2.x&quot;\n  }\n}\n</code></pre><p>This ensures your package <code>tea-latte</code> can be installed <em>along</em> with the second<br>major version of the host package <code>tea</code> only. <code>npm install tea-latte</code> could<br>possibly yield the following dependency graph:</p>\n<pre><code>├── tea-latte@1.3.5\n└── tea@2.2.0\n</code></pre><p><strong>NOTE: npm versions 1 and 2 will automatically install <code>peerDependencies</code> if<br>they are not explicitly depended upon higher in the dependency tree. In the<br>next major version of npm (npm@3), this will no longer be the case. You will<br>receive a warning that the peerDependency is not installed instead.</strong> The<br>behavior in npms 1 &amp; 2 was frequently confusing and could easily put you into<br>dependency hell, a situation that npm is designed to avoid as much as possible.</p>\n<p>Trying to install another plugin with a conflicting requirement will cause an<br>error. For this reason, make sure your plugin requirement is as broad as<br>possible, and not to lock it down to specific patch versions.</p>\n<p>Assuming the host complies with <a href=\"http://semver.org/\" target=\"_blank\" rel=\"external\">semver</a>, only changes in<br>the host package’s major version will break your plugin. Thus, if you’ve worked<br>with every 1.x version of the host package, use <code>&quot;^1.0&quot;</code> or <code>&quot;1.x&quot;</code> to express<br>this. If you depend on features introduced in 1.5.2, use <code>&quot;&gt;= 1.5.2 &lt; 2&quot;</code>.</p>\n<h2 id=\"bundledDependencies\"><a href=\"#bundledDependencies\" class=\"headerlink\" title=\"bundledDependencies\"></a>bundledDependencies</h2><p>This defines an array of package names that will be bundled when publishing<br>the package.</p>\n<p>In cases where you need to preserve npm packages locally or have them<br>available through a single file download, you can bundle the packages in a<br>tarball file by specifying the package names in the <code>bundledDependencies</code><br>array and executing <code>npm pack</code>.</p>\n<p>For example:</p>\n<p>If we define a package.json like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;: &quot;awesome-web-framework&quot;,</span><br><span class=\"line\">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class=\"line\">  &quot;bundledDependencies&quot;: [</span><br><span class=\"line\">    &apos;renderized&apos;, &apos;super-streams&apos;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>we can obtain <code>awesome-web-framework-1.0.0.tgz</code> file by running <code>npm pack</code>.<br>This file contains the dependencies <code>renderized</code> and <code>super-streams</code> which<br>can be installed in a new project by executing <code>npm install\nawesome-web-framework-1.0.0.tgz</code>.</p>\n<p>If this is spelled <code>&quot;bundleDependencies&quot;</code>, then that is also honored.</p>\n<h2 id=\"optionalDependencies\"><a href=\"#optionalDependencies\" class=\"headerlink\" title=\"optionalDependencies\"></a>optionalDependencies</h2><p>If a dependency can be used, but you would like npm to proceed if it cannot be<br>found or fails to install, then you may put it in the <code>optionalDependencies</code><br>object.  This is a map of package name to version or url, just like the<br><code>dependencies</code> object.  The difference is that build failures do not cause<br>installation to fail.</p>\n<p>It is still your program’s responsibility to handle the lack of the<br>dependency.  For example, something like this:</p>\n<pre><code>try {\n  var foo = require(&apos;foo&apos;)\n  var fooVersion = require(&apos;foo/package.json&apos;).version\n} catch (er) {\n  foo = null\n}\nif ( notGoodFooVersion(fooVersion) ) {\n  foo = null\n}\n\n// .. then later in your program ..\n\nif (foo) {\n  foo.doFooThings()\n}\n</code></pre><p>Entries in <code>optionalDependencies</code> will override entries of the same name in<br><code>dependencies</code>, so it’s usually best to only put in one place.</p>\n<h2 id=\"engines\"><a href=\"#engines\" class=\"headerlink\" title=\"engines\"></a>engines</h2><p>可以指定特殊的 <code>Node</code> 版本:</p>\n<pre><code>{ &quot;engines&quot; : { &quot;node&quot; : &quot;&gt;=0.10.3 &lt;0.12&quot; } }\n</code></pre><p>And, like with dependencies, if you don’t specify the version (or if you<br>specify “*“ as the version), then any version of node will do.</p>\n<p>If you specify an “engines” field, then npm will require that “node” be<br>somewhere on that list. If “engines” is omitted, then npm will just assume<br>that it works on node.</p>\n<p>You can also use the “engines” field to specify which versions of npm<br>are capable of properly installing your program.  For example:</p>\n<pre><code>{ &quot;engines&quot; : { &quot;npm&quot; : &quot;~1.0.20&quot; } }\n</code></pre><p>Unless the user has set the <code>engine-strict</code> config flag, this<br>field is advisory only will produce warnings when your package is installed as a dependency.</p>\n<h2 id=\"engineStrict\"><a href=\"#engineStrict\" class=\"headerlink\" title=\"engineStrict\"></a>engineStrict</h2><p><strong>This feature was removed in npm 3.0.0</strong></p>\n<p>Prior to npm 3.0.0, this feature was used to treat this package as if the<br>user had set <code>engine-strict</code>. It is no longer used.</p>\n<h2 id=\"os\"><a href=\"#os\" class=\"headerlink\" title=\"os\"></a>os</h2><p>你可以指定模块运行的系统:</p>\n<pre><code>&quot;os&quot; : [ &quot;darwin&quot;, &quot;linux&quot; ]\n</code></pre><p>你也可以使用黑名单来替代，只需要加 ‘!’ 来排除:</p>\n<pre><code>&quot;os&quot; : [ &quot;!win32&quot; ]\n</code></pre><p>The host operating system is determined by <code>process.platform</code></p>\n<p>It is allowed to both blacklist, and whitelist, although there isn’t any<br>good reason to do this.</p>\n<h2 id=\"cpu\"><a href=\"#cpu\" class=\"headerlink\" title=\"cpu\"></a>cpu</h2><p>If your code only runs on certain cpu architectures,<br>you can specify which ones.</p>\n<pre><code>&quot;cpu&quot; : [ &quot;x64&quot;, &quot;ia32&quot; ]\n</code></pre><p>Like the <code>os</code> option, you can also blacklist architectures:</p>\n<pre><code>&quot;cpu&quot; : [ &quot;!arm&quot;, &quot;!mips&quot; ]\n</code></pre><p>The host architecture is determined by <code>process.arch</code></p>\n<h2 id=\"preferGlobal\"><a href=\"#preferGlobal\" class=\"headerlink\" title=\"preferGlobal\"></a>preferGlobal</h2><p>如果你的包是主要是一个命令行应用，那应该被全局安装。你可以设置 <code>preferGlobal</code> 为 <code>true</code>, 来发出提醒，当被局部安装的时候。</p>\n<p>当然它不会强制组织用户局部安装，但是它可以帮助消除误会。</p>\n<h2 id=\"private\"><a href=\"#private\" class=\"headerlink\" title=\"private\"></a>private</h2><p>如果你在 <code>package.json</code> 中设置 <code>&quot;private&quot;: true</code>, <code>npm</code> 会阻止它被 <code>publish</code>.</p>\n<p>这是一个有效防止意外发布私有仓库的方式。</p>\n<p>如果你的包是要发布到指定的 <code>registry</code>(例如，公司内部搭建的 github), 你应该使用<br><code>publishConfig</code>。</p>\n<h2 id=\"publishConfig\"><a href=\"#publishConfig\" class=\"headerlink\" title=\"publishConfig\"></a>publishConfig</h2><p>This is a set of config values that will be used at publish-time. It’s<br>especially handy if you want to set the tag, registry or access, so that<br>you can ensure that a given package is not tagged with “latest”, published<br>to the global public registry or that a scoped module is private by default.</p>\n<p>Any config values can be overridden, but of course only “tag”, “registry” and<br>“access” probably matter for the purposes of publishing.</p>\n<p>See <code>npm-config(7)</code> to see the list of config options that can be<br>overridden.</p>\n<h2 id=\"DEFAULT-VALUES\"><a href=\"#DEFAULT-VALUES\" class=\"headerlink\" title=\"DEFAULT VALUES\"></a>DEFAULT VALUES</h2><p><code>npm</code> 默认的一些值.</p>\n<ul>\n<li><p><code>&quot;scripts&quot;: {&quot;start&quot;: &quot;node server.js&quot;}</code></p>\n<p>If there is a <code>server.js</code> file in the root of your package, then npm<br>will default the <code>start</code> command to <code>node server.js</code>.</p>\n</li>\n<li><p><code>&quot;scripts&quot;:{&quot;install&quot;: &quot;node-gyp rebuild&quot;}</code></p>\n<p>If there is a <code>binding.gyp</code> file in the root of your package and you have not defined an <code>install</code> or <code>preinstall</code> script, npm will<br>default the <code>install</code> command to compile using node-gyp.</p>\n</li>\n<li><p><code>&quot;contributors&quot;: [...]</code></p>\n<p>If there is an <code>AUTHORS</code> file in the root of your package, npm will<br>treat each line as a <code>Name &lt;email&gt; (url)</code> format, where email and url<br>are optional.  Lines which start with a <code>#</code> or are blank, will be<br>ignored.</p>\n</li>\n</ul>\n<h2 id=\"SEE-ALSO\"><a href=\"#SEE-ALSO\" class=\"headerlink\" title=\"SEE ALSO\"></a>SEE ALSO</h2><ul>\n<li><a href=\"https://docs.npmjs.com/misc/semver\" target=\"_blank\" rel=\"external\">semver(7)</a></li>\n<li><a href=\"https://docs.npmjs.com/cli/init\" target=\"_blank\" rel=\"external\">npm-init(1)</a></li>\n<li><a href=\"https://docs.npmjs.com/cli/version\" target=\"_blank\" rel=\"external\">npm-version(1)</a></li>\n<li><a href=\"https://docs.npmjs.com/cli/config\" target=\"_blank\" rel=\"external\">npm-config(1)</a></li>\n<li><a href=\"https://docs.npmjs.com/misc/config\" target=\"_blank\" rel=\"external\">npm-config(7)</a></li>\n<li><a href=\"https://docs.npmjs.com/cli/help\" target=\"_blank\" rel=\"external\">npm-help(1)</a></li>\n<li><a href=\"https://docs.npmjs.com/cli/install\" target=\"_blank\" rel=\"external\">npm-install(1)</a></li>\n<li><a href=\"https://docs.npmjs.com/cli/publish\" target=\"_blank\" rel=\"external\">npm-publish(1)</a></li>\n<li><a href=\"https://docs.npmjs.com/cli/uninstall\" target=\"_blank\" rel=\"external\">npm-uninstall(1)</a></li>\n</ul>\n","excerpt":"<p><code>npm</code> 文档翻译之 <code>package.json</code>, 原文链接 <a href=\"https://docs.npmjs.com/files/package.json\">https://docs.npmjs.com/files/package.json</a></p>\n<h1 id=\"package-json-5\"><a href=\"#package-json-5\" class=\"headerlink\" title=\"package.json(5)\"></a>package.json(5)</h1><h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><p>本文档包含所有的 <code>package.json</code> 文件配置说明。<code>package.json</code> 文件必须是真正的 <code>json</code> 对象，而不是 js 对象。</p>\n<p>本文档中描述的很多行为受到 <code>npm-config(7)</code> 配置文件的影响。</p>","more":"<h3 id=\"name\"><a href=\"#name\" class=\"headerlink\" title=\"name\"></a>name</h3><p>在 <code>package.json</code> 文件中最重要的配置就是 <code>name</code> 和 <code>version</code> 字段了。<br>如果没有这两个字段，讲无法被安装。<br><code>name</code> 和 <code>version</code> 组成唯一的标识，所以每次更新都应更新 <code>version</code> 字段。</p>\n<p><code>name</code> 就是你这个包(项目)的名字。</p>\n<p>遵循以下规则：</p>\n<ul>\n<li>名字长度必须小于等于214个字符，包括括号。</li>\n<li>名字不能以 <code>.</code> 和 <code>_</code> 开始。</li>\n<li>新的包名不应该含有大写字母。</li>\n<li>名字将会成为一段 <code>URL</code>， 命令行的参数 或者 一个文件名字，所以名字不应该包含任何 <code>non-URL-safe</code>的字符。</li>\n</ul>\n<p>一些注意点:</p>\n<ul>\n<li>不要使用 <code>Node</code> 的模块名</li>\n<li>不要在名字中使用 <code>js</code> 和 <code>node</code> 字段, 包含 <code>package.json</code> 文件的包，自动被认为是 <code>js</code> 文件。你可以在 <code>engines</code> 字段里，指定引擎(比如：<code>Node</code>), 参加下文说明。</li>\n<li>名字将会被用于 <code>require()</code> 参数, 因此名字应该短小易懂。</li>\n<li>在使用名字之前，应该先去 <a href=\"https://www.npmjs.com/\">https://www.npmjs.com/</a> 检查下是否已经被注册了</li>\n</ul>\n<p>可以在名字前加上 <code>scope</code> 前缀, 如：<code>@myorg/mypackage</code>. 具体查 <code>npm-scope(7)</code> 。</p>\n<h3 id=\"version\"><a href=\"#version\" class=\"headerlink\" title=\"version\"></a>version</h3><p>版本号必须能被 <a href=\"https://github.com/isaacs/node-semver\">node-semver</a> 解析， 它是 <code>npm</code> 的一个依赖包。(<code>npm install semver</code> to use it yourself.)</p>\n<p>更多关于版本号的说明查看 semver(7).</p>\n<h3 id=\"description\"><a href=\"#description\" class=\"headerlink\" title=\"description\"></a>description</h3><p>写一段关于这个包的描述，有助于帮助人们在搜索 <code>npm search</code> 结果中发现它。</p>\n<h3 id=\"keywords\"><a href=\"#keywords\" class=\"headerlink\" title=\"keywords\"></a>keywords</h3><p>关键字是一组字符串数组，有助于帮助人们在搜索 <code>npm search</code> 结果中发现它。</p>\n<h3 id=\"homepage\"><a href=\"#homepage\" class=\"headerlink\" title=\"homepage\"></a>homepage</h3><p>项目的首页地址</p>\n<h3 id=\"bugs\"><a href=\"#bugs\" class=\"headerlink\" title=\"bugs\"></a>bugs</h3><p>项目 bug 的反馈地址，或者邮件地址。<br>它应该是这个样子的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; &quot;url&quot; : &quot;https://github.com/owner/project/issues&quot;</span><br><span class=\"line\">  , &quot;email&quot; : &quot;project@hostname.com&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以提供地址或者邮件，或者只简单的提供字符串，而不需要如上的对象。</p>\n<p>如果提供了url，使用 <code>npm bugs</code> 命令可以打开。</p>\n<h3 id=\"license\"><a href=\"#license\" class=\"headerlink\" title=\"license\"></a>license</h3><p>你应该为你的项目指定 <code>license</code>，这样子，别人就知道使用这个项目的权限了。</p>\n<p>如果使用的是一些通用的 <code>license</code> ，如：<code>BSD-2-Clause</code>,<code>MIT</code>。<br>只需要如下添加：</p>\n<pre><code>`{ &quot;license&quot; : &quot;BSD-3-Clause&quot; }`\n</code></pre><p>查看所有的 <code>SPDX license</code> <a href=\"https://spdx.org/licenses/\">the full list of SPDX license IDs</a>.</p>\n<p>推荐从这里获取一个(开源项目)<br><a href=\"https://opensource.org/licenses/alphabetical\">OSI</a>.</p>\n<p>如果你的项目使用多种 <code>license</code> ，使用 <a href=\"https://npmjs.com/package/spdx\">SPDX license<br>expression syntax version 2.0 string</a>, 如下方式：</p>\n<pre><code>`{ &quot;license&quot; : &quot;(ISC OR GPL-3.0)&quot; }`\n</code></pre><p>如果你使用的 <code>license</code> 并不在 <code>SPDX</code> 中，或者你自定义了，可以如下使用：</p>\n<pre><code>`{ &quot;license&quot; : &quot;SEE LICENSE IN &lt;filename&gt;&quot; }`\n</code></pre><p><code>&lt;filename&gt;</code> 文件应在项目的根目录。</p>\n<p>一些老的项目，使用如下的格式：</p>\n<pre><code>// Not valid metadata\n{ &quot;license&quot; :\n  { &quot;type&quot; : &quot;ISC&quot;\n  , &quot;url&quot; : &quot;http://opensource.org/licenses/ISC&quot;\n  }\n}\n\n// Not valid metadata\n{ &quot;licenses&quot; :\n  [\n    { &quot;type&quot;: &quot;MIT&quot;\n    , &quot;url&quot;: &quot;http://www.opensource.org/licenses/mit-license.php&quot;\n    }\n  , { &quot;type&quot;: &quot;Apache-2.0&quot;\n    , &quot;url&quot;: &quot;http://opensource.org/licenses/apache2.0.php&quot;\n    }\n  ]\n}\n</code></pre><p>以上这些格式是被弃用的，应该使用 <code>SPDX</code> 格式， 如下：</p>\n<pre><code>{ &quot;license&quot;: &quot;ISC&quot; }\n\n{ &quot;license&quot;: &quot;(MIT OR Apache-2.0)&quot; }\n</code></pre><p>最终，如果你不希望授予别人使用的权力，使用如下：</p>\n<pre><code>{ &quot;license&quot;: &quot;UNLICENSED&quot;}\n</code></pre><p>应该考虑设置字段 <code>&quot;private&quot;: true</code> 来阻止被意外 <code>publish</code>.</p>\n<h3 id=\"people-fields-author-contributors\"><a href=\"#people-fields-author-contributors\" class=\"headerlink\" title=\"people fields: author, contributors\"></a>people fields: author, contributors</h3><p>“author” 是一个 <code>person</code> 对象，<br>“contributors” 是一个 <code>person</code> 对象数组。<br>“person” 是一个包含 “name”, “url”, “email” 的对象：</p>\n<pre><code>{ &quot;name&quot; : &quot;Barney Rubble&quot;\n, &quot;email&quot; : &quot;b@rubble.com&quot;\n, &quot;url&quot; : &quot;http://barnyrubble.tumblr.com/&quot;\n}\n</code></pre><p>或者你可以使用如下简单字符串：</p>\n<pre><code>&quot;Barney Rubble &lt;b@rubble.com&gt; (http://barnyrubble.tumblr.com/)&quot;\n</code></pre><p>“email” 和 “url” 是可选的。</p>\n<p><code>npm</code> 同样有 “maintainers” 字段来设置你的用户信息。</p>\n<h3 id=\"files\"><a href=\"#files\" class=\"headerlink\" title=\"files\"></a>files</h3><p>“files” 字段是一个包含你项目文件的数组。<br>如果使用了文件夹，那么该文件夹下的文件将被包含(除非被其他规则忽略)。</p>\n<p>你也可以在根目录创建 <code>.npmignore</code> 文件，来忽略某些文件。就像 <code>.gitignore</code>.</p>\n<p>以下文件总是被包含在内：</p>\n<ul>\n<li><code>package.json</code></li>\n<li><code>README</code></li>\n<li><code>CHANGES</code> / <code>CHANGELOG</code> / <code>HISTORY</code></li>\n<li><code>LICENSE</code> / <code>LICENCE</code></li>\n<li>“main” 字段指定的文件</li>\n</ul>\n<p><code>README</code>, <code>CHANGES</code> &amp; <code>LICENSE</code> 可以是任何文件.</p>\n<p>相反, 下文件应该被忽略:</p>\n<ul>\n<li><code>.git</code></li>\n<li><code>CVS</code></li>\n<li><code>.svn</code></li>\n<li><code>.hg</code></li>\n<li><code>.lock-wscript</code></li>\n<li><code>.wafpickle-N</code></li>\n<li><code>.*.swp</code></li>\n<li><code>.DS_Store</code></li>\n<li><code>._*</code></li>\n<li><code>npm-debug.log</code></li>\n<li><code>.npmrc</code></li>\n<li><code>node_modules</code></li>\n</ul>\n<h3 id=\"main\"><a href=\"#main\" class=\"headerlink\" title=\"main\"></a>main</h3><p><code>main</code> 字段指定你程序的入口模块。<br>也就是说，如果你的包名是 <code>foo</code>, 一个用户安装了它, 并且<br><code>require(&quot;foo&quot;)</code>, 然后你的 <code>main</code> 指定的文件，应该 <code>exports</code> 相应的模块。</p>\n<p>这应该是一个相对于项目根目录的文件地址。</p>\n<h3 id=\"bin\"><a href=\"#bin\" class=\"headerlink\" title=\"bin\"></a>bin</h3><p>很多包都有一个或多个可执行文件被安装到 <code>PATH</code>。<code>npm</code> 可以很容易的实现这点(实际上，npm 就是使用的这个功能)。</p>\n<p>使用该功能，需要在 <code>package.json</code> 中配置 <code>bin</code> 字段。安装时，<code>npm</code> 会自动建立起链接，全局安装被链接到 <code>prefix/bin</code> 目录, 局部安装的会被链接到 <code>./node_modules/.bin/</code> 目录。</p>\n<p>举个例子:</p>\n<pre><code>{ &quot;bin&quot; : { &quot;myapp&quot; : &quot;./cli.js&quot; } }\n</code></pre><p>当你安装时，将会创建一个链接，将 <code>cli.js</code> 链接到 <code>/usr/local/bin/myapp</code>。</p>\n<p>如果你只有一个可执行命令，那么它的名字应该是包名，这样子你只需要使用字符串来调用。<br>如：</p>\n<pre><code>{ &quot;name&quot;: &quot;my-program&quot;\n, &quot;version&quot;: &quot;1.2.5&quot;\n, &quot;bin&quot;: &quot;./path/to/program&quot; }\n</code></pre><p>等同于:</p>\n<pre><code>{ &quot;name&quot;: &quot;my-program&quot;\n, &quot;version&quot;: &quot;1.2.5&quot;\n, &quot;bin&quot; : { &quot;my-program&quot; : &quot;./path/to/program&quot; } }\n</code></pre><h3 id=\"man\"><a href=\"#man\" class=\"headerlink\" title=\"man\"></a>man</h3><p>指定一个文件或者文件数组供 <code>man</code> 程序使用。</p>\n<p>如果只提供了一个单一文件，那么安装之后，只需要 <code>man &lt;pkgname&gt;</code>.  </p>\n<p>例如:</p>\n<pre><code>{ &quot;name&quot; : &quot;foo&quot;\n, &quot;version&quot; : &quot;1.2.3&quot;\n, &quot;description&quot; : &quot;A packaged foo fooer for fooing foos&quot;\n, &quot;main&quot; : &quot;foo.js&quot;\n, &quot;man&quot; : &quot;./man/doc.1&quot;\n}\n</code></pre><p>以上 <code>man foo</code> 将会链接到 <code>./man/doc.1</code>。</p>\n<p>如果文件名不是以包名开头，将会被自动加上前缀。<br>像这样:</p>\n<pre><code>{ &quot;name&quot; : &quot;foo&quot;\n, &quot;version&quot; : &quot;1.2.3&quot;\n, &quot;description&quot; : &quot;A packaged foo fooer for fooing foos&quot;\n, &quot;main&quot; : &quot;foo.js&quot;\n, &quot;man&quot; : [ &quot;./man/foo.1&quot;, &quot;./man/bar.1&quot; ]\n}\n</code></pre><p>将会为 <code>man foo</code> 和 <code>man foo-bar</code> 创建文件。</p>\n<p><code>Man</code> 文件必须以数字结束，如果是压缩文件可以是 <code>.gz</code> 为后缀。</p>\n<p>数字决定 <code>man</code> 哪个文件</p>\n<pre><code>{ &quot;name&quot; : &quot;foo&quot;\n, &quot;version&quot; : &quot;1.2.3&quot;\n, &quot;description&quot; : &quot;A packaged foo fooer for fooing foos&quot;\n, &quot;main&quot; : &quot;foo.js&quot;\n, &quot;man&quot; : [ &quot;./man/foo.1&quot;, &quot;./man/foo.2&quot; ]\n}\n</code></pre><p>以上将会创建 <code>man foo</code> 和 <code>man 2 foo</code></p>\n<h3 id=\"directories\"><a href=\"#directories\" class=\"headerlink\" title=\"directories\"></a>directories</h3><p>CommonJS <a href=\"http://wiki.commonjs.org/wiki/Packages/1.0\">Packages</a><br>说明了几种方式使用 <code>directories</code> 对象指明你的项目结构。</p>\n<p>你可以在 <a href=\"https://registry.npmjs.org/npm/latest\">npm’s package.json</a>,<br>看到 <code>directories</code> 字段指定了 doc, lib, man.</p>\n<p>在未来，这些信息将会有其他创造性的方式。</p>\n<h4 id=\"directories-lib\"><a href=\"#directories-lib\" class=\"headerlink\" title=\"directories.lib\"></a>directories.lib</h4><p>Tell people where the bulk of your library is.  Nothing special is done<br>with the lib folder in any way, but it’s useful meta info.</p>\n<h4 id=\"directories-bin\"><a href=\"#directories-bin\" class=\"headerlink\" title=\"directories.bin\"></a>directories.bin</h4><p>If you specify a <code>bin</code> directory in <code>directories.bin</code>, all the files in<br>that folder will be added.</p>\n<p>Because of the way the <code>bin</code> directive works, specifying both a<br><code>bin</code> path and setting <code>directories.bin</code> is an error. If you want to<br>specify individual files, use <code>bin</code>, and for all the files in an<br>existing <code>bin</code> directory, use <code>directories.bin</code>.</p>\n<h4 id=\"directories-man\"><a href=\"#directories-man\" class=\"headerlink\" title=\"directories.man\"></a>directories.man</h4><p>A folder that is full of man pages.  Sugar to generate a “man” array by<br>walking the folder.</p>\n<h4 id=\"directories-doc\"><a href=\"#directories-doc\" class=\"headerlink\" title=\"directories.doc\"></a>directories.doc</h4><p>Put markdown files in here.  Eventually, these will be displayed nicely,<br>maybe, someday.</p>\n<h4 id=\"directories-example\"><a href=\"#directories-example\" class=\"headerlink\" title=\"directories.example\"></a>directories.example</h4><p>Put example scripts in here.  Someday, it might be exposed in some clever way.</p>\n<h4 id=\"directories-test\"><a href=\"#directories-test\" class=\"headerlink\" title=\"directories.test\"></a>directories.test</h4><p>Put your tests in here. It is currently not exposed, but it might be in the<br>future.</p>\n<h2 id=\"repository\"><a href=\"#repository\" class=\"headerlink\" title=\"repository\"></a>repository</h2><p>指定你源代码的地址，这有助于别人提供贡献。如果提供的仓库地址是在 <code>GitHub</code> 上，<code>npm docs</code> 命令将会打开你的项目地址。</p>\n<p>像这样:</p>\n<pre><code>&quot;repository&quot; :\n  { &quot;type&quot; : &quot;git&quot;\n  , &quot;url&quot; : &quot;https://github.com/npm/npm.git&quot;\n  }\n\n&quot;repository&quot; :\n  { &quot;type&quot; : &quot;svn&quot;\n  , &quot;url&quot; : &quot;https://v8.googlecode.com/svn/trunk/&quot;\n  }\n</code></pre><p>地址应该是公开的，能直接被 <code>VCS program</code> 读取。</p>\n<p>For GitHub, GitHub gist, Bitbucket, or GitLab repositories you can use the same<br>shortcut syntax you use for <code>npm install</code>:</p>\n<pre><code>&quot;repository&quot;: &quot;npm/npm&quot;\n\n&quot;repository&quot;: &quot;gist:11081aaa281&quot;\n\n&quot;repository&quot;: &quot;bitbucket:example/repo&quot;\n\n&quot;repository&quot;: &quot;gitlab:another/repo&quot;\n</code></pre><h2 id=\"scripts\"><a href=\"#scripts\" class=\"headerlink\" title=\"scripts\"></a>scripts</h2><p>“scripts” 字段包含项目的生命周期命令，是个 hash 对象。<br><code>key</code> 是生命周期事件，<code>value</code> 是执行的命令。</p>\n<p>详情查看 <code>npm-scripts(7)</code>.</p>\n<h2 id=\"config\"><a href=\"#config\" class=\"headerlink\" title=\"config\"></a>config</h2><p>A “config” object can be used to set configuration parameters used in package<br>scripts that persist across upgrades.  For instance, if a package had the<br>following:</p>\n<pre><code>{ &quot;name&quot; : &quot;foo&quot;\n, &quot;config&quot; : { &quot;port&quot; : &quot;8080&quot; } }\n</code></pre><p>and then had a “start” command that then referenced the<br><code>npm_package_config_port</code> environment variable, then the user could<br>override that by doing <code>npm config set foo:port 8001</code>.</p>\n<p>See <code>npm-config(7)</code> and <code>npm-scripts(7)</code> for more on package<br>configs.</p>\n<h2 id=\"dependencies\"><a href=\"#dependencies\" class=\"headerlink\" title=\"dependencies\"></a>dependencies</h2><p>“Dependencies” 表示这个项目的依赖，包括依赖的项目的名称，版本号。</p>\n<p><strong>Please do not put test harnesses or transpilers in your<br><code>dependencies</code> object.</strong>  See <code>devDependencies</code>, below.</p>\n<p>See semver(7) for more details about specifying version ranges.</p>\n<ul>\n<li><code>version</code> Must match <code>version</code> exactly</li>\n<li><code>&gt;version</code> Must be greater than <code>version</code></li>\n<li><code>&gt;=version</code> etc</li>\n<li><code>&lt;version</code></li>\n<li><code>&lt;=version</code></li>\n<li><code>~version</code> “Approximately equivalent to version”  See semver(7)</li>\n<li><code>^version</code> “Compatible with version”  See semver(7)</li>\n<li><code>1.2.x</code> 1.2.0, 1.2.1, etc., but not 1.3.0</li>\n<li><code>http://...</code> See ‘URLs as Dependencies’ below</li>\n<li><code>*</code> Matches any version</li>\n<li><code>&quot;&quot;</code> (just an empty string) Same as <code>*</code></li>\n<li><code>version1 - version2</code> Same as <code>&gt;=version1 &lt;=version2</code>.</li>\n<li><code>range1 || range2</code> Passes if either range1 or range2 are satisfied.</li>\n<li><code>git...</code> See ‘Git URLs as Dependencies’ below</li>\n<li><code>user/repo</code> See ‘GitHub URLs’ below</li>\n<li><code>tag</code> A specific version tagged and published as <code>tag</code>  See <code>npm-tag(1)</code></li>\n<li><code>path/path/path</code> See <a href=\"#local-paths\">Local Paths</a> below</li>\n</ul>\n<p>For example, these are all valid:</p>\n<pre><code>{ &quot;dependencies&quot; :\n  { &quot;foo&quot; : &quot;1.0.0 - 2.9999.9999&quot;\n  , &quot;bar&quot; : &quot;&gt;=1.0.2 &lt;2.1.2&quot;\n  , &quot;baz&quot; : &quot;&gt;1.0.2 &lt;=2.3.4&quot;\n  , &quot;boo&quot; : &quot;2.0.1&quot;\n  , &quot;qux&quot; : &quot;&lt;1.0.0 || &gt;=2.3.1 &lt;2.4.5 || &gt;=2.5.2 &lt;3.0.0&quot;\n  , &quot;asd&quot; : &quot;http://asdf.com/asdf.tar.gz&quot;\n  , &quot;til&quot; : &quot;~1.2&quot;\n  , &quot;elf&quot; : &quot;~1.2.3&quot;\n  , &quot;two&quot; : &quot;2.x&quot;\n  , &quot;thr&quot; : &quot;3.3.x&quot;\n  , &quot;lat&quot; : &quot;latest&quot;\n  , &quot;dyl&quot; : &quot;file:../dyl&quot;\n  }\n}\n</code></pre><h4 id=\"URLs-as-Dependencies\"><a href=\"#URLs-as-Dependencies\" class=\"headerlink\" title=\"URLs as Dependencies\"></a>URLs as Dependencies</h4><p>You may specify a tarball URL in place of a version range.</p>\n<p>This tarball will be downloaded and installed locally to your package at<br>install time.</p>\n<h4 id=\"Git-URLs-as-Dependencies\"><a href=\"#Git-URLs-as-Dependencies\" class=\"headerlink\" title=\"Git URLs as Dependencies\"></a>Git URLs as Dependencies</h4><p>Git urls can be of the form:</p>\n<pre><code>git://github.com/user/project.git#commit-ish\ngit+ssh://user@hostname:project.git#commit-ish\ngit+ssh://user@hostname/project.git#commit-ish\ngit+http://user@hostname/project/blah.git#commit-ish\ngit+https://user@hostname/project/blah.git#commit-ish\n</code></pre><p>The <code>commit-ish</code> can be any tag, sha, or branch which can be supplied as<br>an argument to <code>git checkout</code>.  The default is <code>master</code>.</p>\n<h2 id=\"GitHub-URLs\"><a href=\"#GitHub-URLs\" class=\"headerlink\" title=\"GitHub URLs\"></a>GitHub URLs</h2><p>As of version 1.1.65, you can refer to GitHub urls as just “foo”:<br>“user/foo-project”.  Just as with git URLs, a <code>commit-ish</code> suffix can be<br>included.  For example:</p>\n<pre><code>{\n  &quot;name&quot;: &quot;foo&quot;,\n  &quot;version&quot;: &quot;0.0.0&quot;,\n  &quot;dependencies&quot;: {\n    &quot;express&quot;: &quot;visionmedia/express&quot;,\n    &quot;mocha&quot;: &quot;visionmedia/mocha#4727d357ea&quot;\n  }\n}\n</code></pre><h2 id=\"Local-Paths\"><a href=\"#Local-Paths\" class=\"headerlink\" title=\"Local Paths\"></a>Local Paths</h2><p>As of version 2.0.0 you can provide a path to a local directory that contains a<br>package. Local paths can be saved using <code>npm install -S</code> or<br><code>npm install --save</code>, using any of these forms:</p>\n<pre><code>../foo/bar\n~/foo/bar\n./foo/bar\n/foo/bar\n</code></pre><p>in which case they will be normalized to a relative path and added to your<br><code>package.json</code>. For example:</p>\n<pre><code>{\n  &quot;name&quot;: &quot;baz&quot;,\n  &quot;dependencies&quot;: {\n    &quot;bar&quot;: &quot;file:../foo/bar&quot;\n  }\n}\n</code></pre><p>This feature is helpful for local offline development and creating<br>tests that require npm installing where you don’t want to hit an<br>external server, but should not be used when publishing packages<br>to the public registry.</p>\n<h2 id=\"devDependencies\"><a href=\"#devDependencies\" class=\"headerlink\" title=\"devDependencies\"></a>devDependencies</h2><p>“devDependencies” 开发环境的依赖。<br>别人使用你的模块，并不需要下载你的测试或者文档依赖。所以最好将你的开发依赖放在这个下面。</p>\n<p>这些依赖将会被安装，当执行 <code>npm link</code> 或者 <code>npm install</code>.<br>详情看 <code>npm-config(7)</code> .</p>\n<p>对于非特定平台的构建，例如使用 coffeescript 或者其他需要编译到 js 的语言，使用<br> <code>prepublish</code> 脚本去做，并把依赖的包配置到 “devDependency”.</p>\n<p>例如:</p>\n<pre><code>{ &quot;name&quot;: &quot;ethopia-waza&quot;,\n  &quot;description&quot;: &quot;a delightfully fruity coffee varietal&quot;,\n  &quot;version&quot;: &quot;1.2.3&quot;,\n  &quot;devDependencies&quot;: {\n    &quot;coffee-script&quot;: &quot;~1.6.3&quot;\n  },\n  &quot;scripts&quot;: {\n    &quot;prepublish&quot;: &quot;coffee -o lib/ -c src/waza.coffee&quot;\n  },\n  &quot;main&quot;: &quot;lib/waza.js&quot;\n}\n</code></pre><p><code>prepublish</code> 脚本会在 <code>publishing</code> 之前执行。<br>这样子用户就不需要去编译他们了。在本地你可以使用 <code>npm install</code> 安装这些依赖，可以轻松的得到测试。</p>\n<h2 id=\"peerDependencies\"><a href=\"#peerDependencies\" class=\"headerlink\" title=\"peerDependencies\"></a>peerDependencies</h2><p>In some cases, you want to express the compatibility of your package with a<br>host tool or library, while not necessarily doing a <code>require</code> of this host.<br>This is usually referred to as a <em>plugin</em>. Notably, your module may be exposing<br>a specific interface, expected and specified by the host documentation.</p>\n<p>For example:</p>\n<pre><code>{\n  &quot;name&quot;: &quot;tea-latte&quot;,\n  &quot;version&quot;: &quot;1.3.5&quot;,\n  &quot;peerDependencies&quot;: {\n    &quot;tea&quot;: &quot;2.x&quot;\n  }\n}\n</code></pre><p>This ensures your package <code>tea-latte</code> can be installed <em>along</em> with the second<br>major version of the host package <code>tea</code> only. <code>npm install tea-latte</code> could<br>possibly yield the following dependency graph:</p>\n<pre><code>├── tea-latte@1.3.5\n└── tea@2.2.0\n</code></pre><p><strong>NOTE: npm versions 1 and 2 will automatically install <code>peerDependencies</code> if<br>they are not explicitly depended upon higher in the dependency tree. In the<br>next major version of npm (npm@3), this will no longer be the case. You will<br>receive a warning that the peerDependency is not installed instead.</strong> The<br>behavior in npms 1 &amp; 2 was frequently confusing and could easily put you into<br>dependency hell, a situation that npm is designed to avoid as much as possible.</p>\n<p>Trying to install another plugin with a conflicting requirement will cause an<br>error. For this reason, make sure your plugin requirement is as broad as<br>possible, and not to lock it down to specific patch versions.</p>\n<p>Assuming the host complies with <a href=\"http://semver.org/\">semver</a>, only changes in<br>the host package’s major version will break your plugin. Thus, if you’ve worked<br>with every 1.x version of the host package, use <code>&quot;^1.0&quot;</code> or <code>&quot;1.x&quot;</code> to express<br>this. If you depend on features introduced in 1.5.2, use <code>&quot;&gt;= 1.5.2 &lt; 2&quot;</code>.</p>\n<h2 id=\"bundledDependencies\"><a href=\"#bundledDependencies\" class=\"headerlink\" title=\"bundledDependencies\"></a>bundledDependencies</h2><p>This defines an array of package names that will be bundled when publishing<br>the package.</p>\n<p>In cases where you need to preserve npm packages locally or have them<br>available through a single file download, you can bundle the packages in a<br>tarball file by specifying the package names in the <code>bundledDependencies</code><br>array and executing <code>npm pack</code>.</p>\n<p>For example:</p>\n<p>If we define a package.json like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;: &quot;awesome-web-framework&quot;,</span><br><span class=\"line\">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class=\"line\">  &quot;bundledDependencies&quot;: [</span><br><span class=\"line\">    &apos;renderized&apos;, &apos;super-streams&apos;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>we can obtain <code>awesome-web-framework-1.0.0.tgz</code> file by running <code>npm pack</code>.<br>This file contains the dependencies <code>renderized</code> and <code>super-streams</code> which<br>can be installed in a new project by executing <code>npm install\nawesome-web-framework-1.0.0.tgz</code>.</p>\n<p>If this is spelled <code>&quot;bundleDependencies&quot;</code>, then that is also honored.</p>\n<h2 id=\"optionalDependencies\"><a href=\"#optionalDependencies\" class=\"headerlink\" title=\"optionalDependencies\"></a>optionalDependencies</h2><p>If a dependency can be used, but you would like npm to proceed if it cannot be<br>found or fails to install, then you may put it in the <code>optionalDependencies</code><br>object.  This is a map of package name to version or url, just like the<br><code>dependencies</code> object.  The difference is that build failures do not cause<br>installation to fail.</p>\n<p>It is still your program’s responsibility to handle the lack of the<br>dependency.  For example, something like this:</p>\n<pre><code>try {\n  var foo = require(&apos;foo&apos;)\n  var fooVersion = require(&apos;foo/package.json&apos;).version\n} catch (er) {\n  foo = null\n}\nif ( notGoodFooVersion(fooVersion) ) {\n  foo = null\n}\n\n// .. then later in your program ..\n\nif (foo) {\n  foo.doFooThings()\n}\n</code></pre><p>Entries in <code>optionalDependencies</code> will override entries of the same name in<br><code>dependencies</code>, so it’s usually best to only put in one place.</p>\n<h2 id=\"engines\"><a href=\"#engines\" class=\"headerlink\" title=\"engines\"></a>engines</h2><p>可以指定特殊的 <code>Node</code> 版本:</p>\n<pre><code>{ &quot;engines&quot; : { &quot;node&quot; : &quot;&gt;=0.10.3 &lt;0.12&quot; } }\n</code></pre><p>And, like with dependencies, if you don’t specify the version (or if you<br>specify “*“ as the version), then any version of node will do.</p>\n<p>If you specify an “engines” field, then npm will require that “node” be<br>somewhere on that list. If “engines” is omitted, then npm will just assume<br>that it works on node.</p>\n<p>You can also use the “engines” field to specify which versions of npm<br>are capable of properly installing your program.  For example:</p>\n<pre><code>{ &quot;engines&quot; : { &quot;npm&quot; : &quot;~1.0.20&quot; } }\n</code></pre><p>Unless the user has set the <code>engine-strict</code> config flag, this<br>field is advisory only will produce warnings when your package is installed as a dependency.</p>\n<h2 id=\"engineStrict\"><a href=\"#engineStrict\" class=\"headerlink\" title=\"engineStrict\"></a>engineStrict</h2><p><strong>This feature was removed in npm 3.0.0</strong></p>\n<p>Prior to npm 3.0.0, this feature was used to treat this package as if the<br>user had set <code>engine-strict</code>. It is no longer used.</p>\n<h2 id=\"os\"><a href=\"#os\" class=\"headerlink\" title=\"os\"></a>os</h2><p>你可以指定模块运行的系统:</p>\n<pre><code>&quot;os&quot; : [ &quot;darwin&quot;, &quot;linux&quot; ]\n</code></pre><p>你也可以使用黑名单来替代，只需要加 ‘!’ 来排除:</p>\n<pre><code>&quot;os&quot; : [ &quot;!win32&quot; ]\n</code></pre><p>The host operating system is determined by <code>process.platform</code></p>\n<p>It is allowed to both blacklist, and whitelist, although there isn’t any<br>good reason to do this.</p>\n<h2 id=\"cpu\"><a href=\"#cpu\" class=\"headerlink\" title=\"cpu\"></a>cpu</h2><p>If your code only runs on certain cpu architectures,<br>you can specify which ones.</p>\n<pre><code>&quot;cpu&quot; : [ &quot;x64&quot;, &quot;ia32&quot; ]\n</code></pre><p>Like the <code>os</code> option, you can also blacklist architectures:</p>\n<pre><code>&quot;cpu&quot; : [ &quot;!arm&quot;, &quot;!mips&quot; ]\n</code></pre><p>The host architecture is determined by <code>process.arch</code></p>\n<h2 id=\"preferGlobal\"><a href=\"#preferGlobal\" class=\"headerlink\" title=\"preferGlobal\"></a>preferGlobal</h2><p>如果你的包是主要是一个命令行应用，那应该被全局安装。你可以设置 <code>preferGlobal</code> 为 <code>true</code>, 来发出提醒，当被局部安装的时候。</p>\n<p>当然它不会强制组织用户局部安装，但是它可以帮助消除误会。</p>\n<h2 id=\"private\"><a href=\"#private\" class=\"headerlink\" title=\"private\"></a>private</h2><p>如果你在 <code>package.json</code> 中设置 <code>&quot;private&quot;: true</code>, <code>npm</code> 会阻止它被 <code>publish</code>.</p>\n<p>这是一个有效防止意外发布私有仓库的方式。</p>\n<p>如果你的包是要发布到指定的 <code>registry</code>(例如，公司内部搭建的 github), 你应该使用<br><code>publishConfig</code>。</p>\n<h2 id=\"publishConfig\"><a href=\"#publishConfig\" class=\"headerlink\" title=\"publishConfig\"></a>publishConfig</h2><p>This is a set of config values that will be used at publish-time. It’s<br>especially handy if you want to set the tag, registry or access, so that<br>you can ensure that a given package is not tagged with “latest”, published<br>to the global public registry or that a scoped module is private by default.</p>\n<p>Any config values can be overridden, but of course only “tag”, “registry” and<br>“access” probably matter for the purposes of publishing.</p>\n<p>See <code>npm-config(7)</code> to see the list of config options that can be<br>overridden.</p>\n<h2 id=\"DEFAULT-VALUES\"><a href=\"#DEFAULT-VALUES\" class=\"headerlink\" title=\"DEFAULT VALUES\"></a>DEFAULT VALUES</h2><p><code>npm</code> 默认的一些值.</p>\n<ul>\n<li><p><code>&quot;scripts&quot;: {&quot;start&quot;: &quot;node server.js&quot;}</code></p>\n<p>If there is a <code>server.js</code> file in the root of your package, then npm<br>will default the <code>start</code> command to <code>node server.js</code>.</p>\n</li>\n<li><p><code>&quot;scripts&quot;:{&quot;install&quot;: &quot;node-gyp rebuild&quot;}</code></p>\n<p>If there is a <code>binding.gyp</code> file in the root of your package and you have not defined an <code>install</code> or <code>preinstall</code> script, npm will<br>default the <code>install</code> command to compile using node-gyp.</p>\n</li>\n<li><p><code>&quot;contributors&quot;: [...]</code></p>\n<p>If there is an <code>AUTHORS</code> file in the root of your package, npm will<br>treat each line as a <code>Name &lt;email&gt; (url)</code> format, where email and url<br>are optional.  Lines which start with a <code>#</code> or are blank, will be<br>ignored.</p>\n</li>\n</ul>\n<h2 id=\"SEE-ALSO\"><a href=\"#SEE-ALSO\" class=\"headerlink\" title=\"SEE ALSO\"></a>SEE ALSO</h2><ul>\n<li><a href=\"https://docs.npmjs.com/misc/semver\">semver(7)</a></li>\n<li><a href=\"https://docs.npmjs.com/cli/init\">npm-init(1)</a></li>\n<li><a href=\"https://docs.npmjs.com/cli/version\">npm-version(1)</a></li>\n<li><a href=\"https://docs.npmjs.com/cli/config\">npm-config(1)</a></li>\n<li><a href=\"https://docs.npmjs.com/misc/config\">npm-config(7)</a></li>\n<li><a href=\"https://docs.npmjs.com/cli/help\">npm-help(1)</a></li>\n<li><a href=\"https://docs.npmjs.com/cli/install\">npm-install(1)</a></li>\n<li><a href=\"https://docs.npmjs.com/cli/publish\">npm-publish(1)</a></li>\n<li><a href=\"https://docs.npmjs.com/cli/uninstall\">npm-uninstall(1)</a></li>\n</ul>"},{"title":"在 Electron 中使用模块热替换","date":"2016-06-06T03:45:22.000Z","_content":"\n{% asset_img erb.png %}\n\n\n`Electron` + `React` + `Webpack` 这个组合开发桌面应用还是挺爽的。\n\n如果再搭上 `Webpack` 的 [Hot Module Replacement](http://webpack.github.io/docs/hot-module-replacement.html) 那简直完美，不用刷新就搞定。\n\n关于 `HMR` 的演示可以看 Dan Abramov 的演讲视频 [Hot Reloading with Time Travel](https://www.youtube.com/watch?v=xsSnOQynTHs)。\n\n在 `Electron` 中使用 `HMR` 碰到的主要问题是打开的文件是本地的，所以监听到的 `host` 就变成了 `file://`，然后 `Webpack` 根本无法找到更新了的模块...\n\n<!-- more -->\n\n{% asset_img hmr-error.png %}\n\n当时这个问题搞疯了我，花了很长时间，所以这篇就是为了记录下当时的坑。\n\n上图出现的情况，当时用的配置就是使用的比较官方的方式, 使用 `webpack-dev-server` 和 `react-hot-loader`。\n\n```js\nimport path from 'path'\nimport webpack from 'webpack'\n\nmodule.exports = {\n  devtool: 'eval',\n  entry: [\n    'webpack-dev-server/client?http://localhost:3000',\n    'webpack/hot/only-dev-server',\n    './src/index'\n  ],\n  output: {\n    path: path.join(__dirname, 'dist'),\n    filename: 'bundle.js',\n    publicPath: '/static/'\n  },\n  plugins: [\n    new webpack.HotModuleReplacementPlugin()\n  ],\n  module: {\n    loaders: [{\n      test: /\\.js$/,\n      loaders: ['react-hot', 'babel'],\n      include: path.join(__dirname, 'src')\n    }]\n  }\n}\n```\n\n然后换成 [React Hot Loader 3](https://github.com/gaearon/react-hot-loader/pull/240) 试了一下，果然不出所料，还是没能成功。\n\n本来问题就是出在 `webpack-dev-server` 上嘛，所以就把精力集中在替换 `webpack-dev-server` 上了。\n\n找到目标就是干，自己用 `express` + `webpack-dev-middleware` + `webpack-hot-middleware` 自己搭建服务。\n\n```js\n'use strict'\n\nimport express from 'express'\nimport webpack from 'webpack'\nimport webpackDevMiddleware from 'webpack-dev-middleware'\nimport webpackHotMiddleware from 'webpack-hot-middleware'\n\nimport config from './webpack.config.dev'\n\nconst app = express()\nconst compiler = webpack(config)\nconst PORT = 3000\n\napp.use(webpackDevMiddleware(compiler, {\n  publicPath: config.output.publicPath,\n  noInfo: false,\n  reload: true,\n  stats: {\n    colors: true\n  }\n}))\n\n// hot\napp.use(webpackHotMiddleware(compiler))\n\napp.listen(PORT, 'localhost', (err) => {\n  if (err) {\n    console.error(err)\n    return\n  }\n  console.log(`Listening at http://localhost:${PORT}`)\n})\n\n```\n\n然而还是不行, 最后研究了这个仓库的[配置](https://github.com/chentsulin/electron-react-boilerplate/blob/master/webpack.config.development.js)，发现还有这样的一个配置 `target: 'electron-renderer'`，然而官方文档上却没有说明。\n\n为了避免更多人步我后尘，就去给 `Webpack` 文档增加了说明[Compare: configuration](https://github.com/webpack/docs/wiki/configuration/_compare/135c3a8e13bc72ee5e9aede3571e1e5060188390)。\n\n这时候热替换的问题也就解决了，这个过程还能从提交历史中看到 [PupaFM](https://github.com/xwartz/PupaFM/commits/master/dev-server.js)。\n\nBut...\n\n当后来有时间再回顾这个问题的时候，一直在想第一种方式应该能解决才对啊，\n所以在第一种方式的配置上加了 `target: 'electron-renderer'`，然而并没有什么软用...\n\n最后再一次查看了一遍 `Webpack` 的文档，仔细的看了 `output.publicPath` 这个配置。\n\n#### output.publicPath\n>The `publicPath` specifies the public URL address of the output files when referenced in a browser. For loaders that embed `<script>` or `<link>` tags or reference assets like images, `publicPath` is used as the href or url() to the file when it’s different then their location on disk (as specified by path). This can be helpful when you want to host some or all output files on a different domain or on a CDN. The Webpack Dev Server also takes a hint from `publicPath` using it to determine where to serve the output files from. As with path you can use the [hash] substitution for a better caching profile.\n\n这TM不就是静态资源引入的路径嘛...\n\n那我只要把相对路径改成绝对地址，不就可以监听到文件更新了嘛。\n\n只要这样就好了嘛 `publicPath: 'http://localhost:3000/static/'`...\n\n果然...\n\n还是需要好好阅读完文档啊，虽然 `Webpack` 的文档也略坑。\n\n具体代码可参考 [Electron React Hot Boilerplate](https://github.com/xwartz/electron-hot-boilerplate)\n","source":"_posts/2016-06-electron-with-hmr.md","raw":"---\ntitle: 在 Electron 中使用模块热替换\ndate: 2016-06-06 11:45:22\ntags: \n  - electron\n  - hmr\n---\n\n{% asset_img erb.png %}\n\n\n`Electron` + `React` + `Webpack` 这个组合开发桌面应用还是挺爽的。\n\n如果再搭上 `Webpack` 的 [Hot Module Replacement](http://webpack.github.io/docs/hot-module-replacement.html) 那简直完美，不用刷新就搞定。\n\n关于 `HMR` 的演示可以看 Dan Abramov 的演讲视频 [Hot Reloading with Time Travel](https://www.youtube.com/watch?v=xsSnOQynTHs)。\n\n在 `Electron` 中使用 `HMR` 碰到的主要问题是打开的文件是本地的，所以监听到的 `host` 就变成了 `file://`，然后 `Webpack` 根本无法找到更新了的模块...\n\n<!-- more -->\n\n{% asset_img hmr-error.png %}\n\n当时这个问题搞疯了我，花了很长时间，所以这篇就是为了记录下当时的坑。\n\n上图出现的情况，当时用的配置就是使用的比较官方的方式, 使用 `webpack-dev-server` 和 `react-hot-loader`。\n\n```js\nimport path from 'path'\nimport webpack from 'webpack'\n\nmodule.exports = {\n  devtool: 'eval',\n  entry: [\n    'webpack-dev-server/client?http://localhost:3000',\n    'webpack/hot/only-dev-server',\n    './src/index'\n  ],\n  output: {\n    path: path.join(__dirname, 'dist'),\n    filename: 'bundle.js',\n    publicPath: '/static/'\n  },\n  plugins: [\n    new webpack.HotModuleReplacementPlugin()\n  ],\n  module: {\n    loaders: [{\n      test: /\\.js$/,\n      loaders: ['react-hot', 'babel'],\n      include: path.join(__dirname, 'src')\n    }]\n  }\n}\n```\n\n然后换成 [React Hot Loader 3](https://github.com/gaearon/react-hot-loader/pull/240) 试了一下，果然不出所料，还是没能成功。\n\n本来问题就是出在 `webpack-dev-server` 上嘛，所以就把精力集中在替换 `webpack-dev-server` 上了。\n\n找到目标就是干，自己用 `express` + `webpack-dev-middleware` + `webpack-hot-middleware` 自己搭建服务。\n\n```js\n'use strict'\n\nimport express from 'express'\nimport webpack from 'webpack'\nimport webpackDevMiddleware from 'webpack-dev-middleware'\nimport webpackHotMiddleware from 'webpack-hot-middleware'\n\nimport config from './webpack.config.dev'\n\nconst app = express()\nconst compiler = webpack(config)\nconst PORT = 3000\n\napp.use(webpackDevMiddleware(compiler, {\n  publicPath: config.output.publicPath,\n  noInfo: false,\n  reload: true,\n  stats: {\n    colors: true\n  }\n}))\n\n// hot\napp.use(webpackHotMiddleware(compiler))\n\napp.listen(PORT, 'localhost', (err) => {\n  if (err) {\n    console.error(err)\n    return\n  }\n  console.log(`Listening at http://localhost:${PORT}`)\n})\n\n```\n\n然而还是不行, 最后研究了这个仓库的[配置](https://github.com/chentsulin/electron-react-boilerplate/blob/master/webpack.config.development.js)，发现还有这样的一个配置 `target: 'electron-renderer'`，然而官方文档上却没有说明。\n\n为了避免更多人步我后尘，就去给 `Webpack` 文档增加了说明[Compare: configuration](https://github.com/webpack/docs/wiki/configuration/_compare/135c3a8e13bc72ee5e9aede3571e1e5060188390)。\n\n这时候热替换的问题也就解决了，这个过程还能从提交历史中看到 [PupaFM](https://github.com/xwartz/PupaFM/commits/master/dev-server.js)。\n\nBut...\n\n当后来有时间再回顾这个问题的时候，一直在想第一种方式应该能解决才对啊，\n所以在第一种方式的配置上加了 `target: 'electron-renderer'`，然而并没有什么软用...\n\n最后再一次查看了一遍 `Webpack` 的文档，仔细的看了 `output.publicPath` 这个配置。\n\n#### output.publicPath\n>The `publicPath` specifies the public URL address of the output files when referenced in a browser. For loaders that embed `<script>` or `<link>` tags or reference assets like images, `publicPath` is used as the href or url() to the file when it’s different then their location on disk (as specified by path). This can be helpful when you want to host some or all output files on a different domain or on a CDN. The Webpack Dev Server also takes a hint from `publicPath` using it to determine where to serve the output files from. As with path you can use the [hash] substitution for a better caching profile.\n\n这TM不就是静态资源引入的路径嘛...\n\n那我只要把相对路径改成绝对地址，不就可以监听到文件更新了嘛。\n\n只要这样就好了嘛 `publicPath: 'http://localhost:3000/static/'`...\n\n果然...\n\n还是需要好好阅读完文档啊，虽然 `Webpack` 的文档也略坑。\n\n具体代码可参考 [Electron React Hot Boilerplate](https://github.com/xwartz/electron-hot-boilerplate)\n","slug":"electron-with-hmr","published":1,"updated":"2016-06-06T10:22:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipcrlumd0008hry1durrxaji","content":"<img src=\"/pupa/2016/06/electron-with-hmr/erb.png\" alt=\"erb.png\" title=\"\">\n<p><code>Electron</code> + <code>React</code> + <code>Webpack</code> 这个组合开发桌面应用还是挺爽的。</p>\n<p>如果再搭上 <code>Webpack</code> 的 <a href=\"http://webpack.github.io/docs/hot-module-replacement.html\" target=\"_blank\" rel=\"external\">Hot Module Replacement</a> 那简直完美，不用刷新就搞定。</p>\n<p>关于 <code>HMR</code> 的演示可以看 Dan Abramov 的演讲视频 <a href=\"https://www.youtube.com/watch?v=xsSnOQynTHs\" target=\"_blank\" rel=\"external\">Hot Reloading with Time Travel</a>。</p>\n<p>在 <code>Electron</code> 中使用 <code>HMR</code> 碰到的主要问题是打开的文件是本地的，所以监听到的 <code>host</code> 就变成了 <code>file://</code>，然后 <code>Webpack</code> 根本无法找到更新了的模块…</p>\n<a id=\"more\"></a>\n<img src=\"/pupa/2016/06/electron-with-hmr/hmr-error.png\" alt=\"hmr-error.png\" title=\"\">\n<p>当时这个问题搞疯了我，花了很长时间，所以这篇就是为了记录下当时的坑。</p>\n<p>上图出现的情况，当时用的配置就是使用的比较官方的方式, 使用 <code>webpack-dev-server</code> 和 <code>react-hot-loader</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> path <span class=\"keyword\">from</span> <span class=\"string\">'path'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> webpack <span class=\"keyword\">from</span> <span class=\"string\">'webpack'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  devtool: <span class=\"string\">'eval'</span>,</span><br><span class=\"line\">  entry: [</span><br><span class=\"line\">    <span class=\"string\">'webpack-dev-server/client?http://localhost:3000'</span>,</span><br><span class=\"line\">    <span class=\"string\">'webpack/hot/only-dev-server'</span>,</span><br><span class=\"line\">    <span class=\"string\">'./src/index'</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.join(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">    filename: <span class=\"string\">'bundle.js'</span>,</span><br><span class=\"line\">    publicPath: <span class=\"string\">'/static/'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    loaders: [&#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">      loaders: [<span class=\"string\">'react-hot'</span>, <span class=\"string\">'babel'</span>],</span><br><span class=\"line\">      include: path.join(__dirname, <span class=\"string\">'src'</span>)</span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后换成 <a href=\"https://github.com/gaearon/react-hot-loader/pull/240\" target=\"_blank\" rel=\"external\">React Hot Loader 3</a> 试了一下，果然不出所料，还是没能成功。</p>\n<p>本来问题就是出在 <code>webpack-dev-server</code> 上嘛，所以就把精力集中在替换 <code>webpack-dev-server</code> 上了。</p>\n<p>找到目标就是干，自己用 <code>express</code> + <code>webpack-dev-middleware</code> + <code>webpack-hot-middleware</code> 自己搭建服务。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> express <span class=\"keyword\">from</span> <span class=\"string\">'express'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> webpack <span class=\"keyword\">from</span> <span class=\"string\">'webpack'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> webpackDevMiddleware <span class=\"keyword\">from</span> <span class=\"string\">'webpack-dev-middleware'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> webpackHotMiddleware <span class=\"keyword\">from</span> <span class=\"string\">'webpack-hot-middleware'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> config <span class=\"keyword\">from</span> <span class=\"string\">'./webpack.config.dev'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express()</span><br><span class=\"line\"><span class=\"keyword\">const</span> compiler = webpack(config)</span><br><span class=\"line\"><span class=\"keyword\">const</span> PORT = <span class=\"number\">3000</span></span><br><span class=\"line\"></span><br><span class=\"line\">app.use(webpackDevMiddleware(compiler, &#123;</span><br><span class=\"line\">  publicPath: config.output.publicPath,</span><br><span class=\"line\">  noInfo: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  reload: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  stats: &#123;</span><br><span class=\"line\">    colors: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// hot</span></span><br><span class=\"line\">app.use(webpackHotMiddleware(compiler))</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(PORT, <span class=\"string\">'localhost'</span>, (err) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(err)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`Listening at http://localhost:<span class=\"subst\">$&#123;PORT&#125;</span>`</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>然而还是不行, 最后研究了这个仓库的<a href=\"https://github.com/chentsulin/electron-react-boilerplate/blob/master/webpack.config.development.js\" target=\"_blank\" rel=\"external\">配置</a>，发现还有这样的一个配置 <code>target: &#39;electron-renderer&#39;</code>，然而官方文档上却没有说明。</p>\n<p>为了避免更多人步我后尘，就去给 <code>Webpack</code> 文档增加了说明<a href=\"https://github.com/webpack/docs/wiki/configuration/_compare/135c3a8e13bc72ee5e9aede3571e1e5060188390\" target=\"_blank\" rel=\"external\">Compare: configuration</a>。</p>\n<p>这时候热替换的问题也就解决了，这个过程还能从提交历史中看到 <a href=\"https://github.com/xwartz/PupaFM/commits/master/dev-server.js\" target=\"_blank\" rel=\"external\">PupaFM</a>。</p>\n<p>But…</p>\n<p>当后来有时间再回顾这个问题的时候，一直在想第一种方式应该能解决才对啊，<br>所以在第一种方式的配置上加了 <code>target: &#39;electron-renderer&#39;</code>，然而并没有什么软用…</p>\n<p>最后再一次查看了一遍 <code>Webpack</code> 的文档，仔细的看了 <code>output.publicPath</code> 这个配置。</p>\n<h4 id=\"output-publicPath\"><a href=\"#output-publicPath\" class=\"headerlink\" title=\"output.publicPath\"></a>output.publicPath</h4><blockquote>\n<p>The <code>publicPath</code> specifies the public URL address of the output files when referenced in a browser. For loaders that embed <code>&lt;script&gt;</code> or <code>&lt;link&gt;</code> tags or reference assets like images, <code>publicPath</code> is used as the href or url() to the file when it’s different then their location on disk (as specified by path). This can be helpful when you want to host some or all output files on a different domain or on a CDN. The Webpack Dev Server also takes a hint from <code>publicPath</code> using it to determine where to serve the output files from. As with path you can use the [hash] substitution for a better caching profile.</p>\n</blockquote>\n<p>这TM不就是静态资源引入的路径嘛…</p>\n<p>那我只要把相对路径改成绝对地址，不就可以监听到文件更新了嘛。</p>\n<p>只要这样就好了嘛 <code>publicPath: &#39;http://localhost:3000/static/&#39;</code>…</p>\n<p>果然…</p>\n<p>还是需要好好阅读完文档啊，虽然 <code>Webpack</code> 的文档也略坑。</p>\n<p>具体代码可参考 <a href=\"https://github.com/xwartz/electron-hot-boilerplate\" target=\"_blank\" rel=\"external\">Electron React Hot Boilerplate</a></p>\n","excerpt":"<img src=\"/pupa/2016/06/electron-with-hmr/erb.png\" alt=\"erb.png\" title=\"\">\n<p><code>Electron</code> + <code>React</code> + <code>Webpack</code> 这个组合开发桌面应用还是挺爽的。</p>\n<p>如果再搭上 <code>Webpack</code> 的 <a href=\"http://webpack.github.io/docs/hot-module-replacement.html\">Hot Module Replacement</a> 那简直完美，不用刷新就搞定。</p>\n<p>关于 <code>HMR</code> 的演示可以看 Dan Abramov 的演讲视频 <a href=\"https://www.youtube.com/watch?v=xsSnOQynTHs\">Hot Reloading with Time Travel</a>。</p>\n<p>在 <code>Electron</code> 中使用 <code>HMR</code> 碰到的主要问题是打开的文件是本地的，所以监听到的 <code>host</code> 就变成了 <code>file://</code>，然后 <code>Webpack</code> 根本无法找到更新了的模块…</p>","more":"<img src=\"/pupa/2016/06/electron-with-hmr/hmr-error.png\" alt=\"hmr-error.png\" title=\"\">\n<p>当时这个问题搞疯了我，花了很长时间，所以这篇就是为了记录下当时的坑。</p>\n<p>上图出现的情况，当时用的配置就是使用的比较官方的方式, 使用 <code>webpack-dev-server</code> 和 <code>react-hot-loader</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> path <span class=\"keyword\">from</span> <span class=\"string\">'path'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> webpack <span class=\"keyword\">from</span> <span class=\"string\">'webpack'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  devtool: <span class=\"string\">'eval'</span>,</span><br><span class=\"line\">  entry: [</span><br><span class=\"line\">    <span class=\"string\">'webpack-dev-server/client?http://localhost:3000'</span>,</span><br><span class=\"line\">    <span class=\"string\">'webpack/hot/only-dev-server'</span>,</span><br><span class=\"line\">    <span class=\"string\">'./src/index'</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.join(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">    filename: <span class=\"string\">'bundle.js'</span>,</span><br><span class=\"line\">    publicPath: <span class=\"string\">'/static/'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    loaders: [&#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">      loaders: [<span class=\"string\">'react-hot'</span>, <span class=\"string\">'babel'</span>],</span><br><span class=\"line\">      include: path.join(__dirname, <span class=\"string\">'src'</span>)</span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后换成 <a href=\"https://github.com/gaearon/react-hot-loader/pull/240\">React Hot Loader 3</a> 试了一下，果然不出所料，还是没能成功。</p>\n<p>本来问题就是出在 <code>webpack-dev-server</code> 上嘛，所以就把精力集中在替换 <code>webpack-dev-server</code> 上了。</p>\n<p>找到目标就是干，自己用 <code>express</code> + <code>webpack-dev-middleware</code> + <code>webpack-hot-middleware</code> 自己搭建服务。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> express <span class=\"keyword\">from</span> <span class=\"string\">'express'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> webpack <span class=\"keyword\">from</span> <span class=\"string\">'webpack'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> webpackDevMiddleware <span class=\"keyword\">from</span> <span class=\"string\">'webpack-dev-middleware'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> webpackHotMiddleware <span class=\"keyword\">from</span> <span class=\"string\">'webpack-hot-middleware'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> config <span class=\"keyword\">from</span> <span class=\"string\">'./webpack.config.dev'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express()</span><br><span class=\"line\"><span class=\"keyword\">const</span> compiler = webpack(config)</span><br><span class=\"line\"><span class=\"keyword\">const</span> PORT = <span class=\"number\">3000</span></span><br><span class=\"line\"></span><br><span class=\"line\">app.use(webpackDevMiddleware(compiler, &#123;</span><br><span class=\"line\">  publicPath: config.output.publicPath,</span><br><span class=\"line\">  noInfo: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  reload: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  stats: &#123;</span><br><span class=\"line\">    colors: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// hot</span></span><br><span class=\"line\">app.use(webpackHotMiddleware(compiler))</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(PORT, <span class=\"string\">'localhost'</span>, (err) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(err)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`Listening at http://localhost:<span class=\"subst\">$&#123;PORT&#125;</span>`</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>然而还是不行, 最后研究了这个仓库的<a href=\"https://github.com/chentsulin/electron-react-boilerplate/blob/master/webpack.config.development.js\">配置</a>，发现还有这样的一个配置 <code>target: &#39;electron-renderer&#39;</code>，然而官方文档上却没有说明。</p>\n<p>为了避免更多人步我后尘，就去给 <code>Webpack</code> 文档增加了说明<a href=\"https://github.com/webpack/docs/wiki/configuration/_compare/135c3a8e13bc72ee5e9aede3571e1e5060188390\">Compare: configuration</a>。</p>\n<p>这时候热替换的问题也就解决了，这个过程还能从提交历史中看到 <a href=\"https://github.com/xwartz/PupaFM/commits/master/dev-server.js\">PupaFM</a>。</p>\n<p>But…</p>\n<p>当后来有时间再回顾这个问题的时候，一直在想第一种方式应该能解决才对啊，<br>所以在第一种方式的配置上加了 <code>target: &#39;electron-renderer&#39;</code>，然而并没有什么软用…</p>\n<p>最后再一次查看了一遍 <code>Webpack</code> 的文档，仔细的看了 <code>output.publicPath</code> 这个配置。</p>\n<h4 id=\"output-publicPath\"><a href=\"#output-publicPath\" class=\"headerlink\" title=\"output.publicPath\"></a>output.publicPath</h4><blockquote>\n<p>The <code>publicPath</code> specifies the public URL address of the output files when referenced in a browser. For loaders that embed <code>&lt;script&gt;</code> or <code>&lt;link&gt;</code> tags or reference assets like images, <code>publicPath</code> is used as the href or url() to the file when it’s different then their location on disk (as specified by path). This can be helpful when you want to host some or all output files on a different domain or on a CDN. The Webpack Dev Server also takes a hint from <code>publicPath</code> using it to determine where to serve the output files from. As with path you can use the [hash] substitution for a better caching profile.</p>\n</blockquote>\n<p>这TM不就是静态资源引入的路径嘛…</p>\n<p>那我只要把相对路径改成绝对地址，不就可以监听到文件更新了嘛。</p>\n<p>只要这样就好了嘛 <code>publicPath: &#39;http://localhost:3000/static/&#39;</code>…</p>\n<p>果然…</p>\n<p>还是需要好好阅读完文档啊，虽然 <code>Webpack</code> 的文档也略坑。</p>\n<p>具体代码可参考 <a href=\"https://github.com/xwartz/electron-hot-boilerplate\">Electron React Hot Boilerplate</a></p>"},{"title":"配置 Mac 终端","date":"2016-06-12T15:36:59.000Z","_content":"\n{% asset_img iterm.png %}\n\n\n","source":"_posts/2016-06-iterminal.md","raw":"---\ntitle: 配置 Mac 终端\ndate: 2016-06-12 23:36:59\ntags:\n  - mac\n---\n\n{% asset_img iterm.png %}\n\n\n","slug":"iterminal","published":1,"updated":"2016-06-12T15:47:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipcrlumm0009hry124thsz2w","content":"<img src=\"/pupa/2016/06/iterminal/iterm.png\" alt=\"iterm.png\" title=\"\">\n","excerpt":"","more":"<img src=\"/pupa/2016/06/iterminal/iterm.png\" alt=\"iterm.png\" title=\"\">\n"},{"layout":"photo","title":"House","date":"2016-06-04T08:37:12.000Z","_content":"\n{% asset_img 1.jpg %}\n\n<!--more-->\n\n{% asset_img 2.jpg %}\n{% asset_img 3.jpg %}\n{% asset_img 4.jpg %}\n{% asset_img 5.jpg %}\n{% asset_img 6.jpg %}\n{% asset_img 7.jpg %}\n{% asset_img 8.jpg %}\n{% asset_img 9.jpg %}\n","source":"_posts/2016-06-house.md","raw":"layout: photo\ntitle: House\ndate: 2016-06-04 16:37:12\ntags: life\n---\n\n{% asset_img 1.jpg %}\n\n<!--more-->\n\n{% asset_img 2.jpg %}\n{% asset_img 3.jpg %}\n{% asset_img 4.jpg %}\n{% asset_img 5.jpg %}\n{% asset_img 6.jpg %}\n{% asset_img 7.jpg %}\n{% asset_img 8.jpg %}\n{% asset_img 9.jpg %}\n","slug":"house","published":1,"updated":"2016-06-04T08:49:09.000Z","comments":1,"photos":[],"link":"","_id":"cipcrlun3000chry1jncjqex8","content":"<img src=\"/pupa/2016/06/house/1.jpg\" alt=\"1.jpg\" title=\"\">\n<a id=\"more\"></a>\n<img src=\"/pupa/2016/06/house/2.jpg\" alt=\"2.jpg\" title=\"\">\n<img src=\"/pupa/2016/06/house/3.jpg\" alt=\"3.jpg\" title=\"\">\n<img src=\"/pupa/2016/06/house/4.jpg\" alt=\"4.jpg\" title=\"\">\n<img src=\"/pupa/2016/06/house/5.jpg\" alt=\"5.jpg\" title=\"\">\n<img src=\"/pupa/2016/06/house/6.jpg\" alt=\"6.jpg\" title=\"\">\n<img src=\"/pupa/2016/06/house/7.jpg\" alt=\"7.jpg\" title=\"\">\n<img src=\"/pupa/2016/06/house/8.jpg\" alt=\"8.jpg\" title=\"\">\n<img src=\"/pupa/2016/06/house/9.jpg\" alt=\"9.jpg\" title=\"\">\n","excerpt":"<img src=\"/pupa/2016/06/house/1.jpg\" alt=\"1.jpg\" title=\"\">","more":"<img src=\"/pupa/2016/06/house/2.jpg\" alt=\"2.jpg\" title=\"\">\n<img src=\"/pupa/2016/06/house/3.jpg\" alt=\"3.jpg\" title=\"\">\n<img src=\"/pupa/2016/06/house/4.jpg\" alt=\"4.jpg\" title=\"\">\n<img src=\"/pupa/2016/06/house/5.jpg\" alt=\"5.jpg\" title=\"\">\n<img src=\"/pupa/2016/06/house/6.jpg\" alt=\"6.jpg\" title=\"\">\n<img src=\"/pupa/2016/06/house/7.jpg\" alt=\"7.jpg\" title=\"\">\n<img src=\"/pupa/2016/06/house/8.jpg\" alt=\"8.jpg\" title=\"\">\n<img src=\"/pupa/2016/06/house/9.jpg\" alt=\"9.jpg\" title=\"\">"}],"PostAsset":[{"_id":"source/_posts/2016-06-house/1.jpg","slug":"1.jpg","post":"cipcrlun3000chry1jncjqex8","modified":1,"renderable":0},{"_id":"source/_posts/2016-06-house/2.jpg","slug":"2.jpg","post":"cipcrlun3000chry1jncjqex8","modified":1,"renderable":0},{"_id":"source/_posts/2016-06-house/6.jpg","slug":"6.jpg","post":"cipcrlun3000chry1jncjqex8","modified":1,"renderable":0},{"_id":"source/_posts/2016-06-house/4.jpg","slug":"4.jpg","post":"cipcrlun3000chry1jncjqex8","modified":1,"renderable":0},{"_id":"source/_posts/2016-06-house/3.jpg","slug":"3.jpg","post":"cipcrlun3000chry1jncjqex8","modified":1,"renderable":0},{"_id":"source/_posts/2016-05-24/new_year.png","slug":"new_year.png","post":"cipcrlulg0000hry1vdtby0ql","modified":1,"renderable":0},{"_id":"source/_posts/2016-06-gg/cover.jpg","slug":"cover.jpg","post":"cipcrluls0003hry1eoleqr38","modified":1,"renderable":0},{"_id":"source/_posts/2016-06-iterminal/iterm.png","slug":"iterm.png","post":"cipcrlumm0009hry124thsz2w","modified":1,"renderable":0},{"_id":"source/_posts/2016-05-my-workflow-in-sublime/sublime.png","slug":"sublime.png","post":"cipcrlull0001hry1pzjzpyr2","modified":1,"renderable":0},{"_id":"source/_posts/2016-05-my-workflow-in-sublime/webstorm.png","slug":"webstorm.png","post":"cipcrlull0001hry1pzjzpyr2","modified":1,"renderable":0},{"_id":"source/_posts/2016-06-auto-update-with-travis-ci/token.png","post":"cipcrlulz0004hry1j98ce7h4","slug":"token.png","modified":1,"renderable":1},{"_id":"source/_posts/2016-06-auto-update-with-travis-ci/travis.svg","post":"cipcrlulz0004hry1j98ce7h4","slug":"travis.svg","modified":1,"renderable":1},{"_id":"source/_posts/2016-06-electron-with-hmr/erb.png","post":"cipcrlumd0008hry1durrxaji","slug":"erb.png","modified":1,"renderable":1},{"_id":"source/_posts/2016-06-electron-with-hmr/hmr-error.png","post":"cipcrlumd0008hry1durrxaji","slug":"hmr-error.png","modified":1,"renderable":1},{"_id":"source/_posts/2016-06-house/10.jpg","post":"cipcrlun3000chry1jncjqex8","slug":"10.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2016-06-house/11.jpg","post":"cipcrlun3000chry1jncjqex8","slug":"11.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2016-06-house/12.jpg","post":"cipcrlun3000chry1jncjqex8","slug":"12.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2016-06-house/5.jpg","post":"cipcrlun3000chry1jncjqex8","slug":"5.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2016-06-house/7.jpg","post":"cipcrlun3000chry1jncjqex8","slug":"7.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2016-06-house/8.jpg","slug":"8.jpg","post":"cipcrlun3000chry1jncjqex8","modified":1,"renderable":0},{"_id":"source/_posts/2016-06-house/9.jpg","slug":"9.jpg","post":"cipcrlun3000chry1jncjqex8","modified":1,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"cipcrlulg0000hry1vdtby0ql","tag_id":"cipcrlulo0002hry1domqm1il","_id":"cipcrlumc0007hry1z9iztfw1"},{"post_id":"cipcrlull0001hry1pzjzpyr2","tag_id":"cipcrlum70005hry1qvi2vr8r","_id":"cipcrlun2000bhry1be3xehm0"},{"post_id":"cipcrlun3000chry1jncjqex8","tag_id":"cipcrlulo0002hry1domqm1il","_id":"cipcrlun5000ehry178ascahf"},{"post_id":"cipcrluls0003hry1eoleqr38","tag_id":"cipcrlulo0002hry1domqm1il","_id":"cipcrlun6000fhry1rwf0ibnk"},{"post_id":"cipcrlulz0004hry1j98ce7h4","tag_id":"cipcrlun4000dhry1djzlyonj","_id":"cipcrlun8000ihry1nvfkdvqw"},{"post_id":"cipcrlulz0004hry1j98ce7h4","tag_id":"cipcrlun6000ghry198g244gn","_id":"cipcrlun9000jhry1myvzszfw"},{"post_id":"cipcrlum80006hry1xn5tpx7k","tag_id":"cipcrlun7000hhry1d6iyft4s","_id":"cipcrluna000lhry1g9wawets"},{"post_id":"cipcrlumd0008hry1durrxaji","tag_id":"cipcrlun9000khry1e74z56hc","_id":"cipcrlung000ohry15yqbehr6"},{"post_id":"cipcrlumd0008hry1durrxaji","tag_id":"cipcrlunf000mhry12eo9t0ej","_id":"cipcrlunh000phry1pe0ip1iy"},{"post_id":"cipcrlumm0009hry124thsz2w","tag_id":"cipcrlunf000nhry1pugspb5i","_id":"cipcrlunh000qhry16i7ie155"}],"Tag":[{"name":"life","_id":"cipcrlulo0002hry1domqm1il"},{"name":"前端工程","_id":"cipcrlum70005hry1qvi2vr8r"},{"name":"travis","_id":"cipcrlun4000dhry1djzlyonj"},{"name":"git","_id":"cipcrlun6000ghry198g244gn"},{"name":"翻译","_id":"cipcrlun7000hhry1d6iyft4s"},{"name":"electron","_id":"cipcrlun9000khry1e74z56hc"},{"name":"hmr","_id":"cipcrlunf000mhry12eo9t0ej"},{"name":"mac","_id":"cipcrlunf000nhry1pugspb5i"}]}}